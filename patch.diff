From 31f3ecd88966e6b93eeffa47daa7eb9a09d0fe93 Mon Sep 17 00:00:00 2001
From: Matteo Taroli <matteo.taroli@oniryx.be>
Date: Fri, 11 May 2018 14:49:55 +0200
Subject: [PATCH] Add domain

---
 .jhipster/Category.json                            |  32 ++
 .jhipster/Employee.json                            |  34 ++
 .jhipster/ExpenseNote.json                         |  75 ++++
 .jhipster/Template.json                            |  59 +++
 jhipster-jdl.jh                                    |  47 +++
 .../java/be/oniryx/config/CacheConfiguration.java  |   6 +
 src/main/java/be/oniryx/domain/Category.java       | 110 ++++++
 src/main/java/be/oniryx/domain/Employee.java       | 115 ++++++
 src/main/java/be/oniryx/domain/ExpenseNote.java    | 258 ++++++++++++++
 src/main/java/be/oniryx/domain/Template.java       | 202 +++++++++++
 .../java/be/oniryx/domain/enumeration/Status.java  |   8 +
 .../be/oniryx/repository/CategoryRepository.java   |  16 +
 .../be/oniryx/repository/EmployeeRepository.java   |  16 +
 .../oniryx/repository/ExpenseNoteRepository.java   |  16 +
 .../be/oniryx/repository/TemplateRepository.java   |  16 +
 .../java/be/oniryx/web/rest/CategoryResource.java  | 120 +++++++
 .../java/be/oniryx/web/rest/EmployeeResource.java  | 137 +++++++
 .../be/oniryx/web/rest/ExpenseNoteResource.java    | 120 +++++++
 .../java/be/oniryx/web/rest/TemplateResource.java  | 120 +++++++
 .../20180511123631_added_entity_Template.xml       |  52 +++
 ...511123631_added_entity_constraints_Template.xml |  18 +
 .../20180511123632_added_entity_Category.xml       |  42 +++
 ...511123632_added_entity_constraints_Category.xml |  24 ++
 .../20180511123633_added_entity_Employee.xml       |  34 ++
 .../20180511123634_added_entity_ExpenseNote.xml    |  64 ++++
 ...123634_added_entity_constraints_ExpenseNote.xml |  18 +
 src/main/resources/config/liquibase/master.xml     |   7 +
 .../category/category-delete-dialog.component.html |  19 +
 .../category/category-delete-dialog.component.ts   |  64 ++++
 .../category/category-detail.component.html        |  38 ++
 .../entities/category/category-detail.component.ts |  55 +++
 .../category/category-dialog.component.html        |  50 +++
 .../entities/category/category-dialog.component.ts | 117 ++++++
 .../entities/category/category-popup.service.ts    |  57 +++
 .../app/entities/category/category.component.html  |  70 ++++
 .../app/entities/category/category.component.ts    |  57 +++
 .../webapp/app/entities/category/category.model.ts |  11 +
 .../app/entities/category/category.module.ts       |  49 +++
 .../webapp/app/entities/category/category.route.ts |  60 ++++
 .../app/entities/category/category.service.ts      |  74 ++++
 src/main/webapp/app/entities/category/index.ts     |   8 +
 .../employee/employee-delete-dialog.component.html |  19 +
 .../employee/employee-delete-dialog.component.ts   |  64 ++++
 .../employee/employee-detail.component.html        |  26 ++
 .../entities/employee/employee-detail.component.ts |  55 +++
 .../employee/employee-dialog.component.html        |  36 ++
 .../entities/employee/employee-dialog.component.ts | 117 ++++++
 .../entities/employee/employee-popup.service.ts    |  57 +++
 .../app/entities/employee/employee.component.html  |  58 +++
 .../app/entities/employee/employee.component.ts    |  57 +++
 .../webapp/app/entities/employee/employee.model.ts |  11 +
 .../app/entities/employee/employee.module.ts       |  49 +++
 .../webapp/app/entities/employee/employee.route.ts |  60 ++++
 .../app/entities/employee/employee.service.ts      |  74 ++++
 src/main/webapp/app/entities/employee/index.ts     |   8 +
 src/main/webapp/app/entities/entity.module.ts      |   8 +
 .../expense-note-delete-dialog.component.html      |  19 +
 .../expense-note-delete-dialog.component.ts        |  64 ++++
 .../expense-note-detail.component.html             |  60 ++++
 .../expense-note/expense-note-detail.component.ts  |  55 +++
 .../expense-note-dialog.component.html             | 120 +++++++
 .../expense-note/expense-note-dialog.component.ts  | 120 +++++++
 .../expense-note/expense-note-popup.service.ts     |  71 ++++
 .../expense-note/expense-note.component.html       |  78 ++++
 .../expense-note/expense-note.component.ts         |  57 +++
 .../entities/expense-note/expense-note.model.ts    |  25 ++
 .../entities/expense-note/expense-note.module.ts   |  49 +++
 .../entities/expense-note/expense-note.route.ts    |  60 ++++
 .../entities/expense-note/expense-note.service.ts  |  84 +++++
 src/main/webapp/app/entities/expense-note/index.ts |   8 +
 src/main/webapp/app/entities/template/index.ts     |   8 +
 .../template/template-delete-dialog.component.html |  19 +
 .../template/template-delete-dialog.component.ts   |  64 ++++
 .../template/template-detail.component.html        |  48 +++
 .../entities/template/template-detail.component.ts |  55 +++
 .../template/template-dialog.component.html        |  85 +++++
 .../entities/template/template-dialog.component.ts | 118 ++++++
 .../entities/template/template-popup.service.ts    |  57 +++
 .../app/entities/template/template.component.html  |  72 ++++
 .../app/entities/template/template.component.ts    |  57 +++
 .../webapp/app/entities/template/template.model.ts |  15 +
 .../app/entities/template/template.module.ts       |  49 +++
 .../webapp/app/entities/template/template.route.ts |  60 ++++
 .../app/entities/template/template.service.ts      |  74 ++++
 .../app/layouts/navbar/navbar.component.html       |  24 ++
 .../oniryx/web/rest/CategoryResourceIntTest.java   | 257 +++++++++++++
 .../oniryx/web/rest/EmployeeResourceIntTest.java   | 257 +++++++++++++
 .../web/rest/ExpenseNoteResourceIntTest.java       | 396 +++++++++++++++++++++
 .../oniryx/web/rest/TemplateResourceIntTest.java   | 348 ++++++++++++++++++
 .../category-delete-dialog.component.spec.ts       |  61 ++++
 .../category/category-detail.component.spec.ts     |  54 +++
 .../category/category-dialog.component.spec.ts     |  89 +++++
 .../entities/category/category.component.spec.ts   |  55 +++
 .../app/entities/category/category.service.spec.ts |  70 ++++
 .../employee-delete-dialog.component.spec.ts       |  61 ++++
 .../employee/employee-detail.component.spec.ts     |  54 +++
 .../employee/employee-dialog.component.spec.ts     |  89 +++++
 .../entities/employee/employee.component.spec.ts   |  55 +++
 .../app/entities/employee/employee.service.spec.ts |  70 ++++
 .../expense-note-delete-dialog.component.spec.ts   |  61 ++++
 .../expense-note-detail.component.spec.ts          |  54 +++
 .../expense-note-dialog.component.spec.ts          |  87 +++++
 .../expense-note/expense-note.component.spec.ts    |  55 +++
 .../expense-note/expense-note.service.spec.ts      |  70 ++++
 .../template-delete-dialog.component.spec.ts       |  61 ++++
 .../template/template-detail.component.spec.ts     |  54 +++
 .../template/template-dialog.component.spec.ts     |  87 +++++
 .../entities/template/template.component.spec.ts   |  55 +++
 .../app/entities/template/template.service.spec.ts |  70 ++++
 109 files changed, 7439 insertions(+)
 create mode 100644 .jhipster/Category.json
 create mode 100644 .jhipster/Employee.json
 create mode 100644 .jhipster/ExpenseNote.json
 create mode 100644 .jhipster/Template.json
 create mode 100644 jhipster-jdl.jh
 create mode 100644 src/main/java/be/oniryx/domain/Category.java
 create mode 100644 src/main/java/be/oniryx/domain/Employee.java
 create mode 100644 src/main/java/be/oniryx/domain/ExpenseNote.java
 create mode 100644 src/main/java/be/oniryx/domain/Template.java
 create mode 100644 src/main/java/be/oniryx/domain/enumeration/Status.java
 create mode 100644 src/main/java/be/oniryx/repository/CategoryRepository.java
 create mode 100644 src/main/java/be/oniryx/repository/EmployeeRepository.java
 create mode 100644 src/main/java/be/oniryx/repository/ExpenseNoteRepository.java
 create mode 100644 src/main/java/be/oniryx/repository/TemplateRepository.java
 create mode 100644 src/main/java/be/oniryx/web/rest/CategoryResource.java
 create mode 100644 src/main/java/be/oniryx/web/rest/EmployeeResource.java
 create mode 100644 src/main/java/be/oniryx/web/rest/ExpenseNoteResource.java
 create mode 100644 src/main/java/be/oniryx/web/rest/TemplateResource.java
 create mode 100644 src/main/resources/config/liquibase/changelog/20180511123631_added_entity_Template.xml
 create mode 100644 src/main/resources/config/liquibase/changelog/20180511123631_added_entity_constraints_Template.xml
 create mode 100644 src/main/resources/config/liquibase/changelog/20180511123632_added_entity_Category.xml
 create mode 100644 src/main/resources/config/liquibase/changelog/20180511123632_added_entity_constraints_Category.xml
 create mode 100644 src/main/resources/config/liquibase/changelog/20180511123633_added_entity_Employee.xml
 create mode 100644 src/main/resources/config/liquibase/changelog/20180511123634_added_entity_ExpenseNote.xml
 create mode 100644 src/main/resources/config/liquibase/changelog/20180511123634_added_entity_constraints_ExpenseNote.xml
 create mode 100644 src/main/webapp/app/entities/category/category-delete-dialog.component.html
 create mode 100644 src/main/webapp/app/entities/category/category-delete-dialog.component.ts
 create mode 100644 src/main/webapp/app/entities/category/category-detail.component.html
 create mode 100644 src/main/webapp/app/entities/category/category-detail.component.ts
 create mode 100644 src/main/webapp/app/entities/category/category-dialog.component.html
 create mode 100644 src/main/webapp/app/entities/category/category-dialog.component.ts
 create mode 100644 src/main/webapp/app/entities/category/category-popup.service.ts
 create mode 100644 src/main/webapp/app/entities/category/category.component.html
 create mode 100644 src/main/webapp/app/entities/category/category.component.ts
 create mode 100644 src/main/webapp/app/entities/category/category.model.ts
 create mode 100644 src/main/webapp/app/entities/category/category.module.ts
 create mode 100644 src/main/webapp/app/entities/category/category.route.ts
 create mode 100644 src/main/webapp/app/entities/category/category.service.ts
 create mode 100644 src/main/webapp/app/entities/category/index.ts
 create mode 100644 src/main/webapp/app/entities/employee/employee-delete-dialog.component.html
 create mode 100644 src/main/webapp/app/entities/employee/employee-delete-dialog.component.ts
 create mode 100644 src/main/webapp/app/entities/employee/employee-detail.component.html
 create mode 100644 src/main/webapp/app/entities/employee/employee-detail.component.ts
 create mode 100644 src/main/webapp/app/entities/employee/employee-dialog.component.html
 create mode 100644 src/main/webapp/app/entities/employee/employee-dialog.component.ts
 create mode 100644 src/main/webapp/app/entities/employee/employee-popup.service.ts
 create mode 100644 src/main/webapp/app/entities/employee/employee.component.html
 create mode 100644 src/main/webapp/app/entities/employee/employee.component.ts
 create mode 100644 src/main/webapp/app/entities/employee/employee.model.ts
 create mode 100644 src/main/webapp/app/entities/employee/employee.module.ts
 create mode 100644 src/main/webapp/app/entities/employee/employee.route.ts
 create mode 100644 src/main/webapp/app/entities/employee/employee.service.ts
 create mode 100644 src/main/webapp/app/entities/employee/index.ts
 create mode 100644 src/main/webapp/app/entities/expense-note/expense-note-delete-dialog.component.html
 create mode 100644 src/main/webapp/app/entities/expense-note/expense-note-delete-dialog.component.ts
 create mode 100644 src/main/webapp/app/entities/expense-note/expense-note-detail.component.html
 create mode 100644 src/main/webapp/app/entities/expense-note/expense-note-detail.component.ts
 create mode 100644 src/main/webapp/app/entities/expense-note/expense-note-dialog.component.html
 create mode 100644 src/main/webapp/app/entities/expense-note/expense-note-dialog.component.ts
 create mode 100644 src/main/webapp/app/entities/expense-note/expense-note-popup.service.ts
 create mode 100644 src/main/webapp/app/entities/expense-note/expense-note.component.html
 create mode 100644 src/main/webapp/app/entities/expense-note/expense-note.component.ts
 create mode 100644 src/main/webapp/app/entities/expense-note/expense-note.model.ts
 create mode 100644 src/main/webapp/app/entities/expense-note/expense-note.module.ts
 create mode 100644 src/main/webapp/app/entities/expense-note/expense-note.route.ts
 create mode 100644 src/main/webapp/app/entities/expense-note/expense-note.service.ts
 create mode 100644 src/main/webapp/app/entities/expense-note/index.ts
 create mode 100644 src/main/webapp/app/entities/template/index.ts
 create mode 100644 src/main/webapp/app/entities/template/template-delete-dialog.component.html
 create mode 100644 src/main/webapp/app/entities/template/template-delete-dialog.component.ts
 create mode 100644 src/main/webapp/app/entities/template/template-detail.component.html
 create mode 100644 src/main/webapp/app/entities/template/template-detail.component.ts
 create mode 100644 src/main/webapp/app/entities/template/template-dialog.component.html
 create mode 100644 src/main/webapp/app/entities/template/template-dialog.component.ts
 create mode 100644 src/main/webapp/app/entities/template/template-popup.service.ts
 create mode 100644 src/main/webapp/app/entities/template/template.component.html
 create mode 100644 src/main/webapp/app/entities/template/template.component.ts
 create mode 100644 src/main/webapp/app/entities/template/template.model.ts
 create mode 100644 src/main/webapp/app/entities/template/template.module.ts
 create mode 100644 src/main/webapp/app/entities/template/template.route.ts
 create mode 100644 src/main/webapp/app/entities/template/template.service.ts
 create mode 100644 src/test/java/be/oniryx/web/rest/CategoryResourceIntTest.java
 create mode 100644 src/test/java/be/oniryx/web/rest/EmployeeResourceIntTest.java
 create mode 100644 src/test/java/be/oniryx/web/rest/ExpenseNoteResourceIntTest.java
 create mode 100644 src/test/java/be/oniryx/web/rest/TemplateResourceIntTest.java
 create mode 100644 src/test/javascript/spec/app/entities/category/category-delete-dialog.component.spec.ts
 create mode 100644 src/test/javascript/spec/app/entities/category/category-detail.component.spec.ts
 create mode 100644 src/test/javascript/spec/app/entities/category/category-dialog.component.spec.ts
 create mode 100644 src/test/javascript/spec/app/entities/category/category.component.spec.ts
 create mode 100644 src/test/javascript/spec/app/entities/category/category.service.spec.ts
 create mode 100644 src/test/javascript/spec/app/entities/employee/employee-delete-dialog.component.spec.ts
 create mode 100644 src/test/javascript/spec/app/entities/employee/employee-detail.component.spec.ts
 create mode 100644 src/test/javascript/spec/app/entities/employee/employee-dialog.component.spec.ts
 create mode 100644 src/test/javascript/spec/app/entities/employee/employee.component.spec.ts
 create mode 100644 src/test/javascript/spec/app/entities/employee/employee.service.spec.ts
 create mode 100644 src/test/javascript/spec/app/entities/expense-note/expense-note-delete-dialog.component.spec.ts
 create mode 100644 src/test/javascript/spec/app/entities/expense-note/expense-note-detail.component.spec.ts
 create mode 100644 src/test/javascript/spec/app/entities/expense-note/expense-note-dialog.component.spec.ts
 create mode 100644 src/test/javascript/spec/app/entities/expense-note/expense-note.component.spec.ts
 create mode 100644 src/test/javascript/spec/app/entities/expense-note/expense-note.service.spec.ts
 create mode 100644 src/test/javascript/spec/app/entities/template/template-delete-dialog.component.spec.ts
 create mode 100644 src/test/javascript/spec/app/entities/template/template-detail.component.spec.ts
 create mode 100644 src/test/javascript/spec/app/entities/template/template-dialog.component.spec.ts
 create mode 100644 src/test/javascript/spec/app/entities/template/template.component.spec.ts
 create mode 100644 src/test/javascript/spec/app/entities/template/template.service.spec.ts

diff --git a/.jhipster/Category.json b/.jhipster/Category.json
new file mode 100644
index 0000000..bb19fde
--- /dev/null
+++ b/.jhipster/Category.json
@@ -0,0 +1,32 @@
+{
+    "fluentMethods": true,
+    "relationships": [
+        {
+            "relationshipType": "many-to-one",
+            "relationshipName": "template",
+            "otherEntityName": "template",
+            "otherEntityField": "id"
+        },
+        {
+            "relationshipType": "many-to-one",
+            "relationshipName": "expenseNote",
+            "otherEntityName": "expenseNote",
+            "otherEntityField": "id"
+        }
+    ],
+    "fields": [
+        {
+            "fieldName": "label",
+            "fieldType": "String",
+            "fieldValidateRules": [
+                "required"
+            ]
+        }
+    ],
+    "changelogDate": "20180511123632",
+    "entityTableName": "category",
+    "dto": "no",
+    "pagination": "no",
+    "service": "no",
+    "jpaMetamodelFiltering": false
+}
\ No newline at end of file
diff --git a/.jhipster/Employee.json b/.jhipster/Employee.json
new file mode 100644
index 0000000..0235d23
--- /dev/null
+++ b/.jhipster/Employee.json
@@ -0,0 +1,34 @@
+{
+    "fluentMethods": true,
+    "relationships": [
+        {
+            "relationshipType": "one-to-one",
+            "relationshipName": "template",
+            "otherEntityName": "template",
+            "ownerSide": false,
+            "otherEntityRelationshipName": "employee"
+        },
+        {
+            "relationshipType": "one-to-one",
+            "relationshipName": "expenseNote",
+            "otherEntityName": "expenseNote",
+            "ownerSide": false,
+            "otherEntityRelationshipName": "employee"
+        }
+    ],
+    "fields": [
+        {
+            "fieldName": "trigram",
+            "fieldType": "String",
+            "fieldValidateRules": [
+                "required"
+            ]
+        }
+    ],
+    "changelogDate": "20180511123633",
+    "entityTableName": "employee",
+    "dto": "no",
+    "pagination": "no",
+    "service": "no",
+    "jpaMetamodelFiltering": false
+}
\ No newline at end of file
diff --git a/.jhipster/ExpenseNote.json b/.jhipster/ExpenseNote.json
new file mode 100644
index 0000000..f6c2d5e
--- /dev/null
+++ b/.jhipster/ExpenseNote.json
@@ -0,0 +1,75 @@
+{
+    "fluentMethods": true,
+    "relationships": [
+        {
+            "relationshipType": "one-to-one",
+            "relationshipName": "employee",
+            "otherEntityName": "employee",
+            "otherEntityField": "id",
+            "ownerSide": true,
+            "otherEntityRelationshipName": "expenseNote(id)"
+        },
+        {
+            "relationshipType": "one-to-many",
+            "relationshipName": "category",
+            "otherEntityName": "category",
+            "otherEntityRelationshipName": "expenseNote"
+        }
+    ],
+    "fields": [
+        {
+            "fieldName": "montant",
+            "fieldType": "BigDecimal",
+            "fieldValidateRules": [
+                "required"
+            ]
+        },
+        {
+            "fieldName": "label",
+            "fieldType": "String",
+            "fieldValidateRules": [
+                "required"
+            ]
+        },
+        {
+            "fieldName": "justification",
+            "fieldType": "String",
+            "fieldValidateRules": [
+                "required"
+            ]
+        },
+        {
+            "fieldName": "comment",
+            "fieldType": "String"
+        },
+        {
+            "fieldName": "provider",
+            "fieldType": "String",
+            "fieldValidateRules": [
+                "required"
+            ]
+        },
+        {
+            "fieldName": "submitDate",
+            "fieldType": "LocalDate",
+            "fieldValidateRules": [
+                "required"
+            ]
+        },
+        {
+            "fieldName": "paymentDate",
+            "fieldType": "LocalDate"
+        },
+        {
+            "fieldName": "status",
+            "fieldType": "Status",
+            "fieldValues": "ENCODED,SUSPENDED,PAID,REJECTED"
+        }
+    ],
+    "changelogDate": "20180511123634",
+    "entityTableName": "expense_note",
+    "dto": "no",
+    "pagination": "no",
+    "service": "no",
+    "jpaMetamodelFiltering": false
+}
\ No newline at end of file
diff --git a/.jhipster/Template.json b/.jhipster/Template.json
new file mode 100644
index 0000000..c721f05
--- /dev/null
+++ b/.jhipster/Template.json
@@ -0,0 +1,59 @@
+{
+    "fluentMethods": true,
+    "relationships": [
+        {
+            "relationshipType": "one-to-one",
+            "relationshipName": "employee",
+            "otherEntityName": "employee",
+            "otherEntityField": "id",
+            "ownerSide": true,
+            "otherEntityRelationshipName": "template(id)"
+        },
+        {
+            "relationshipType": "one-to-many",
+            "relationshipName": "category",
+            "otherEntityName": "category",
+            "otherEntityRelationshipName": "template"
+        }
+    ],
+    "fields": [
+        {
+            "fieldName": "montant",
+            "fieldType": "BigDecimal",
+            "fieldValidateRules": [
+                "required"
+            ]
+        },
+        {
+            "fieldName": "label",
+            "fieldType": "String",
+            "fieldValidateRules": [
+                "required"
+            ]
+        },
+        {
+            "fieldName": "justification",
+            "fieldType": "String",
+            "fieldValidateRules": [
+                "required"
+            ]
+        },
+        {
+            "fieldName": "comment",
+            "fieldType": "String"
+        },
+        {
+            "fieldName": "provider",
+            "fieldType": "String",
+            "fieldValidateRules": [
+                "required"
+            ]
+        }
+    ],
+    "changelogDate": "20180511123631",
+    "entityTableName": "template",
+    "dto": "no",
+    "pagination": "no",
+    "service": "no",
+    "jpaMetamodelFiltering": false
+}
\ No newline at end of file
diff --git a/jhipster-jdl.jh b/jhipster-jdl.jh
new file mode 100644
index 0000000..cd09b01
--- /dev/null
+++ b/jhipster-jdl.jh
@@ -0,0 +1,47 @@
+entity Template {
+	id Long,
+    montant BigDecimal required,
+    label String required,
+    justification String required,
+    comment String,
+    provider String required
+}
+
+entity Category {
+	id Long,
+    label String required
+}
+
+entity Employee {
+	id Long,
+    trigram String required
+}
+
+entity ExpenseNote {
+	id Long,
+    montant BigDecimal required,
+    label String required,
+    justification String required,
+    comment String,
+    provider String required,
+    submitDate LocalDate required,
+    paymentDate LocalDate,
+    status Status
+}
+
+enum Status {
+	ENCODED,
+    SUSPENDED,
+    PAID,
+    REJECTED
+}
+
+relationship OneToMany {
+	Template{category} to Category{template(id)},
+	ExpenseNote{category} to Category{expenseNote(id)}
+}
+
+relationship OneToOne {
+	Template{employee} to Employee{template(id)},
+    ExpenseNote{employee} to Employee{expenseNote(id)}
+}
diff --git a/src/main/java/be/oniryx/config/CacheConfiguration.java b/src/main/java/be/oniryx/config/CacheConfiguration.java
index baddea7..1c94999 100644
--- a/src/main/java/be/oniryx/config/CacheConfiguration.java
+++ b/src/main/java/be/oniryx/config/CacheConfiguration.java
@@ -42,6 +42,12 @@ public class CacheConfiguration {
             cm.createCache(be.oniryx.domain.User.class.getName(), jcacheConfiguration);
             cm.createCache(be.oniryx.domain.Authority.class.getName(), jcacheConfiguration);
             cm.createCache(be.oniryx.domain.User.class.getName() + ".authorities", jcacheConfiguration);
+            cm.createCache(be.oniryx.domain.Template.class.getName(), jcacheConfiguration);
+            cm.createCache(be.oniryx.domain.Template.class.getName() + ".categories", jcacheConfiguration);
+            cm.createCache(be.oniryx.domain.Category.class.getName(), jcacheConfiguration);
+            cm.createCache(be.oniryx.domain.Employee.class.getName(), jcacheConfiguration);
+            cm.createCache(be.oniryx.domain.ExpenseNote.class.getName(), jcacheConfiguration);
+            cm.createCache(be.oniryx.domain.ExpenseNote.class.getName() + ".categories", jcacheConfiguration);
             // jhipster-needle-ehcache-add-entry
         };
     }
diff --git a/src/main/java/be/oniryx/domain/Category.java b/src/main/java/be/oniryx/domain/Category.java
new file mode 100644
index 0000000..8e07e21
--- /dev/null
+++ b/src/main/java/be/oniryx/domain/Category.java
@@ -0,0 +1,110 @@
+package be.oniryx.domain;
+
+import com.sun.istack.internal.NotNull;
+import org.hibernate.annotations.Cache;
+import org.hibernate.annotations.CacheConcurrencyStrategy;
+
+import java.io.Serializable;
+import java.util.Objects;
+
+/**
+ * A Category.
+ */
+@Entity
+@Table(name = "category")
+@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
+public class Category implements Serializable {
+
+    private static final long serialVersionUID = 1L;
+
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    private Long id;
+
+    @NotNull
+    @Column(name = "jhi_label", nullable = false)
+    private String label;
+
+    @ManyToOne
+    private Template template;
+
+    @ManyToOne
+    private ExpenseNote expenseNote;
+
+    // jhipster-needle-entity-add-field - JHipster will add fields here, do not remove
+    public Long getId() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
+    public String getLabel() {
+        return label;
+    }
+
+    public Category label(String label) {
+        this.label = label;
+        return this;
+    }
+
+    public void setLabel(String label) {
+        this.label = label;
+    }
+
+    public Template getTemplate() {
+        return template;
+    }
+
+    public Category template(Template template) {
+        this.template = template;
+        return this;
+    }
+
+    public void setTemplate(Template template) {
+        this.template = template;
+    }
+
+    public ExpenseNote getExpenseNote() {
+        return expenseNote;
+    }
+
+    public Category expenseNote(ExpenseNote expenseNote) {
+        this.expenseNote = expenseNote;
+        return this;
+    }
+
+    public void setExpenseNote(ExpenseNote expenseNote) {
+        this.expenseNote = expenseNote;
+    }
+    // jhipster-needle-entity-add-getters-setters - JHipster will add getters and setters here, do not remove
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) {
+            return true;
+        }
+        if (o == null || getClass() != o.getClass()) {
+            return false;
+        }
+        Category category = (Category) o;
+        if (category.getId() == null || getId() == null) {
+            return false;
+        }
+        return Objects.equals(getId(), category.getId());
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hashCode(getId());
+    }
+
+    @Override
+    public String toString() {
+        return "Category{" +
+            "id=" + getId() +
+            ", label='" + getLabel() + "'" +
+            "}";
+    }
+}
diff --git a/src/main/java/be/oniryx/domain/Employee.java b/src/main/java/be/oniryx/domain/Employee.java
new file mode 100644
index 0000000..1c5f110
--- /dev/null
+++ b/src/main/java/be/oniryx/domain/Employee.java
@@ -0,0 +1,115 @@
+package be.oniryx.domain;
+
+import com.fasterxml.jackson.annotation.JsonIgnore;
+import org.hibernate.annotations.Cache;
+import org.hibernate.annotations.CacheConcurrencyStrategy;
+
+import javax.persistence.*;
+import javax.validation.constraints.*;
+
+import java.io.Serializable;
+import java.util.Objects;
+
+/**
+ * A Employee.
+ */
+@Entity
+@Table(name = "employee")
+@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
+public class Employee implements Serializable {
+
+    private static final long serialVersionUID = 1L;
+
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    private Long id;
+
+    @NotNull
+    @Column(name = "trigram", nullable = false)
+    private String trigram;
+
+    @OneToOne(mappedBy = "employee")
+    @JsonIgnore
+    private Template template;
+
+    @OneToOne(mappedBy = "employee")
+    @JsonIgnore
+    private ExpenseNote expenseNote;
+
+    // jhipster-needle-entity-add-field - JHipster will add fields here, do not remove
+    public Long getId() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
+    public String getTrigram() {
+        return trigram;
+    }
+
+    public Employee trigram(String trigram) {
+        this.trigram = trigram;
+        return this;
+    }
+
+    public void setTrigram(String trigram) {
+        this.trigram = trigram;
+    }
+
+    public Template getTemplate() {
+        return template;
+    }
+
+    public Employee template(Template template) {
+        this.template = template;
+        return this;
+    }
+
+    public void setTemplate(Template template) {
+        this.template = template;
+    }
+
+    public ExpenseNote getExpenseNote() {
+        return expenseNote;
+    }
+
+    public Employee expenseNote(ExpenseNote expenseNote) {
+        this.expenseNote = expenseNote;
+        return this;
+    }
+
+    public void setExpenseNote(ExpenseNote expenseNote) {
+        this.expenseNote = expenseNote;
+    }
+    // jhipster-needle-entity-add-getters-setters - JHipster will add getters and setters here, do not remove
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) {
+            return true;
+        }
+        if (o == null || getClass() != o.getClass()) {
+            return false;
+        }
+        Employee employee = (Employee) o;
+        if (employee.getId() == null || getId() == null) {
+            return false;
+        }
+        return Objects.equals(getId(), employee.getId());
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hashCode(getId());
+    }
+
+    @Override
+    public String toString() {
+        return "Employee{" +
+            "id=" + getId() +
+            ", trigram='" + getTrigram() + "'" +
+            "}";
+    }
+}
diff --git a/src/main/java/be/oniryx/domain/ExpenseNote.java b/src/main/java/be/oniryx/domain/ExpenseNote.java
new file mode 100644
index 0000000..6dfc24f
--- /dev/null
+++ b/src/main/java/be/oniryx/domain/ExpenseNote.java
@@ -0,0 +1,258 @@
+package be.oniryx.domain;
+
+import com.fasterxml.jackson.annotation.JsonIgnore;
+import org.hibernate.annotations.Cache;
+import org.hibernate.annotations.CacheConcurrencyStrategy;
+
+import javax.persistence.*;
+import javax.validation.constraints.*;
+
+import java.io.Serializable;
+import java.math.BigDecimal;
+import java.time.LocalDate;
+import java.util.HashSet;
+import java.util.Set;
+import java.util.Objects;
+
+import be.oniryx.domain.enumeration.Status;
+
+/**
+ * A ExpenseNote.
+ */
+@Entity
+@Table(name = "expense_note")
+@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
+public class ExpenseNote implements Serializable {
+
+    private static final long serialVersionUID = 1L;
+
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    private Long id;
+
+    @NotNull
+    @Column(name = "montant", precision=10, scale=2, nullable = false)
+    private BigDecimal montant;
+
+    @NotNull
+    @Column(name = "jhi_label", nullable = false)
+    private String label;
+
+    @NotNull
+    @Column(name = "justification", nullable = false)
+    private String justification;
+
+    @Column(name = "jhi_comment")
+    private String comment;
+
+    @NotNull
+    @Column(name = "provider", nullable = false)
+    private String provider;
+
+    @NotNull
+    @Column(name = "submit_date", nullable = false)
+    private LocalDate submitDate;
+
+    @Column(name = "payment_date")
+    private LocalDate paymentDate;
+
+    @Enumerated(EnumType.STRING)
+    @Column(name = "status")
+    private Status status;
+
+    @OneToOne
+    @JoinColumn(unique = true)
+    private Employee employee;
+
+    @OneToMany(mappedBy = "expenseNote")
+    @JsonIgnore
+    @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
+    private Set<Category> categories = new HashSet<>();
+
+    // jhipster-needle-entity-add-field - JHipster will add fields here, do not remove
+    public Long getId() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
+    public BigDecimal getMontant() {
+        return montant;
+    }
+
+    public ExpenseNote montant(BigDecimal montant) {
+        this.montant = montant;
+        return this;
+    }
+
+    public void setMontant(BigDecimal montant) {
+        this.montant = montant;
+    }
+
+    public String getLabel() {
+        return label;
+    }
+
+    public ExpenseNote label(String label) {
+        this.label = label;
+        return this;
+    }
+
+    public void setLabel(String label) {
+        this.label = label;
+    }
+
+    public String getJustification() {
+        return justification;
+    }
+
+    public ExpenseNote justification(String justification) {
+        this.justification = justification;
+        return this;
+    }
+
+    public void setJustification(String justification) {
+        this.justification = justification;
+    }
+
+    public String getComment() {
+        return comment;
+    }
+
+    public ExpenseNote comment(String comment) {
+        this.comment = comment;
+        return this;
+    }
+
+    public void setComment(String comment) {
+        this.comment = comment;
+    }
+
+    public String getProvider() {
+        return provider;
+    }
+
+    public ExpenseNote provider(String provider) {
+        this.provider = provider;
+        return this;
+    }
+
+    public void setProvider(String provider) {
+        this.provider = provider;
+    }
+
+    public LocalDate getSubmitDate() {
+        return submitDate;
+    }
+
+    public ExpenseNote submitDate(LocalDate submitDate) {
+        this.submitDate = submitDate;
+        return this;
+    }
+
+    public void setSubmitDate(LocalDate submitDate) {
+        this.submitDate = submitDate;
+    }
+
+    public LocalDate getPaymentDate() {
+        return paymentDate;
+    }
+
+    public ExpenseNote paymentDate(LocalDate paymentDate) {
+        this.paymentDate = paymentDate;
+        return this;
+    }
+
+    public void setPaymentDate(LocalDate paymentDate) {
+        this.paymentDate = paymentDate;
+    }
+
+    public Status getStatus() {
+        return status;
+    }
+
+    public ExpenseNote status(Status status) {
+        this.status = status;
+        return this;
+    }
+
+    public void setStatus(Status status) {
+        this.status = status;
+    }
+
+    public Employee getEmployee() {
+        return employee;
+    }
+
+    public ExpenseNote employee(Employee employee) {
+        this.employee = employee;
+        return this;
+    }
+
+    public void setEmployee(Employee employee) {
+        this.employee = employee;
+    }
+
+    public Set<Category> getCategories() {
+        return categories;
+    }
+
+    public ExpenseNote categories(Set<Category> categories) {
+        this.categories = categories;
+        return this;
+    }
+
+    public ExpenseNote addCategory(Category category) {
+        this.categories.add(category);
+        category.setExpenseNote(this);
+        return this;
+    }
+
+    public ExpenseNote removeCategory(Category category) {
+        this.categories.remove(category);
+        category.setExpenseNote(null);
+        return this;
+    }
+
+    public void setCategories(Set<Category> categories) {
+        this.categories = categories;
+    }
+    // jhipster-needle-entity-add-getters-setters - JHipster will add getters and setters here, do not remove
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) {
+            return true;
+        }
+        if (o == null || getClass() != o.getClass()) {
+            return false;
+        }
+        ExpenseNote expenseNote = (ExpenseNote) o;
+        if (expenseNote.getId() == null || getId() == null) {
+            return false;
+        }
+        return Objects.equals(getId(), expenseNote.getId());
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hashCode(getId());
+    }
+
+    @Override
+    public String toString() {
+        return "ExpenseNote{" +
+            "id=" + getId() +
+            ", montant=" + getMontant() +
+            ", label='" + getLabel() + "'" +
+            ", justification='" + getJustification() + "'" +
+            ", comment='" + getComment() + "'" +
+            ", provider='" + getProvider() + "'" +
+            ", submitDate='" + getSubmitDate() + "'" +
+            ", paymentDate='" + getPaymentDate() + "'" +
+            ", status='" + getStatus() + "'" +
+            "}";
+    }
+}
diff --git a/src/main/java/be/oniryx/domain/Template.java b/src/main/java/be/oniryx/domain/Template.java
new file mode 100644
index 0000000..84e504f
--- /dev/null
+++ b/src/main/java/be/oniryx/domain/Template.java
@@ -0,0 +1,202 @@
+package be.oniryx.domain;
+
+import com.fasterxml.jackson.annotation.JsonIgnore;
+import org.hibernate.annotations.Cache;
+import org.hibernate.annotations.CacheConcurrencyStrategy;
+
+import javax.persistence.*;
+import javax.validation.constraints.*;
+
+import java.io.Serializable;
+import java.math.BigDecimal;
+import java.util.HashSet;
+import java.util.Set;
+import java.util.Objects;
+
+/**
+ * A Template.
+ */
+@Entity
+@Table(name = "template")
+@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
+public class Template implements Serializable {
+
+    private static final long serialVersionUID = 1L;
+
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    private Long id;
+
+    @NotNull
+    @Column(name = "montant", precision=10, scale=2, nullable = false)
+    private BigDecimal montant;
+
+    @NotNull
+    @Column(name = "jhi_label", nullable = false)
+    private String label;
+
+    @NotNull
+    @Column(name = "justification", nullable = false)
+    private String justification;
+
+    @Column(name = "jhi_comment")
+    private String comment;
+
+    @NotNull
+    @Column(name = "provider", nullable = false)
+    private String provider;
+
+    @OneToOne
+    @JoinColumn(unique = true)
+    private Employee employee;
+
+    @OneToMany(mappedBy = "template")
+    @JsonIgnore
+    @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
+    private Set<Category> categories = new HashSet<>();
+
+    // jhipster-needle-entity-add-field - JHipster will add fields here, do not remove
+    public Long getId() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
+    public BigDecimal getMontant() {
+        return montant;
+    }
+
+    public Template montant(BigDecimal montant) {
+        this.montant = montant;
+        return this;
+    }
+
+    public void setMontant(BigDecimal montant) {
+        this.montant = montant;
+    }
+
+    public String getLabel() {
+        return label;
+    }
+
+    public Template label(String label) {
+        this.label = label;
+        return this;
+    }
+
+    public void setLabel(String label) {
+        this.label = label;
+    }
+
+    public String getJustification() {
+        return justification;
+    }
+
+    public Template justification(String justification) {
+        this.justification = justification;
+        return this;
+    }
+
+    public void setJustification(String justification) {
+        this.justification = justification;
+    }
+
+    public String getComment() {
+        return comment;
+    }
+
+    public Template comment(String comment) {
+        this.comment = comment;
+        return this;
+    }
+
+    public void setComment(String comment) {
+        this.comment = comment;
+    }
+
+    public String getProvider() {
+        return provider;
+    }
+
+    public Template provider(String provider) {
+        this.provider = provider;
+        return this;
+    }
+
+    public void setProvider(String provider) {
+        this.provider = provider;
+    }
+
+    public Employee getEmployee() {
+        return employee;
+    }
+
+    public Template employee(Employee employee) {
+        this.employee = employee;
+        return this;
+    }
+
+    public void setEmployee(Employee employee) {
+        this.employee = employee;
+    }
+
+    public Set<Category> getCategories() {
+        return categories;
+    }
+
+    public Template categories(Set<Category> categories) {
+        this.categories = categories;
+        return this;
+    }
+
+    public Template addCategory(Category category) {
+        this.categories.add(category);
+        category.setTemplate(this);
+        return this;
+    }
+
+    public Template removeCategory(Category category) {
+        this.categories.remove(category);
+        category.setTemplate(null);
+        return this;
+    }
+
+    public void setCategories(Set<Category> categories) {
+        this.categories = categories;
+    }
+    // jhipster-needle-entity-add-getters-setters - JHipster will add getters and setters here, do not remove
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) {
+            return true;
+        }
+        if (o == null || getClass() != o.getClass()) {
+            return false;
+        }
+        Template template = (Template) o;
+        if (template.getId() == null || getId() == null) {
+            return false;
+        }
+        return Objects.equals(getId(), template.getId());
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hashCode(getId());
+    }
+
+    @Override
+    public String toString() {
+        return "Template{" +
+            "id=" + getId() +
+            ", montant=" + getMontant() +
+            ", label='" + getLabel() + "'" +
+            ", justification='" + getJustification() + "'" +
+            ", comment='" + getComment() + "'" +
+            ", provider='" + getProvider() + "'" +
+            "}";
+    }
+}
diff --git a/src/main/java/be/oniryx/domain/enumeration/Status.java b/src/main/java/be/oniryx/domain/enumeration/Status.java
new file mode 100644
index 0000000..d7df2dd
--- /dev/null
+++ b/src/main/java/be/oniryx/domain/enumeration/Status.java
@@ -0,0 +1,8 @@
+package be.oniryx.domain.enumeration;
+
+/**
+ * The Status enumeration.
+ */
+public enum Status {
+    ENCODED, SUSPENDED, PAID, REJECTED
+}
diff --git a/src/main/java/be/oniryx/repository/CategoryRepository.java b/src/main/java/be/oniryx/repository/CategoryRepository.java
new file mode 100644
index 0000000..9072002
--- /dev/null
+++ b/src/main/java/be/oniryx/repository/CategoryRepository.java
@@ -0,0 +1,16 @@
+package be.oniryx.repository;
+
+import be.oniryx.domain.Category;
+import org.springframework.stereotype.Repository;
+
+import org.springframework.data.jpa.repository.*;
+
+
+/**
+ * Spring Data JPA repository for the Category entity.
+ */
+@SuppressWarnings("unused")
+@Repository
+public interface CategoryRepository extends JpaRepository<Category, Long> {
+
+}
diff --git a/src/main/java/be/oniryx/repository/EmployeeRepository.java b/src/main/java/be/oniryx/repository/EmployeeRepository.java
new file mode 100644
index 0000000..41bd785
--- /dev/null
+++ b/src/main/java/be/oniryx/repository/EmployeeRepository.java
@@ -0,0 +1,16 @@
+package be.oniryx.repository;
+
+import be.oniryx.domain.Employee;
+import org.springframework.stereotype.Repository;
+
+import org.springframework.data.jpa.repository.*;
+
+
+/**
+ * Spring Data JPA repository for the Employee entity.
+ */
+@SuppressWarnings("unused")
+@Repository
+public interface EmployeeRepository extends JpaRepository<Employee, Long> {
+
+}
diff --git a/src/main/java/be/oniryx/repository/ExpenseNoteRepository.java b/src/main/java/be/oniryx/repository/ExpenseNoteRepository.java
new file mode 100644
index 0000000..5336e54
--- /dev/null
+++ b/src/main/java/be/oniryx/repository/ExpenseNoteRepository.java
@@ -0,0 +1,16 @@
+package be.oniryx.repository;
+
+import be.oniryx.domain.ExpenseNote;
+import org.springframework.stereotype.Repository;
+
+import org.springframework.data.jpa.repository.*;
+
+
+/**
+ * Spring Data JPA repository for the ExpenseNote entity.
+ */
+@SuppressWarnings("unused")
+@Repository
+public interface ExpenseNoteRepository extends JpaRepository<ExpenseNote, Long> {
+
+}
diff --git a/src/main/java/be/oniryx/repository/TemplateRepository.java b/src/main/java/be/oniryx/repository/TemplateRepository.java
new file mode 100644
index 0000000..544e815
--- /dev/null
+++ b/src/main/java/be/oniryx/repository/TemplateRepository.java
@@ -0,0 +1,16 @@
+package be.oniryx.repository;
+
+import be.oniryx.domain.Template;
+import org.springframework.stereotype.Repository;
+
+import org.springframework.data.jpa.repository.*;
+
+
+/**
+ * Spring Data JPA repository for the Template entity.
+ */
+@SuppressWarnings("unused")
+@Repository
+public interface TemplateRepository extends JpaRepository<Template, Long> {
+
+}
diff --git a/src/main/java/be/oniryx/web/rest/CategoryResource.java b/src/main/java/be/oniryx/web/rest/CategoryResource.java
new file mode 100644
index 0000000..e367ac2
--- /dev/null
+++ b/src/main/java/be/oniryx/web/rest/CategoryResource.java
@@ -0,0 +1,120 @@
+package be.oniryx.web.rest;
+
+import com.codahale.metrics.annotation.Timed;
+import be.oniryx.domain.Category;
+
+import be.oniryx.repository.CategoryRepository;
+import be.oniryx.web.rest.errors.BadRequestAlertException;
+import be.oniryx.web.rest.util.HeaderUtil;
+import io.github.jhipster.web.util.ResponseUtil;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.annotation.*;
+
+import javax.validation.Valid;
+import java.net.URI;
+import java.net.URISyntaxException;
+
+import java.util.List;
+import java.util.Optional;
+
+/**
+ * REST controller for managing Category.
+ */
+@RestController
+@RequestMapping("/api")
+public class CategoryResource {
+
+    private final Logger log = LoggerFactory.getLogger(CategoryResource.class);
+
+    private static final String ENTITY_NAME = "category";
+
+    private final CategoryRepository categoryRepository;
+
+    public CategoryResource(CategoryRepository categoryRepository) {
+        this.categoryRepository = categoryRepository;
+    }
+
+    /**
+     * POST  /categories : Create a new category.
+     *
+     * @param category the category to create
+     * @return the ResponseEntity with status 201 (Created) and with body the new category, or with status 400 (Bad Request) if the category has already an ID
+     * @throws URISyntaxException if the Location URI syntax is incorrect
+     */
+    @PostMapping("/categories")
+    @Timed
+    public ResponseEntity<Category> createCategory(@Valid @RequestBody Category category) throws URISyntaxException {
+        log.debug("REST request to save Category : {}", category);
+        if (category.getId() != null) {
+            throw new BadRequestAlertException("A new category cannot already have an ID", ENTITY_NAME, "idexists");
+        }
+        Category result = categoryRepository.save(category);
+        return ResponseEntity.created(new URI("/api/categories/" + result.getId()))
+            .headers(HeaderUtil.createEntityCreationAlert(ENTITY_NAME, result.getId().toString()))
+            .body(result);
+    }
+
+    /**
+     * PUT  /categories : Updates an existing category.
+     *
+     * @param category the category to update
+     * @return the ResponseEntity with status 200 (OK) and with body the updated category,
+     * or with status 400 (Bad Request) if the category is not valid,
+     * or with status 500 (Internal Server Error) if the category couldn't be updated
+     * @throws URISyntaxException if the Location URI syntax is incorrect
+     */
+    @PutMapping("/categories")
+    @Timed
+    public ResponseEntity<Category> updateCategory(@Valid @RequestBody Category category) throws URISyntaxException {
+        log.debug("REST request to update Category : {}", category);
+        if (category.getId() == null) {
+            return createCategory(category);
+        }
+        Category result = categoryRepository.save(category);
+        return ResponseEntity.ok()
+            .headers(HeaderUtil.createEntityUpdateAlert(ENTITY_NAME, category.getId().toString()))
+            .body(result);
+    }
+
+    /**
+     * GET  /categories : get all the categories.
+     *
+     * @return the ResponseEntity with status 200 (OK) and the list of categories in body
+     */
+    @GetMapping("/categories")
+    @Timed
+    public List<Category> getAllCategories() {
+        log.debug("REST request to get all Categories");
+        return categoryRepository.findAll();
+        }
+
+    /**
+     * GET  /categories/:id : get the "id" category.
+     *
+     * @param id the id of the category to retrieve
+     * @return the ResponseEntity with status 200 (OK) and with body the category, or with status 404 (Not Found)
+     */
+    @GetMapping("/categories/{id}")
+    @Timed
+    public ResponseEntity<Category> getCategory(@PathVariable Long id) {
+        log.debug("REST request to get Category : {}", id);
+        Category category = categoryRepository.findOne(id);
+        return ResponseUtil.wrapOrNotFound(Optional.ofNullable(category));
+    }
+
+    /**
+     * DELETE  /categories/:id : delete the "id" category.
+     *
+     * @param id the id of the category to delete
+     * @return the ResponseEntity with status 200 (OK)
+     */
+    @DeleteMapping("/categories/{id}")
+    @Timed
+    public ResponseEntity<Void> deleteCategory(@PathVariable Long id) {
+        log.debug("REST request to delete Category : {}", id);
+        categoryRepository.delete(id);
+        return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(ENTITY_NAME, id.toString())).build();
+    }
+}
diff --git a/src/main/java/be/oniryx/web/rest/EmployeeResource.java b/src/main/java/be/oniryx/web/rest/EmployeeResource.java
new file mode 100644
index 0000000..c08a93b
--- /dev/null
+++ b/src/main/java/be/oniryx/web/rest/EmployeeResource.java
@@ -0,0 +1,137 @@
+package be.oniryx.web.rest;
+
+import com.codahale.metrics.annotation.Timed;
+import be.oniryx.domain.Employee;
+
+import be.oniryx.repository.EmployeeRepository;
+import be.oniryx.web.rest.errors.BadRequestAlertException;
+import be.oniryx.web.rest.util.HeaderUtil;
+import io.github.jhipster.web.util.ResponseUtil;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.annotation.*;
+
+import javax.validation.Valid;
+import java.net.URI;
+import java.net.URISyntaxException;
+
+import java.util.List;
+import java.util.Optional;
+import java.util.stream.Collectors;
+import java.util.stream.StreamSupport;
+
+/**
+ * REST controller for managing Employee.
+ */
+@RestController
+@RequestMapping("/api")
+public class EmployeeResource {
+
+    private final Logger log = LoggerFactory.getLogger(EmployeeResource.class);
+
+    private static final String ENTITY_NAME = "employee";
+
+    private final EmployeeRepository employeeRepository;
+
+    public EmployeeResource(EmployeeRepository employeeRepository) {
+        this.employeeRepository = employeeRepository;
+    }
+
+    /**
+     * POST  /employees : Create a new employee.
+     *
+     * @param employee the employee to create
+     * @return the ResponseEntity with status 201 (Created) and with body the new employee, or with status 400 (Bad Request) if the employee has already an ID
+     * @throws URISyntaxException if the Location URI syntax is incorrect
+     */
+    @PostMapping("/employees")
+    @Timed
+    public ResponseEntity<Employee> createEmployee(@Valid @RequestBody Employee employee) throws URISyntaxException {
+        log.debug("REST request to save Employee : {}", employee);
+        if (employee.getId() != null) {
+            throw new BadRequestAlertException("A new employee cannot already have an ID", ENTITY_NAME, "idexists");
+        }
+        Employee result = employeeRepository.save(employee);
+        return ResponseEntity.created(new URI("/api/employees/" + result.getId()))
+            .headers(HeaderUtil.createEntityCreationAlert(ENTITY_NAME, result.getId().toString()))
+            .body(result);
+    }
+
+    /**
+     * PUT  /employees : Updates an existing employee.
+     *
+     * @param employee the employee to update
+     * @return the ResponseEntity with status 200 (OK) and with body the updated employee,
+     * or with status 400 (Bad Request) if the employee is not valid,
+     * or with status 500 (Internal Server Error) if the employee couldn't be updated
+     * @throws URISyntaxException if the Location URI syntax is incorrect
+     */
+    @PutMapping("/employees")
+    @Timed
+    public ResponseEntity<Employee> updateEmployee(@Valid @RequestBody Employee employee) throws URISyntaxException {
+        log.debug("REST request to update Employee : {}", employee);
+        if (employee.getId() == null) {
+            return createEmployee(employee);
+        }
+        Employee result = employeeRepository.save(employee);
+        return ResponseEntity.ok()
+            .headers(HeaderUtil.createEntityUpdateAlert(ENTITY_NAME, employee.getId().toString()))
+            .body(result);
+    }
+
+    /**
+     * GET  /employees : get all the employees.
+     *
+     * @param filter the filter of the request
+     * @return the ResponseEntity with status 200 (OK) and the list of employees in body
+     */
+    @GetMapping("/employees")
+    @Timed
+    public List<Employee> getAllEmployees(@RequestParam(required = false) String filter) {
+        if ("template-is-null".equals(filter)) {
+            log.debug("REST request to get all Employees where template is null");
+            return StreamSupport
+                .stream(employeeRepository.findAll().spliterator(), false)
+                .filter(employee -> employee.getTemplate() == null)
+                .collect(Collectors.toList());
+        }
+        if ("expensenote-is-null".equals(filter)) {
+            log.debug("REST request to get all Employees where expenseNote is null");
+            return StreamSupport
+                .stream(employeeRepository.findAll().spliterator(), false)
+                .filter(employee -> employee.getExpenseNote() == null)
+                .collect(Collectors.toList());
+        }
+        log.debug("REST request to get all Employees");
+        return employeeRepository.findAll();
+        }
+
+    /**
+     * GET  /employees/:id : get the "id" employee.
+     *
+     * @param id the id of the employee to retrieve
+     * @return the ResponseEntity with status 200 (OK) and with body the employee, or with status 404 (Not Found)
+     */
+    @GetMapping("/employees/{id}")
+    @Timed
+    public ResponseEntity<Employee> getEmployee(@PathVariable Long id) {
+        log.debug("REST request to get Employee : {}", id);
+        Employee employee = employeeRepository.findOne(id);
+        return ResponseUtil.wrapOrNotFound(Optional.ofNullable(employee));
+    }
+
+    /**
+     * DELETE  /employees/:id : delete the "id" employee.
+     *
+     * @param id the id of the employee to delete
+     * @return the ResponseEntity with status 200 (OK)
+     */
+    @DeleteMapping("/employees/{id}")
+    @Timed
+    public ResponseEntity<Void> deleteEmployee(@PathVariable Long id) {
+        log.debug("REST request to delete Employee : {}", id);
+        employeeRepository.delete(id);
+        return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(ENTITY_NAME, id.toString())).build();
+    }
+}
diff --git a/src/main/java/be/oniryx/web/rest/ExpenseNoteResource.java b/src/main/java/be/oniryx/web/rest/ExpenseNoteResource.java
new file mode 100644
index 0000000..a6476aa
--- /dev/null
+++ b/src/main/java/be/oniryx/web/rest/ExpenseNoteResource.java
@@ -0,0 +1,120 @@
+package be.oniryx.web.rest;
+
+import com.codahale.metrics.annotation.Timed;
+import be.oniryx.domain.ExpenseNote;
+
+import be.oniryx.repository.ExpenseNoteRepository;
+import be.oniryx.web.rest.errors.BadRequestAlertException;
+import be.oniryx.web.rest.util.HeaderUtil;
+import io.github.jhipster.web.util.ResponseUtil;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.annotation.*;
+
+import javax.validation.Valid;
+import java.net.URI;
+import java.net.URISyntaxException;
+
+import java.util.List;
+import java.util.Optional;
+
+/**
+ * REST controller for managing ExpenseNote.
+ */
+@RestController
+@RequestMapping("/api")
+public class ExpenseNoteResource {
+
+    private final Logger log = LoggerFactory.getLogger(ExpenseNoteResource.class);
+
+    private static final String ENTITY_NAME = "expenseNote";
+
+    private final ExpenseNoteRepository expenseNoteRepository;
+
+    public ExpenseNoteResource(ExpenseNoteRepository expenseNoteRepository) {
+        this.expenseNoteRepository = expenseNoteRepository;
+    }
+
+    /**
+     * POST  /expense-notes : Create a new expenseNote.
+     *
+     * @param expenseNote the expenseNote to create
+     * @return the ResponseEntity with status 201 (Created) and with body the new expenseNote, or with status 400 (Bad Request) if the expenseNote has already an ID
+     * @throws URISyntaxException if the Location URI syntax is incorrect
+     */
+    @PostMapping("/expense-notes")
+    @Timed
+    public ResponseEntity<ExpenseNote> createExpenseNote(@Valid @RequestBody ExpenseNote expenseNote) throws URISyntaxException {
+        log.debug("REST request to save ExpenseNote : {}", expenseNote);
+        if (expenseNote.getId() != null) {
+            throw new BadRequestAlertException("A new expenseNote cannot already have an ID", ENTITY_NAME, "idexists");
+        }
+        ExpenseNote result = expenseNoteRepository.save(expenseNote);
+        return ResponseEntity.created(new URI("/api/expense-notes/" + result.getId()))
+            .headers(HeaderUtil.createEntityCreationAlert(ENTITY_NAME, result.getId().toString()))
+            .body(result);
+    }
+
+    /**
+     * PUT  /expense-notes : Updates an existing expenseNote.
+     *
+     * @param expenseNote the expenseNote to update
+     * @return the ResponseEntity with status 200 (OK) and with body the updated expenseNote,
+     * or with status 400 (Bad Request) if the expenseNote is not valid,
+     * or with status 500 (Internal Server Error) if the expenseNote couldn't be updated
+     * @throws URISyntaxException if the Location URI syntax is incorrect
+     */
+    @PutMapping("/expense-notes")
+    @Timed
+    public ResponseEntity<ExpenseNote> updateExpenseNote(@Valid @RequestBody ExpenseNote expenseNote) throws URISyntaxException {
+        log.debug("REST request to update ExpenseNote : {}", expenseNote);
+        if (expenseNote.getId() == null) {
+            return createExpenseNote(expenseNote);
+        }
+        ExpenseNote result = expenseNoteRepository.save(expenseNote);
+        return ResponseEntity.ok()
+            .headers(HeaderUtil.createEntityUpdateAlert(ENTITY_NAME, expenseNote.getId().toString()))
+            .body(result);
+    }
+
+    /**
+     * GET  /expense-notes : get all the expenseNotes.
+     *
+     * @return the ResponseEntity with status 200 (OK) and the list of expenseNotes in body
+     */
+    @GetMapping("/expense-notes")
+    @Timed
+    public List<ExpenseNote> getAllExpenseNotes() {
+        log.debug("REST request to get all ExpenseNotes");
+        return expenseNoteRepository.findAll();
+        }
+
+    /**
+     * GET  /expense-notes/:id : get the "id" expenseNote.
+     *
+     * @param id the id of the expenseNote to retrieve
+     * @return the ResponseEntity with status 200 (OK) and with body the expenseNote, or with status 404 (Not Found)
+     */
+    @GetMapping("/expense-notes/{id}")
+    @Timed
+    public ResponseEntity<ExpenseNote> getExpenseNote(@PathVariable Long id) {
+        log.debug("REST request to get ExpenseNote : {}", id);
+        ExpenseNote expenseNote = expenseNoteRepository.findOne(id);
+        return ResponseUtil.wrapOrNotFound(Optional.ofNullable(expenseNote));
+    }
+
+    /**
+     * DELETE  /expense-notes/:id : delete the "id" expenseNote.
+     *
+     * @param id the id of the expenseNote to delete
+     * @return the ResponseEntity with status 200 (OK)
+     */
+    @DeleteMapping("/expense-notes/{id}")
+    @Timed
+    public ResponseEntity<Void> deleteExpenseNote(@PathVariable Long id) {
+        log.debug("REST request to delete ExpenseNote : {}", id);
+        expenseNoteRepository.delete(id);
+        return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(ENTITY_NAME, id.toString())).build();
+    }
+}
diff --git a/src/main/java/be/oniryx/web/rest/TemplateResource.java b/src/main/java/be/oniryx/web/rest/TemplateResource.java
new file mode 100644
index 0000000..09339fd
--- /dev/null
+++ b/src/main/java/be/oniryx/web/rest/TemplateResource.java
@@ -0,0 +1,120 @@
+package be.oniryx.web.rest;
+
+import com.codahale.metrics.annotation.Timed;
+import be.oniryx.domain.Template;
+
+import be.oniryx.repository.TemplateRepository;
+import be.oniryx.web.rest.errors.BadRequestAlertException;
+import be.oniryx.web.rest.util.HeaderUtil;
+import io.github.jhipster.web.util.ResponseUtil;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.annotation.*;
+
+import javax.validation.Valid;
+import java.net.URI;
+import java.net.URISyntaxException;
+
+import java.util.List;
+import java.util.Optional;
+
+/**
+ * REST controller for managing Template.
+ */
+@RestController
+@RequestMapping("/api")
+public class TemplateResource {
+
+    private final Logger log = LoggerFactory.getLogger(TemplateResource.class);
+
+    private static final String ENTITY_NAME = "template";
+
+    private final TemplateRepository templateRepository;
+
+    public TemplateResource(TemplateRepository templateRepository) {
+        this.templateRepository = templateRepository;
+    }
+
+    /**
+     * POST  /templates : Create a new template.
+     *
+     * @param template the template to create
+     * @return the ResponseEntity with status 201 (Created) and with body the new template, or with status 400 (Bad Request) if the template has already an ID
+     * @throws URISyntaxException if the Location URI syntax is incorrect
+     */
+    @PostMapping("/templates")
+    @Timed
+    public ResponseEntity<Template> createTemplate(@Valid @RequestBody Template template) throws URISyntaxException {
+        log.debug("REST request to save Template : {}", template);
+        if (template.getId() != null) {
+            throw new BadRequestAlertException("A new template cannot already have an ID", ENTITY_NAME, "idexists");
+        }
+        Template result = templateRepository.save(template);
+        return ResponseEntity.created(new URI("/api/templates/" + result.getId()))
+            .headers(HeaderUtil.createEntityCreationAlert(ENTITY_NAME, result.getId().toString()))
+            .body(result);
+    }
+
+    /**
+     * PUT  /templates : Updates an existing template.
+     *
+     * @param template the template to update
+     * @return the ResponseEntity with status 200 (OK) and with body the updated template,
+     * or with status 400 (Bad Request) if the template is not valid,
+     * or with status 500 (Internal Server Error) if the template couldn't be updated
+     * @throws URISyntaxException if the Location URI syntax is incorrect
+     */
+    @PutMapping("/templates")
+    @Timed
+    public ResponseEntity<Template> updateTemplate(@Valid @RequestBody Template template) throws URISyntaxException {
+        log.debug("REST request to update Template : {}", template);
+        if (template.getId() == null) {
+            return createTemplate(template);
+        }
+        Template result = templateRepository.save(template);
+        return ResponseEntity.ok()
+            .headers(HeaderUtil.createEntityUpdateAlert(ENTITY_NAME, template.getId().toString()))
+            .body(result);
+    }
+
+    /**
+     * GET  /templates : get all the templates.
+     *
+     * @return the ResponseEntity with status 200 (OK) and the list of templates in body
+     */
+    @GetMapping("/templates")
+    @Timed
+    public List<Template> getAllTemplates() {
+        log.debug("REST request to get all Templates");
+        return templateRepository.findAll();
+        }
+
+    /**
+     * GET  /templates/:id : get the "id" template.
+     *
+     * @param id the id of the template to retrieve
+     * @return the ResponseEntity with status 200 (OK) and with body the template, or with status 404 (Not Found)
+     */
+    @GetMapping("/templates/{id}")
+    @Timed
+    public ResponseEntity<Template> getTemplate(@PathVariable Long id) {
+        log.debug("REST request to get Template : {}", id);
+        Template template = templateRepository.findOne(id);
+        return ResponseUtil.wrapOrNotFound(Optional.ofNullable(template));
+    }
+
+    /**
+     * DELETE  /templates/:id : delete the "id" template.
+     *
+     * @param id the id of the template to delete
+     * @return the ResponseEntity with status 200 (OK)
+     */
+    @DeleteMapping("/templates/{id}")
+    @Timed
+    public ResponseEntity<Void> deleteTemplate(@PathVariable Long id) {
+        log.debug("REST request to delete Template : {}", id);
+        templateRepository.delete(id);
+        return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(ENTITY_NAME, id.toString())).build();
+    }
+}
diff --git a/src/main/resources/config/liquibase/changelog/20180511123631_added_entity_Template.xml b/src/main/resources/config/liquibase/changelog/20180511123631_added_entity_Template.xml
new file mode 100644
index 0000000..670e13b
--- /dev/null
+++ b/src/main/resources/config/liquibase/changelog/20180511123631_added_entity_Template.xml
@@ -0,0 +1,52 @@
+<?xml version="1.0" encoding="utf-8"?>
+<databaseChangeLog
+    xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
+    xmlns:ext="http://www.liquibase.org/xml/ns/dbchangelog-ext"
+    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+    xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.5.xsd
+                        http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd">
+
+    <property name="now" value="now()" dbms="h2"/>
+
+    <property name="now" value="now()" dbms="mysql"/>
+    <property name="autoIncrement" value="true"/>
+
+    <property name="floatType" value="float4" dbms="postgresql, h2"/>
+    <property name="floatType" value="float" dbms="mysql, oracle, mssql"/>
+
+    <!--
+        Added the entity Template.
+    -->
+    <changeSet id="20180511123631-1" author="jhipster">
+        <createTable tableName="template">
+            <column name="id" type="bigint" autoIncrement="${autoIncrement}">
+                <constraints primaryKey="true" nullable="false"/>
+            </column>
+            <column name="montant" type="decimal(10,2)">
+                <constraints nullable="false" />
+            </column>
+
+            <column name="jhi_label" type="varchar(255)">
+                <constraints nullable="false" />
+            </column>
+
+            <column name="justification" type="varchar(255)">
+                <constraints nullable="false" />
+            </column>
+
+            <column name="jhi_comment" type="varchar(255)">
+                <constraints nullable="true" />
+            </column>
+
+            <column name="provider" type="varchar(255)">
+                <constraints nullable="false" />
+            </column>
+            <column name="employee_id" type="bigint">
+                <constraints unique="true" nullable="true" />
+            </column>
+            <!-- jhipster-needle-liquibase-add-column - JHipster will add columns here, do not remove-->
+        </createTable>
+        
+    </changeSet>
+    <!-- jhipster-needle-liquibase-add-changeset - JHipster will add changesets here, do not remove-->
+</databaseChangeLog>
diff --git a/src/main/resources/config/liquibase/changelog/20180511123631_added_entity_constraints_Template.xml b/src/main/resources/config/liquibase/changelog/20180511123631_added_entity_constraints_Template.xml
new file mode 100644
index 0000000..fb81e27
--- /dev/null
+++ b/src/main/resources/config/liquibase/changelog/20180511123631_added_entity_constraints_Template.xml
@@ -0,0 +1,18 @@
+<?xml version="1.0" encoding="utf-8"?>
+<databaseChangeLog
+    xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
+    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+    xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.5.xsd">
+    <!--
+        Added the constraints for entity Template.
+    -->
+    <changeSet id="20180511123631-2" author="jhipster">
+        
+        <addForeignKeyConstraint baseColumnNames="employee_id"
+                                 baseTableName="template"
+                                 constraintName="fk_template_employee_id"
+                                 referencedColumnNames="id"
+                                 referencedTableName="employee"/>
+
+    </changeSet>
+</databaseChangeLog>
diff --git a/src/main/resources/config/liquibase/changelog/20180511123632_added_entity_Category.xml b/src/main/resources/config/liquibase/changelog/20180511123632_added_entity_Category.xml
new file mode 100644
index 0000000..edd2d81
--- /dev/null
+++ b/src/main/resources/config/liquibase/changelog/20180511123632_added_entity_Category.xml
@@ -0,0 +1,42 @@
+<?xml version="1.0" encoding="utf-8"?>
+<databaseChangeLog
+    xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
+    xmlns:ext="http://www.liquibase.org/xml/ns/dbchangelog-ext"
+    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+    xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.5.xsd
+                        http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd">
+
+    <property name="now" value="now()" dbms="h2"/>
+
+    <property name="now" value="now()" dbms="mysql"/>
+    <property name="autoIncrement" value="true"/>
+
+    <property name="floatType" value="float4" dbms="postgresql, h2"/>
+    <property name="floatType" value="float" dbms="mysql, oracle, mssql"/>
+
+    <!--
+        Added the entity Category.
+    -->
+    <changeSet id="20180511123632-1" author="jhipster">
+        <createTable tableName="category">
+            <column name="id" type="bigint" autoIncrement="${autoIncrement}">
+                <constraints primaryKey="true" nullable="false"/>
+            </column>
+            <column name="jhi_label" type="varchar(255)">
+                <constraints nullable="false" />
+            </column>
+
+            <column name="template_id" type="bigint">
+                <constraints nullable="true" />
+            </column>
+
+            <column name="expense_note_id" type="bigint">
+                <constraints nullable="true" />
+            </column>
+
+            <!-- jhipster-needle-liquibase-add-column - JHipster will add columns here, do not remove-->
+        </createTable>
+        
+    </changeSet>
+    <!-- jhipster-needle-liquibase-add-changeset - JHipster will add changesets here, do not remove-->
+</databaseChangeLog>
diff --git a/src/main/resources/config/liquibase/changelog/20180511123632_added_entity_constraints_Category.xml b/src/main/resources/config/liquibase/changelog/20180511123632_added_entity_constraints_Category.xml
new file mode 100644
index 0000000..0f278ae
--- /dev/null
+++ b/src/main/resources/config/liquibase/changelog/20180511123632_added_entity_constraints_Category.xml
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="utf-8"?>
+<databaseChangeLog
+    xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
+    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+    xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.5.xsd">
+    <!--
+        Added the constraints for entity Category.
+    -->
+    <changeSet id="20180511123632-2" author="jhipster">
+        
+        <addForeignKeyConstraint baseColumnNames="template_id"
+                                 baseTableName="category"
+                                 constraintName="fk_category_template_id"
+                                 referencedColumnNames="id"
+                                 referencedTableName="template"/>
+
+        <addForeignKeyConstraint baseColumnNames="expense_note_id"
+                                 baseTableName="category"
+                                 constraintName="fk_category_expense_note_id"
+                                 referencedColumnNames="id"
+                                 referencedTableName="expense_note"/>
+
+    </changeSet>
+</databaseChangeLog>
diff --git a/src/main/resources/config/liquibase/changelog/20180511123633_added_entity_Employee.xml b/src/main/resources/config/liquibase/changelog/20180511123633_added_entity_Employee.xml
new file mode 100644
index 0000000..b7e798d
--- /dev/null
+++ b/src/main/resources/config/liquibase/changelog/20180511123633_added_entity_Employee.xml
@@ -0,0 +1,34 @@
+<?xml version="1.0" encoding="utf-8"?>
+<databaseChangeLog
+    xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
+    xmlns:ext="http://www.liquibase.org/xml/ns/dbchangelog-ext"
+    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+    xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.5.xsd
+                        http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd">
+
+    <property name="now" value="now()" dbms="h2"/>
+
+    <property name="now" value="now()" dbms="mysql"/>
+    <property name="autoIncrement" value="true"/>
+
+    <property name="floatType" value="float4" dbms="postgresql, h2"/>
+    <property name="floatType" value="float" dbms="mysql, oracle, mssql"/>
+
+    <!--
+        Added the entity Employee.
+    -->
+    <changeSet id="20180511123633-1" author="jhipster">
+        <createTable tableName="employee">
+            <column name="id" type="bigint" autoIncrement="${autoIncrement}">
+                <constraints primaryKey="true" nullable="false"/>
+            </column>
+            <column name="trigram" type="varchar(255)">
+                <constraints nullable="false" />
+            </column>
+
+            <!-- jhipster-needle-liquibase-add-column - JHipster will add columns here, do not remove-->
+        </createTable>
+        
+    </changeSet>
+    <!-- jhipster-needle-liquibase-add-changeset - JHipster will add changesets here, do not remove-->
+</databaseChangeLog>
diff --git a/src/main/resources/config/liquibase/changelog/20180511123634_added_entity_ExpenseNote.xml b/src/main/resources/config/liquibase/changelog/20180511123634_added_entity_ExpenseNote.xml
new file mode 100644
index 0000000..2a49ed9
--- /dev/null
+++ b/src/main/resources/config/liquibase/changelog/20180511123634_added_entity_ExpenseNote.xml
@@ -0,0 +1,64 @@
+<?xml version="1.0" encoding="utf-8"?>
+<databaseChangeLog
+    xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
+    xmlns:ext="http://www.liquibase.org/xml/ns/dbchangelog-ext"
+    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+    xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.5.xsd
+                        http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd">
+
+    <property name="now" value="now()" dbms="h2"/>
+
+    <property name="now" value="now()" dbms="mysql"/>
+    <property name="autoIncrement" value="true"/>
+
+    <property name="floatType" value="float4" dbms="postgresql, h2"/>
+    <property name="floatType" value="float" dbms="mysql, oracle, mssql"/>
+
+    <!--
+        Added the entity ExpenseNote.
+    -->
+    <changeSet id="20180511123634-1" author="jhipster">
+        <createTable tableName="expense_note">
+            <column name="id" type="bigint" autoIncrement="${autoIncrement}">
+                <constraints primaryKey="true" nullable="false"/>
+            </column>
+            <column name="montant" type="decimal(10,2)">
+                <constraints nullable="false" />
+            </column>
+
+            <column name="jhi_label" type="varchar(255)">
+                <constraints nullable="false" />
+            </column>
+
+            <column name="justification" type="varchar(255)">
+                <constraints nullable="false" />
+            </column>
+
+            <column name="jhi_comment" type="varchar(255)">
+                <constraints nullable="true" />
+            </column>
+
+            <column name="provider" type="varchar(255)">
+                <constraints nullable="false" />
+            </column>
+
+            <column name="submit_date" type="date">
+                <constraints nullable="false" />
+            </column>
+
+            <column name="payment_date" type="date">
+                <constraints nullable="true" />
+            </column>
+
+            <column name="status" type="varchar(255)">
+                <constraints nullable="true" />
+            </column>
+            <column name="employee_id" type="bigint">
+                <constraints unique="true" nullable="true" />
+            </column>
+            <!-- jhipster-needle-liquibase-add-column - JHipster will add columns here, do not remove-->
+        </createTable>
+        
+    </changeSet>
+    <!-- jhipster-needle-liquibase-add-changeset - JHipster will add changesets here, do not remove-->
+</databaseChangeLog>
diff --git a/src/main/resources/config/liquibase/changelog/20180511123634_added_entity_constraints_ExpenseNote.xml b/src/main/resources/config/liquibase/changelog/20180511123634_added_entity_constraints_ExpenseNote.xml
new file mode 100644
index 0000000..55315c0
--- /dev/null
+++ b/src/main/resources/config/liquibase/changelog/20180511123634_added_entity_constraints_ExpenseNote.xml
@@ -0,0 +1,18 @@
+<?xml version="1.0" encoding="utf-8"?>
+<databaseChangeLog
+    xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
+    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+    xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.5.xsd">
+    <!--
+        Added the constraints for entity ExpenseNote.
+    -->
+    <changeSet id="20180511123634-2" author="jhipster">
+        
+        <addForeignKeyConstraint baseColumnNames="employee_id"
+                                 baseTableName="expense_note"
+                                 constraintName="fk_expense_note_employee_id"
+                                 referencedColumnNames="id"
+                                 referencedTableName="employee"/>
+
+    </changeSet>
+</databaseChangeLog>
diff --git a/src/main/resources/config/liquibase/master.xml b/src/main/resources/config/liquibase/master.xml
index f2b0b1f..f4c5d3f 100644
--- a/src/main/resources/config/liquibase/master.xml
+++ b/src/main/resources/config/liquibase/master.xml
@@ -5,6 +5,13 @@
     xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.5.xsd">
 
     <include file="config/liquibase/changelog/00000000000000_initial_schema.xml" relativeToChangelogFile="false"/>
+    <include file="config/liquibase/changelog/20180511123631_added_entity_Template.xml" relativeToChangelogFile="false"/>
+    <include file="config/liquibase/changelog/20180511123632_added_entity_Category.xml" relativeToChangelogFile="false"/>
+    <include file="config/liquibase/changelog/20180511123633_added_entity_Employee.xml" relativeToChangelogFile="false"/>
+    <include file="config/liquibase/changelog/20180511123634_added_entity_ExpenseNote.xml" relativeToChangelogFile="false"/>
     <!-- jhipster-needle-liquibase-add-changelog - JHipster will add liquibase changelogs here -->
+    <include file="config/liquibase/changelog/20180511123631_added_entity_constraints_Template.xml" relativeToChangelogFile="false"/>
+    <include file="config/liquibase/changelog/20180511123632_added_entity_constraints_Category.xml" relativeToChangelogFile="false"/>
+    <include file="config/liquibase/changelog/20180511123634_added_entity_constraints_ExpenseNote.xml" relativeToChangelogFile="false"/>
     <!-- jhipster-needle-liquibase-add-constraints-changelog - JHipster will add liquibase constraints changelogs here -->
 </databaseChangeLog>
diff --git a/src/main/webapp/app/entities/category/category-delete-dialog.component.html b/src/main/webapp/app/entities/category/category-delete-dialog.component.html
new file mode 100644
index 0000000..2eeadf7
--- /dev/null
+++ b/src/main/webapp/app/entities/category/category-delete-dialog.component.html
@@ -0,0 +1,19 @@
+<form name="deleteForm" (ngSubmit)="confirmDelete(category.id)">
+    <div class="modal-header">
+        <h4 class="modal-title">Confirm delete operation</h4>
+        <button type="button" class="close" data-dismiss="modal" aria-hidden="true"
+                (click)="clear()">&times;</button>
+    </div>
+    <div class="modal-body">
+        <jhi-alert-error></jhi-alert-error>
+        <p>Are you sure you want to delete this Category?</p>
+    </div>
+    <div class="modal-footer">
+        <button type="button" class="btn btn-secondary" data-dismiss="modal" (click)="clear()">
+            <span class="fa fa-ban"></span>&nbsp;<span>Cancel</span>
+        </button>
+        <button type="submit" class="btn btn-danger">
+            <span class="fa fa-remove"></span>&nbsp;<span>Delete</span>
+        </button>
+    </div>
+</form>
diff --git a/src/main/webapp/app/entities/category/category-delete-dialog.component.ts b/src/main/webapp/app/entities/category/category-delete-dialog.component.ts
new file mode 100644
index 0000000..7df5860
--- /dev/null
+++ b/src/main/webapp/app/entities/category/category-delete-dialog.component.ts
@@ -0,0 +1,64 @@
+import { Component, OnInit, OnDestroy } from '@angular/core';
+import { ActivatedRoute } from '@angular/router';
+
+import { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';
+import { JhiEventManager } from 'ng-jhipster';
+
+import { Category } from './category.model';
+import { CategoryPopupService } from './category-popup.service';
+import { CategoryService } from './category.service';
+
+@Component({
+    selector: 'jhi-category-delete-dialog',
+    templateUrl: './category-delete-dialog.component.html'
+})
+export class CategoryDeleteDialogComponent {
+
+    category: Category;
+
+    constructor(
+        private categoryService: CategoryService,
+        public activeModal: NgbActiveModal,
+        private eventManager: JhiEventManager
+    ) {
+    }
+
+    clear() {
+        this.activeModal.dismiss('cancel');
+    }
+
+    confirmDelete(id: number) {
+        this.categoryService.delete(id).subscribe((response) => {
+            this.eventManager.broadcast({
+                name: 'categoryListModification',
+                content: 'Deleted an category'
+            });
+            this.activeModal.dismiss(true);
+        });
+    }
+}
+
+@Component({
+    selector: 'jhi-category-delete-popup',
+    template: ''
+})
+export class CategoryDeletePopupComponent implements OnInit, OnDestroy {
+
+    routeSub: any;
+
+    constructor(
+        private route: ActivatedRoute,
+        private categoryPopupService: CategoryPopupService
+    ) {}
+
+    ngOnInit() {
+        this.routeSub = this.route.params.subscribe((params) => {
+            this.categoryPopupService
+                .open(CategoryDeleteDialogComponent as Component, params['id']);
+        });
+    }
+
+    ngOnDestroy() {
+        this.routeSub.unsubscribe();
+    }
+}
diff --git a/src/main/webapp/app/entities/category/category-detail.component.html b/src/main/webapp/app/entities/category/category-detail.component.html
new file mode 100644
index 0000000..b70d3cc
--- /dev/null
+++ b/src/main/webapp/app/entities/category/category-detail.component.html
@@ -0,0 +1,38 @@
+
+<div *ngIf="category">
+    <h2><span>Category</span> {{category.id}}</h2>
+    <hr>
+    <jhi-alert-error></jhi-alert-error>
+    <dl class="row-md jh-entity-details">
+        <dt><span>Label</span></dt>
+        <dd>
+            <span>{{category.label}}</span>
+        </dd>
+        <dt><span>Template</span></dt>
+        <dd>
+            <div *ngIf="category.template">
+                <a [routerLink]="['/template', category.template?.id]">{{category.template?.id}}</a>
+            </div>
+        </dd>
+        <dt><span>Expense Note</span></dt>
+        <dd>
+            <div *ngIf="category.expenseNote">
+                <a [routerLink]="['/expense-note', category.expenseNote?.id]">{{category.expenseNote?.id}}</a>
+            </div>
+        </dd>
+    </dl>
+
+    <button type="submit"
+            (click)="previousState()"
+            class="btn btn-info">
+        <span class="fa fa-arrow-left"></span>&nbsp;<span> Back</span>
+    </button>
+
+    <button type="button"
+            [routerLink]="['/', { outlets: { popup: 'category/'+ category.id + '/edit'} }]"
+            replaceUrl="true"
+            queryParamsHandling="merge"
+            class="btn btn-primary">
+        <span class="fa fa-pencil"></span>&nbsp;<span> Edit</span>
+    </button>
+</div>
diff --git a/src/main/webapp/app/entities/category/category-detail.component.ts b/src/main/webapp/app/entities/category/category-detail.component.ts
new file mode 100644
index 0000000..0af9991
--- /dev/null
+++ b/src/main/webapp/app/entities/category/category-detail.component.ts
@@ -0,0 +1,55 @@
+import { Component, OnInit, OnDestroy } from '@angular/core';
+import { ActivatedRoute } from '@angular/router';
+import { HttpResponse } from '@angular/common/http';
+import { Subscription } from 'rxjs/Subscription';
+import { JhiEventManager } from 'ng-jhipster';
+
+import { Category } from './category.model';
+import { CategoryService } from './category.service';
+
+@Component({
+    selector: 'jhi-category-detail',
+    templateUrl: './category-detail.component.html'
+})
+export class CategoryDetailComponent implements OnInit, OnDestroy {
+
+    category: Category;
+    private subscription: Subscription;
+    private eventSubscriber: Subscription;
+
+    constructor(
+        private eventManager: JhiEventManager,
+        private categoryService: CategoryService,
+        private route: ActivatedRoute
+    ) {
+    }
+
+    ngOnInit() {
+        this.subscription = this.route.params.subscribe((params) => {
+            this.load(params['id']);
+        });
+        this.registerChangeInCategories();
+    }
+
+    load(id) {
+        this.categoryService.find(id)
+            .subscribe((categoryResponse: HttpResponse<Category>) => {
+                this.category = categoryResponse.body;
+            });
+    }
+    previousState() {
+        window.history.back();
+    }
+
+    ngOnDestroy() {
+        this.subscription.unsubscribe();
+        this.eventManager.destroy(this.eventSubscriber);
+    }
+
+    registerChangeInCategories() {
+        this.eventSubscriber = this.eventManager.subscribe(
+            'categoryListModification',
+            (response) => this.load(this.category.id)
+        );
+    }
+}
diff --git a/src/main/webapp/app/entities/category/category-dialog.component.html b/src/main/webapp/app/entities/category/category-dialog.component.html
new file mode 100644
index 0000000..3fcabc9
--- /dev/null
+++ b/src/main/webapp/app/entities/category/category-dialog.component.html
@@ -0,0 +1,50 @@
+<form name="editForm" role="form" novalidate (ngSubmit)="save()" #editForm="ngForm">
+
+    <div class="modal-header">
+        <h4 class="modal-title" id="myCategoryLabel">Create or edit a Category</h4>
+        <button type="button" class="close" data-dismiss="modal" aria-hidden="true"
+                (click)="clear()">&times;</button>
+    </div>
+    <div class="modal-body">
+        <jhi-alert-error></jhi-alert-error>
+        <div class="form-group" [hidden]="!category.id">
+            <label for="id">ID</label>
+            <input type="text" class="form-control" id="id" name="id"
+                   [(ngModel)]="category.id" readonly />
+        </div>
+        <div class="form-group">
+            <label class="form-control-label" for="field_label">Label</label>
+            <input type="text" class="form-control" name="label" id="field_label"
+                [(ngModel)]="category.label" required/>
+            <div [hidden]="!(editForm.controls.label?.dirty && editForm.controls.label?.invalid)">
+                <small class="form-text text-danger"
+                   [hidden]="!editForm.controls.label?.errors?.required">
+                   This field is required.
+                </small>
+            </div>
+        </div>
+
+        <div class="form-group">
+            <label class="form-control-label" for="field_template">Template</label>
+            <select class="form-control" id="field_template" name="template" [(ngModel)]="category.template" >
+                <option [ngValue]="null"></option>
+                <option [ngValue]="templateOption.id === category.template?.id ? category.template : templateOption" *ngFor="let templateOption of templates; trackBy: trackTemplateById">{{templateOption.id}}</option>
+            </select>
+        </div>
+        <div class="form-group">
+            <label class="form-control-label" for="field_expenseNote">Expense Note</label>
+            <select class="form-control" id="field_expenseNote" name="expenseNote" [(ngModel)]="category.expenseNote" >
+                <option [ngValue]="null"></option>
+                <option [ngValue]="expenseNoteOption.id === category.expenseNote?.id ? category.expenseNote : expenseNoteOption" *ngFor="let expenseNoteOption of expensenotes; trackBy: trackExpenseNoteById">{{expenseNoteOption.id}}</option>
+            </select>
+        </div>
+    </div>
+    <div class="modal-footer">
+        <button type="button" class="btn btn-secondary" data-dismiss="modal" (click)="clear()">
+            <span class="fa fa-ban"></span>&nbsp;<span>Cancel</span>
+        </button>
+        <button type="submit" [disabled]="editForm.form.invalid || isSaving" class="btn btn-primary">
+            <span class="fa fa-save"></span>&nbsp;<span>Save</span>
+        </button>
+    </div>
+</form>
diff --git a/src/main/webapp/app/entities/category/category-dialog.component.ts b/src/main/webapp/app/entities/category/category-dialog.component.ts
new file mode 100644
index 0000000..dae9cad
--- /dev/null
+++ b/src/main/webapp/app/entities/category/category-dialog.component.ts
@@ -0,0 +1,117 @@
+import { Component, OnInit, OnDestroy } from '@angular/core';
+import { ActivatedRoute } from '@angular/router';
+import { HttpResponse, HttpErrorResponse } from '@angular/common/http';
+
+import { Observable } from 'rxjs/Observable';
+import { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';
+import { JhiEventManager, JhiAlertService } from 'ng-jhipster';
+
+import { Category } from './category.model';
+import { CategoryPopupService } from './category-popup.service';
+import { CategoryService } from './category.service';
+import { Template, TemplateService } from '../template';
+import { ExpenseNote, ExpenseNoteService } from '../expense-note';
+
+@Component({
+    selector: 'jhi-category-dialog',
+    templateUrl: './category-dialog.component.html'
+})
+export class CategoryDialogComponent implements OnInit {
+
+    category: Category;
+    isSaving: boolean;
+
+    templates: Template[];
+
+    expensenotes: ExpenseNote[];
+
+    constructor(
+        public activeModal: NgbActiveModal,
+        private jhiAlertService: JhiAlertService,
+        private categoryService: CategoryService,
+        private templateService: TemplateService,
+        private expenseNoteService: ExpenseNoteService,
+        private eventManager: JhiEventManager
+    ) {
+    }
+
+    ngOnInit() {
+        this.isSaving = false;
+        this.templateService.query()
+            .subscribe((res: HttpResponse<Template[]>) => { this.templates = res.body; }, (res: HttpErrorResponse) => this.onError(res.message));
+        this.expenseNoteService.query()
+            .subscribe((res: HttpResponse<ExpenseNote[]>) => { this.expensenotes = res.body; }, (res: HttpErrorResponse) => this.onError(res.message));
+    }
+
+    clear() {
+        this.activeModal.dismiss('cancel');
+    }
+
+    save() {
+        this.isSaving = true;
+        if (this.category.id !== undefined) {
+            this.subscribeToSaveResponse(
+                this.categoryService.update(this.category));
+        } else {
+            this.subscribeToSaveResponse(
+                this.categoryService.create(this.category));
+        }
+    }
+
+    private subscribeToSaveResponse(result: Observable<HttpResponse<Category>>) {
+        result.subscribe((res: HttpResponse<Category>) =>
+            this.onSaveSuccess(res.body), (res: HttpErrorResponse) => this.onSaveError());
+    }
+
+    private onSaveSuccess(result: Category) {
+        this.eventManager.broadcast({ name: 'categoryListModification', content: 'OK'});
+        this.isSaving = false;
+        this.activeModal.dismiss(result);
+    }
+
+    private onSaveError() {
+        this.isSaving = false;
+    }
+
+    private onError(error: any) {
+        this.jhiAlertService.error(error.message, null, null);
+    }
+
+    trackTemplateById(index: number, item: Template) {
+        return item.id;
+    }
+
+    trackExpenseNoteById(index: number, item: ExpenseNote) {
+        return item.id;
+    }
+}
+
+@Component({
+    selector: 'jhi-category-popup',
+    template: ''
+})
+export class CategoryPopupComponent implements OnInit, OnDestroy {
+
+    routeSub: any;
+
+    constructor(
+        private route: ActivatedRoute,
+        private categoryPopupService: CategoryPopupService
+    ) {}
+
+    ngOnInit() {
+        this.routeSub = this.route.params.subscribe((params) => {
+            if ( params['id'] ) {
+                this.categoryPopupService
+                    .open(CategoryDialogComponent as Component, params['id']);
+            } else {
+                this.categoryPopupService
+                    .open(CategoryDialogComponent as Component);
+            }
+        });
+    }
+
+    ngOnDestroy() {
+        this.routeSub.unsubscribe();
+    }
+}
diff --git a/src/main/webapp/app/entities/category/category-popup.service.ts b/src/main/webapp/app/entities/category/category-popup.service.ts
new file mode 100644
index 0000000..8990fbc
--- /dev/null
+++ b/src/main/webapp/app/entities/category/category-popup.service.ts
@@ -0,0 +1,57 @@
+import { Injectable, Component } from '@angular/core';
+import { Router } from '@angular/router';
+import { NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';
+import { HttpResponse } from '@angular/common/http';
+import { Category } from './category.model';
+import { CategoryService } from './category.service';
+
+@Injectable()
+export class CategoryPopupService {
+    private ngbModalRef: NgbModalRef;
+
+    constructor(
+        private modalService: NgbModal,
+        private router: Router,
+        private categoryService: CategoryService
+
+    ) {
+        this.ngbModalRef = null;
+    }
+
+    open(component: Component, id?: number | any): Promise<NgbModalRef> {
+        return new Promise<NgbModalRef>((resolve, reject) => {
+            const isOpen = this.ngbModalRef !== null;
+            if (isOpen) {
+                resolve(this.ngbModalRef);
+            }
+
+            if (id) {
+                this.categoryService.find(id)
+                    .subscribe((categoryResponse: HttpResponse<Category>) => {
+                        const category: Category = categoryResponse.body;
+                        this.ngbModalRef = this.categoryModalRef(component, category);
+                        resolve(this.ngbModalRef);
+                    });
+            } else {
+                // setTimeout used as a workaround for getting ExpressionChangedAfterItHasBeenCheckedError
+                setTimeout(() => {
+                    this.ngbModalRef = this.categoryModalRef(component, new Category());
+                    resolve(this.ngbModalRef);
+                }, 0);
+            }
+        });
+    }
+
+    categoryModalRef(component: Component, category: Category): NgbModalRef {
+        const modalRef = this.modalService.open(component, { size: 'lg', backdrop: 'static'});
+        modalRef.componentInstance.category = category;
+        modalRef.result.then((result) => {
+            this.router.navigate([{ outlets: { popup: null }}], { replaceUrl: true, queryParamsHandling: 'merge' });
+            this.ngbModalRef = null;
+        }, (reason) => {
+            this.router.navigate([{ outlets: { popup: null }}], { replaceUrl: true, queryParamsHandling: 'merge' });
+            this.ngbModalRef = null;
+        });
+        return modalRef;
+    }
+}
diff --git a/src/main/webapp/app/entities/category/category.component.html b/src/main/webapp/app/entities/category/category.component.html
new file mode 100644
index 0000000..3abf192
--- /dev/null
+++ b/src/main/webapp/app/entities/category/category.component.html
@@ -0,0 +1,70 @@
+<div>
+    <h2>
+        <span>Categories</span>
+        <button class="btn btn-primary float-right jh-create-entity create-category" [routerLink]="['/', { outlets: { popup: ['category-new'] } }]">
+            <span class="fa fa-plus"></span>
+            <span >
+            Create new Category
+            </span>
+        </button>
+    </h2>
+    <jhi-alert></jhi-alert>
+    <div class="row">
+    </div>
+    <br/>
+    <div class="table-responsive" *ngIf="categories">
+        <table class="table table-striped">
+            <thead>
+            <tr>
+            <th><span>ID</span></th>
+            <th><span>Label</span></th>
+            <th><span>Template</span></th>
+            <th><span>Expense Note</span></th>
+            <th></th>
+            </tr>
+            </thead>
+            <tbody>
+            <tr *ngFor="let category of categories ;trackBy: trackId">
+                <td><a [routerLink]="['../category', category.id ]">{{category.id}}</a></td>
+                <td>{{category.label}}</td>
+                <td>
+                    <div *ngIf="category.template">
+                        <a [routerLink]="['../template', category.template?.id ]" >{{category.template?.id}}</a>
+                    </div>
+                </td>
+                <td>
+                    <div *ngIf="category.expenseNote">
+                        <a [routerLink]="['../expense-note', category.expenseNote?.id ]" >{{category.expenseNote?.id}}</a>
+                    </div>
+                </td>
+                <td class="text-right">
+                    <div class="btn-group flex-btn-group-container">
+                        <button type="submit"
+                                [routerLink]="['../category', category.id ]"
+                                class="btn btn-info btn-sm">
+                            <span class="fa fa-eye"></span>
+                            <span class="d-none d-md-inline">View</span>
+                        </button>
+                        <button type="submit"
+                                [routerLink]="['/', { outlets: { popup: 'category/'+ category.id + '/edit'} }]"
+                                replaceUrl="true"
+                                queryParamsHandling="merge"
+                                class="btn btn-primary btn-sm">
+                            <span class="fa fa-pencil"></span>
+                            <span class="d-none d-md-inline">Edit</span>
+                        </button>
+                        <button type="submit"
+                                [routerLink]="['/', { outlets: { popup: 'category/'+ category.id + '/delete'} }]"
+                                replaceUrl="true"
+                                queryParamsHandling="merge"
+                                class="btn btn-danger btn-sm">
+                            <span class="fa fa-remove"></span>
+                            <span class="d-none d-md-inline">Delete</span>
+                        </button>
+                    </div>
+                </td>
+            </tr>
+            </tbody>
+        </table>
+    </div>
+</div>
diff --git a/src/main/webapp/app/entities/category/category.component.ts b/src/main/webapp/app/entities/category/category.component.ts
new file mode 100644
index 0000000..b806270
--- /dev/null
+++ b/src/main/webapp/app/entities/category/category.component.ts
@@ -0,0 +1,57 @@
+import { Component, OnInit, OnDestroy } from '@angular/core';
+import { HttpResponse, HttpErrorResponse } from '@angular/common/http';
+import { Subscription } from 'rxjs/Subscription';
+import { JhiEventManager, JhiAlertService } from 'ng-jhipster';
+
+import { Category } from './category.model';
+import { CategoryService } from './category.service';
+import { Principal } from '../../shared';
+
+@Component({
+    selector: 'jhi-category',
+    templateUrl: './category.component.html'
+})
+export class CategoryComponent implements OnInit, OnDestroy {
+categories: Category[];
+    currentAccount: any;
+    eventSubscriber: Subscription;
+
+    constructor(
+        private categoryService: CategoryService,
+        private jhiAlertService: JhiAlertService,
+        private eventManager: JhiEventManager,
+        private principal: Principal
+    ) {
+    }
+
+    loadAll() {
+        this.categoryService.query().subscribe(
+            (res: HttpResponse<Category[]>) => {
+                this.categories = res.body;
+            },
+            (res: HttpErrorResponse) => this.onError(res.message)
+        );
+    }
+    ngOnInit() {
+        this.loadAll();
+        this.principal.identity().then((account) => {
+            this.currentAccount = account;
+        });
+        this.registerChangeInCategories();
+    }
+
+    ngOnDestroy() {
+        this.eventManager.destroy(this.eventSubscriber);
+    }
+
+    trackId(index: number, item: Category) {
+        return item.id;
+    }
+    registerChangeInCategories() {
+        this.eventSubscriber = this.eventManager.subscribe('categoryListModification', (response) => this.loadAll());
+    }
+
+    private onError(error) {
+        this.jhiAlertService.error(error.message, null, null);
+    }
+}
diff --git a/src/main/webapp/app/entities/category/category.model.ts b/src/main/webapp/app/entities/category/category.model.ts
new file mode 100644
index 0000000..4a3e26a
--- /dev/null
+++ b/src/main/webapp/app/entities/category/category.model.ts
@@ -0,0 +1,11 @@
+import { BaseEntity } from './../../shared';
+
+export class Category implements BaseEntity {
+    constructor(
+        public id?: number,
+        public label?: string,
+        public template?: BaseEntity,
+        public expenseNote?: BaseEntity,
+    ) {
+    }
+}
diff --git a/src/main/webapp/app/entities/category/category.module.ts b/src/main/webapp/app/entities/category/category.module.ts
new file mode 100644
index 0000000..161a090
--- /dev/null
+++ b/src/main/webapp/app/entities/category/category.module.ts
@@ -0,0 +1,49 @@
+import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';
+import { RouterModule } from '@angular/router';
+
+import { OniryxHackathonSharedModule } from '../../shared';
+import {
+    CategoryService,
+    CategoryPopupService,
+    CategoryComponent,
+    CategoryDetailComponent,
+    CategoryDialogComponent,
+    CategoryPopupComponent,
+    CategoryDeletePopupComponent,
+    CategoryDeleteDialogComponent,
+    categoryRoute,
+    categoryPopupRoute,
+} from './';
+
+const ENTITY_STATES = [
+    ...categoryRoute,
+    ...categoryPopupRoute,
+];
+
+@NgModule({
+    imports: [
+        OniryxHackathonSharedModule,
+        RouterModule.forChild(ENTITY_STATES)
+    ],
+    declarations: [
+        CategoryComponent,
+        CategoryDetailComponent,
+        CategoryDialogComponent,
+        CategoryDeleteDialogComponent,
+        CategoryPopupComponent,
+        CategoryDeletePopupComponent,
+    ],
+    entryComponents: [
+        CategoryComponent,
+        CategoryDialogComponent,
+        CategoryPopupComponent,
+        CategoryDeleteDialogComponent,
+        CategoryDeletePopupComponent,
+    ],
+    providers: [
+        CategoryService,
+        CategoryPopupService,
+    ],
+    schemas: [CUSTOM_ELEMENTS_SCHEMA]
+})
+export class OniryxHackathonCategoryModule {}
diff --git a/src/main/webapp/app/entities/category/category.route.ts b/src/main/webapp/app/entities/category/category.route.ts
new file mode 100644
index 0000000..7d62e6a
--- /dev/null
+++ b/src/main/webapp/app/entities/category/category.route.ts
@@ -0,0 +1,60 @@
+import { Routes } from '@angular/router';
+
+import { UserRouteAccessService } from '../../shared';
+import { CategoryComponent } from './category.component';
+import { CategoryDetailComponent } from './category-detail.component';
+import { CategoryPopupComponent } from './category-dialog.component';
+import { CategoryDeletePopupComponent } from './category-delete-dialog.component';
+
+export const categoryRoute: Routes = [
+    {
+        path: 'category',
+        component: CategoryComponent,
+        data: {
+            authorities: ['ROLE_USER'],
+            pageTitle: 'Categories'
+        },
+        canActivate: [UserRouteAccessService]
+    }, {
+        path: 'category/:id',
+        component: CategoryDetailComponent,
+        data: {
+            authorities: ['ROLE_USER'],
+            pageTitle: 'Categories'
+        },
+        canActivate: [UserRouteAccessService]
+    }
+];
+
+export const categoryPopupRoute: Routes = [
+    {
+        path: 'category-new',
+        component: CategoryPopupComponent,
+        data: {
+            authorities: ['ROLE_USER'],
+            pageTitle: 'Categories'
+        },
+        canActivate: [UserRouteAccessService],
+        outlet: 'popup'
+    },
+    {
+        path: 'category/:id/edit',
+        component: CategoryPopupComponent,
+        data: {
+            authorities: ['ROLE_USER'],
+            pageTitle: 'Categories'
+        },
+        canActivate: [UserRouteAccessService],
+        outlet: 'popup'
+    },
+    {
+        path: 'category/:id/delete',
+        component: CategoryDeletePopupComponent,
+        data: {
+            authorities: ['ROLE_USER'],
+            pageTitle: 'Categories'
+        },
+        canActivate: [UserRouteAccessService],
+        outlet: 'popup'
+    }
+];
diff --git a/src/main/webapp/app/entities/category/category.service.ts b/src/main/webapp/app/entities/category/category.service.ts
new file mode 100644
index 0000000..876965b
--- /dev/null
+++ b/src/main/webapp/app/entities/category/category.service.ts
@@ -0,0 +1,74 @@
+import { Injectable } from '@angular/core';
+import { HttpClient, HttpResponse } from '@angular/common/http';
+import { Observable } from 'rxjs/Observable';
+import { SERVER_API_URL } from '../../app.constants';
+
+import { Category } from './category.model';
+import { createRequestOption } from '../../shared';
+
+export type EntityResponseType = HttpResponse<Category>;
+
+@Injectable()
+export class CategoryService {
+
+    private resourceUrl =  SERVER_API_URL + 'api/categories';
+
+    constructor(private http: HttpClient) { }
+
+    create(category: Category): Observable<EntityResponseType> {
+        const copy = this.convert(category);
+        return this.http.post<Category>(this.resourceUrl, copy, { observe: 'response' })
+            .map((res: EntityResponseType) => this.convertResponse(res));
+    }
+
+    update(category: Category): Observable<EntityResponseType> {
+        const copy = this.convert(category);
+        return this.http.put<Category>(this.resourceUrl, copy, { observe: 'response' })
+            .map((res: EntityResponseType) => this.convertResponse(res));
+    }
+
+    find(id: number): Observable<EntityResponseType> {
+        return this.http.get<Category>(`${this.resourceUrl}/${id}`, { observe: 'response'})
+            .map((res: EntityResponseType) => this.convertResponse(res));
+    }
+
+    query(req?: any): Observable<HttpResponse<Category[]>> {
+        const options = createRequestOption(req);
+        return this.http.get<Category[]>(this.resourceUrl, { params: options, observe: 'response' })
+            .map((res: HttpResponse<Category[]>) => this.convertArrayResponse(res));
+    }
+
+    delete(id: number): Observable<HttpResponse<any>> {
+        return this.http.delete<any>(`${this.resourceUrl}/${id}`, { observe: 'response'});
+    }
+
+    private convertResponse(res: EntityResponseType): EntityResponseType {
+        const body: Category = this.convertItemFromServer(res.body);
+        return res.clone({body});
+    }
+
+    private convertArrayResponse(res: HttpResponse<Category[]>): HttpResponse<Category[]> {
+        const jsonResponse: Category[] = res.body;
+        const body: Category[] = [];
+        for (let i = 0; i < jsonResponse.length; i++) {
+            body.push(this.convertItemFromServer(jsonResponse[i]));
+        }
+        return res.clone({body});
+    }
+
+    /**
+     * Convert a returned JSON object to Category.
+     */
+    private convertItemFromServer(category: Category): Category {
+        const copy: Category = Object.assign({}, category);
+        return copy;
+    }
+
+    /**
+     * Convert a Category to a JSON which can be sent to the server.
+     */
+    private convert(category: Category): Category {
+        const copy: Category = Object.assign({}, category);
+        return copy;
+    }
+}
diff --git a/src/main/webapp/app/entities/category/index.ts b/src/main/webapp/app/entities/category/index.ts
new file mode 100644
index 0000000..2e4bbc2
--- /dev/null
+++ b/src/main/webapp/app/entities/category/index.ts
@@ -0,0 +1,8 @@
+export * from './category.model';
+export * from './category-popup.service';
+export * from './category.service';
+export * from './category-dialog.component';
+export * from './category-delete-dialog.component';
+export * from './category-detail.component';
+export * from './category.component';
+export * from './category.route';
diff --git a/src/main/webapp/app/entities/employee/employee-delete-dialog.component.html b/src/main/webapp/app/entities/employee/employee-delete-dialog.component.html
new file mode 100644
index 0000000..4c1d36c
--- /dev/null
+++ b/src/main/webapp/app/entities/employee/employee-delete-dialog.component.html
@@ -0,0 +1,19 @@
+<form name="deleteForm" (ngSubmit)="confirmDelete(employee.id)">
+    <div class="modal-header">
+        <h4 class="modal-title">Confirm delete operation</h4>
+        <button type="button" class="close" data-dismiss="modal" aria-hidden="true"
+                (click)="clear()">&times;</button>
+    </div>
+    <div class="modal-body">
+        <jhi-alert-error></jhi-alert-error>
+        <p>Are you sure you want to delete this Employee?</p>
+    </div>
+    <div class="modal-footer">
+        <button type="button" class="btn btn-secondary" data-dismiss="modal" (click)="clear()">
+            <span class="fa fa-ban"></span>&nbsp;<span>Cancel</span>
+        </button>
+        <button type="submit" class="btn btn-danger">
+            <span class="fa fa-remove"></span>&nbsp;<span>Delete</span>
+        </button>
+    </div>
+</form>
diff --git a/src/main/webapp/app/entities/employee/employee-delete-dialog.component.ts b/src/main/webapp/app/entities/employee/employee-delete-dialog.component.ts
new file mode 100644
index 0000000..4fa085f
--- /dev/null
+++ b/src/main/webapp/app/entities/employee/employee-delete-dialog.component.ts
@@ -0,0 +1,64 @@
+import { Component, OnInit, OnDestroy } from '@angular/core';
+import { ActivatedRoute } from '@angular/router';
+
+import { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';
+import { JhiEventManager } from 'ng-jhipster';
+
+import { Employee } from './employee.model';
+import { EmployeePopupService } from './employee-popup.service';
+import { EmployeeService } from './employee.service';
+
+@Component({
+    selector: 'jhi-employee-delete-dialog',
+    templateUrl: './employee-delete-dialog.component.html'
+})
+export class EmployeeDeleteDialogComponent {
+
+    employee: Employee;
+
+    constructor(
+        private employeeService: EmployeeService,
+        public activeModal: NgbActiveModal,
+        private eventManager: JhiEventManager
+    ) {
+    }
+
+    clear() {
+        this.activeModal.dismiss('cancel');
+    }
+
+    confirmDelete(id: number) {
+        this.employeeService.delete(id).subscribe((response) => {
+            this.eventManager.broadcast({
+                name: 'employeeListModification',
+                content: 'Deleted an employee'
+            });
+            this.activeModal.dismiss(true);
+        });
+    }
+}
+
+@Component({
+    selector: 'jhi-employee-delete-popup',
+    template: ''
+})
+export class EmployeeDeletePopupComponent implements OnInit, OnDestroy {
+
+    routeSub: any;
+
+    constructor(
+        private route: ActivatedRoute,
+        private employeePopupService: EmployeePopupService
+    ) {}
+
+    ngOnInit() {
+        this.routeSub = this.route.params.subscribe((params) => {
+            this.employeePopupService
+                .open(EmployeeDeleteDialogComponent as Component, params['id']);
+        });
+    }
+
+    ngOnDestroy() {
+        this.routeSub.unsubscribe();
+    }
+}
diff --git a/src/main/webapp/app/entities/employee/employee-detail.component.html b/src/main/webapp/app/entities/employee/employee-detail.component.html
new file mode 100644
index 0000000..96f0b82
--- /dev/null
+++ b/src/main/webapp/app/entities/employee/employee-detail.component.html
@@ -0,0 +1,26 @@
+
+<div *ngIf="employee">
+    <h2><span>Employee</span> {{employee.id}}</h2>
+    <hr>
+    <jhi-alert-error></jhi-alert-error>
+    <dl class="row-md jh-entity-details">
+        <dt><span>Trigram</span></dt>
+        <dd>
+            <span>{{employee.trigram}}</span>
+        </dd>
+    </dl>
+
+    <button type="submit"
+            (click)="previousState()"
+            class="btn btn-info">
+        <span class="fa fa-arrow-left"></span>&nbsp;<span> Back</span>
+    </button>
+
+    <button type="button"
+            [routerLink]="['/', { outlets: { popup: 'employee/'+ employee.id + '/edit'} }]"
+            replaceUrl="true"
+            queryParamsHandling="merge"
+            class="btn btn-primary">
+        <span class="fa fa-pencil"></span>&nbsp;<span> Edit</span>
+    </button>
+</div>
diff --git a/src/main/webapp/app/entities/employee/employee-detail.component.ts b/src/main/webapp/app/entities/employee/employee-detail.component.ts
new file mode 100644
index 0000000..d097158
--- /dev/null
+++ b/src/main/webapp/app/entities/employee/employee-detail.component.ts
@@ -0,0 +1,55 @@
+import { Component, OnInit, OnDestroy } from '@angular/core';
+import { ActivatedRoute } from '@angular/router';
+import { HttpResponse } from '@angular/common/http';
+import { Subscription } from 'rxjs/Subscription';
+import { JhiEventManager } from 'ng-jhipster';
+
+import { Employee } from './employee.model';
+import { EmployeeService } from './employee.service';
+
+@Component({
+    selector: 'jhi-employee-detail',
+    templateUrl: './employee-detail.component.html'
+})
+export class EmployeeDetailComponent implements OnInit, OnDestroy {
+
+    employee: Employee;
+    private subscription: Subscription;
+    private eventSubscriber: Subscription;
+
+    constructor(
+        private eventManager: JhiEventManager,
+        private employeeService: EmployeeService,
+        private route: ActivatedRoute
+    ) {
+    }
+
+    ngOnInit() {
+        this.subscription = this.route.params.subscribe((params) => {
+            this.load(params['id']);
+        });
+        this.registerChangeInEmployees();
+    }
+
+    load(id) {
+        this.employeeService.find(id)
+            .subscribe((employeeResponse: HttpResponse<Employee>) => {
+                this.employee = employeeResponse.body;
+            });
+    }
+    previousState() {
+        window.history.back();
+    }
+
+    ngOnDestroy() {
+        this.subscription.unsubscribe();
+        this.eventManager.destroy(this.eventSubscriber);
+    }
+
+    registerChangeInEmployees() {
+        this.eventSubscriber = this.eventManager.subscribe(
+            'employeeListModification',
+            (response) => this.load(this.employee.id)
+        );
+    }
+}
diff --git a/src/main/webapp/app/entities/employee/employee-dialog.component.html b/src/main/webapp/app/entities/employee/employee-dialog.component.html
new file mode 100644
index 0000000..6e1a378
--- /dev/null
+++ b/src/main/webapp/app/entities/employee/employee-dialog.component.html
@@ -0,0 +1,36 @@
+<form name="editForm" role="form" novalidate (ngSubmit)="save()" #editForm="ngForm">
+
+    <div class="modal-header">
+        <h4 class="modal-title" id="myEmployeeLabel">Create or edit a Employee</h4>
+        <button type="button" class="close" data-dismiss="modal" aria-hidden="true"
+                (click)="clear()">&times;</button>
+    </div>
+    <div class="modal-body">
+        <jhi-alert-error></jhi-alert-error>
+        <div class="form-group" [hidden]="!employee.id">
+            <label for="id">ID</label>
+            <input type="text" class="form-control" id="id" name="id"
+                   [(ngModel)]="employee.id" readonly />
+        </div>
+        <div class="form-group">
+            <label class="form-control-label" for="field_trigram">Trigram</label>
+            <input type="text" class="form-control" name="trigram" id="field_trigram"
+                [(ngModel)]="employee.trigram" required/>
+            <div [hidden]="!(editForm.controls.trigram?.dirty && editForm.controls.trigram?.invalid)">
+                <small class="form-text text-danger"
+                   [hidden]="!editForm.controls.trigram?.errors?.required">
+                   This field is required.
+                </small>
+            </div>
+        </div>
+
+    </div>
+    <div class="modal-footer">
+        <button type="button" class="btn btn-secondary" data-dismiss="modal" (click)="clear()">
+            <span class="fa fa-ban"></span>&nbsp;<span>Cancel</span>
+        </button>
+        <button type="submit" [disabled]="editForm.form.invalid || isSaving" class="btn btn-primary">
+            <span class="fa fa-save"></span>&nbsp;<span>Save</span>
+        </button>
+    </div>
+</form>
diff --git a/src/main/webapp/app/entities/employee/employee-dialog.component.ts b/src/main/webapp/app/entities/employee/employee-dialog.component.ts
new file mode 100644
index 0000000..4f5e7ea
--- /dev/null
+++ b/src/main/webapp/app/entities/employee/employee-dialog.component.ts
@@ -0,0 +1,117 @@
+import { Component, OnInit, OnDestroy } from '@angular/core';
+import { ActivatedRoute } from '@angular/router';
+import { HttpResponse, HttpErrorResponse } from '@angular/common/http';
+
+import { Observable } from 'rxjs/Observable';
+import { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';
+import { JhiEventManager, JhiAlertService } from 'ng-jhipster';
+
+import { Employee } from './employee.model';
+import { EmployeePopupService } from './employee-popup.service';
+import { EmployeeService } from './employee.service';
+import { Template, TemplateService } from '../template';
+import { ExpenseNote, ExpenseNoteService } from '../expense-note';
+
+@Component({
+    selector: 'jhi-employee-dialog',
+    templateUrl: './employee-dialog.component.html'
+})
+export class EmployeeDialogComponent implements OnInit {
+
+    employee: Employee;
+    isSaving: boolean;
+
+    templates: Template[];
+
+    expensenotes: ExpenseNote[];
+
+    constructor(
+        public activeModal: NgbActiveModal,
+        private jhiAlertService: JhiAlertService,
+        private employeeService: EmployeeService,
+        private templateService: TemplateService,
+        private expenseNoteService: ExpenseNoteService,
+        private eventManager: JhiEventManager
+    ) {
+    }
+
+    ngOnInit() {
+        this.isSaving = false;
+        this.templateService.query()
+            .subscribe((res: HttpResponse<Template[]>) => { this.templates = res.body; }, (res: HttpErrorResponse) => this.onError(res.message));
+        this.expenseNoteService.query()
+            .subscribe((res: HttpResponse<ExpenseNote[]>) => { this.expensenotes = res.body; }, (res: HttpErrorResponse) => this.onError(res.message));
+    }
+
+    clear() {
+        this.activeModal.dismiss('cancel');
+    }
+
+    save() {
+        this.isSaving = true;
+        if (this.employee.id !== undefined) {
+            this.subscribeToSaveResponse(
+                this.employeeService.update(this.employee));
+        } else {
+            this.subscribeToSaveResponse(
+                this.employeeService.create(this.employee));
+        }
+    }
+
+    private subscribeToSaveResponse(result: Observable<HttpResponse<Employee>>) {
+        result.subscribe((res: HttpResponse<Employee>) =>
+            this.onSaveSuccess(res.body), (res: HttpErrorResponse) => this.onSaveError());
+    }
+
+    private onSaveSuccess(result: Employee) {
+        this.eventManager.broadcast({ name: 'employeeListModification', content: 'OK'});
+        this.isSaving = false;
+        this.activeModal.dismiss(result);
+    }
+
+    private onSaveError() {
+        this.isSaving = false;
+    }
+
+    private onError(error: any) {
+        this.jhiAlertService.error(error.message, null, null);
+    }
+
+    trackTemplateById(index: number, item: Template) {
+        return item.id;
+    }
+
+    trackExpenseNoteById(index: number, item: ExpenseNote) {
+        return item.id;
+    }
+}
+
+@Component({
+    selector: 'jhi-employee-popup',
+    template: ''
+})
+export class EmployeePopupComponent implements OnInit, OnDestroy {
+
+    routeSub: any;
+
+    constructor(
+        private route: ActivatedRoute,
+        private employeePopupService: EmployeePopupService
+    ) {}
+
+    ngOnInit() {
+        this.routeSub = this.route.params.subscribe((params) => {
+            if ( params['id'] ) {
+                this.employeePopupService
+                    .open(EmployeeDialogComponent as Component, params['id']);
+            } else {
+                this.employeePopupService
+                    .open(EmployeeDialogComponent as Component);
+            }
+        });
+    }
+
+    ngOnDestroy() {
+        this.routeSub.unsubscribe();
+    }
+}
diff --git a/src/main/webapp/app/entities/employee/employee-popup.service.ts b/src/main/webapp/app/entities/employee/employee-popup.service.ts
new file mode 100644
index 0000000..5f223bc
--- /dev/null
+++ b/src/main/webapp/app/entities/employee/employee-popup.service.ts
@@ -0,0 +1,57 @@
+import { Injectable, Component } from '@angular/core';
+import { Router } from '@angular/router';
+import { NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';
+import { HttpResponse } from '@angular/common/http';
+import { Employee } from './employee.model';
+import { EmployeeService } from './employee.service';
+
+@Injectable()
+export class EmployeePopupService {
+    private ngbModalRef: NgbModalRef;
+
+    constructor(
+        private modalService: NgbModal,
+        private router: Router,
+        private employeeService: EmployeeService
+
+    ) {
+        this.ngbModalRef = null;
+    }
+
+    open(component: Component, id?: number | any): Promise<NgbModalRef> {
+        return new Promise<NgbModalRef>((resolve, reject) => {
+            const isOpen = this.ngbModalRef !== null;
+            if (isOpen) {
+                resolve(this.ngbModalRef);
+            }
+
+            if (id) {
+                this.employeeService.find(id)
+                    .subscribe((employeeResponse: HttpResponse<Employee>) => {
+                        const employee: Employee = employeeResponse.body;
+                        this.ngbModalRef = this.employeeModalRef(component, employee);
+                        resolve(this.ngbModalRef);
+                    });
+            } else {
+                // setTimeout used as a workaround for getting ExpressionChangedAfterItHasBeenCheckedError
+                setTimeout(() => {
+                    this.ngbModalRef = this.employeeModalRef(component, new Employee());
+                    resolve(this.ngbModalRef);
+                }, 0);
+            }
+        });
+    }
+
+    employeeModalRef(component: Component, employee: Employee): NgbModalRef {
+        const modalRef = this.modalService.open(component, { size: 'lg', backdrop: 'static'});
+        modalRef.componentInstance.employee = employee;
+        modalRef.result.then((result) => {
+            this.router.navigate([{ outlets: { popup: null }}], { replaceUrl: true, queryParamsHandling: 'merge' });
+            this.ngbModalRef = null;
+        }, (reason) => {
+            this.router.navigate([{ outlets: { popup: null }}], { replaceUrl: true, queryParamsHandling: 'merge' });
+            this.ngbModalRef = null;
+        });
+        return modalRef;
+    }
+}
diff --git a/src/main/webapp/app/entities/employee/employee.component.html b/src/main/webapp/app/entities/employee/employee.component.html
new file mode 100644
index 0000000..50773fb
--- /dev/null
+++ b/src/main/webapp/app/entities/employee/employee.component.html
@@ -0,0 +1,58 @@
+<div>
+    <h2>
+        <span>Employees</span>
+        <button class="btn btn-primary float-right jh-create-entity create-employee" [routerLink]="['/', { outlets: { popup: ['employee-new'] } }]">
+            <span class="fa fa-plus"></span>
+            <span >
+            Create new Employee
+            </span>
+        </button>
+    </h2>
+    <jhi-alert></jhi-alert>
+    <div class="row">
+    </div>
+    <br/>
+    <div class="table-responsive" *ngIf="employees">
+        <table class="table table-striped">
+            <thead>
+            <tr>
+            <th><span>ID</span></th>
+            <th><span>Trigram</span></th>
+            <th></th>
+            </tr>
+            </thead>
+            <tbody>
+            <tr *ngFor="let employee of employees ;trackBy: trackId">
+                <td><a [routerLink]="['../employee', employee.id ]">{{employee.id}}</a></td>
+                <td>{{employee.trigram}}</td>
+                <td class="text-right">
+                    <div class="btn-group flex-btn-group-container">
+                        <button type="submit"
+                                [routerLink]="['../employee', employee.id ]"
+                                class="btn btn-info btn-sm">
+                            <span class="fa fa-eye"></span>
+                            <span class="d-none d-md-inline">View</span>
+                        </button>
+                        <button type="submit"
+                                [routerLink]="['/', { outlets: { popup: 'employee/'+ employee.id + '/edit'} }]"
+                                replaceUrl="true"
+                                queryParamsHandling="merge"
+                                class="btn btn-primary btn-sm">
+                            <span class="fa fa-pencil"></span>
+                            <span class="d-none d-md-inline">Edit</span>
+                        </button>
+                        <button type="submit"
+                                [routerLink]="['/', { outlets: { popup: 'employee/'+ employee.id + '/delete'} }]"
+                                replaceUrl="true"
+                                queryParamsHandling="merge"
+                                class="btn btn-danger btn-sm">
+                            <span class="fa fa-remove"></span>
+                            <span class="d-none d-md-inline">Delete</span>
+                        </button>
+                    </div>
+                </td>
+            </tr>
+            </tbody>
+        </table>
+    </div>
+</div>
diff --git a/src/main/webapp/app/entities/employee/employee.component.ts b/src/main/webapp/app/entities/employee/employee.component.ts
new file mode 100644
index 0000000..c53e75f
--- /dev/null
+++ b/src/main/webapp/app/entities/employee/employee.component.ts
@@ -0,0 +1,57 @@
+import { Component, OnInit, OnDestroy } from '@angular/core';
+import { HttpResponse, HttpErrorResponse } from '@angular/common/http';
+import { Subscription } from 'rxjs/Subscription';
+import { JhiEventManager, JhiAlertService } from 'ng-jhipster';
+
+import { Employee } from './employee.model';
+import { EmployeeService } from './employee.service';
+import { Principal } from '../../shared';
+
+@Component({
+    selector: 'jhi-employee',
+    templateUrl: './employee.component.html'
+})
+export class EmployeeComponent implements OnInit, OnDestroy {
+employees: Employee[];
+    currentAccount: any;
+    eventSubscriber: Subscription;
+
+    constructor(
+        private employeeService: EmployeeService,
+        private jhiAlertService: JhiAlertService,
+        private eventManager: JhiEventManager,
+        private principal: Principal
+    ) {
+    }
+
+    loadAll() {
+        this.employeeService.query().subscribe(
+            (res: HttpResponse<Employee[]>) => {
+                this.employees = res.body;
+            },
+            (res: HttpErrorResponse) => this.onError(res.message)
+        );
+    }
+    ngOnInit() {
+        this.loadAll();
+        this.principal.identity().then((account) => {
+            this.currentAccount = account;
+        });
+        this.registerChangeInEmployees();
+    }
+
+    ngOnDestroy() {
+        this.eventManager.destroy(this.eventSubscriber);
+    }
+
+    trackId(index: number, item: Employee) {
+        return item.id;
+    }
+    registerChangeInEmployees() {
+        this.eventSubscriber = this.eventManager.subscribe('employeeListModification', (response) => this.loadAll());
+    }
+
+    private onError(error) {
+        this.jhiAlertService.error(error.message, null, null);
+    }
+}
diff --git a/src/main/webapp/app/entities/employee/employee.model.ts b/src/main/webapp/app/entities/employee/employee.model.ts
new file mode 100644
index 0000000..d88102a
--- /dev/null
+++ b/src/main/webapp/app/entities/employee/employee.model.ts
@@ -0,0 +1,11 @@
+import { BaseEntity } from './../../shared';
+
+export class Employee implements BaseEntity {
+    constructor(
+        public id?: number,
+        public trigram?: string,
+        public template?: BaseEntity,
+        public expenseNote?: BaseEntity,
+    ) {
+    }
+}
diff --git a/src/main/webapp/app/entities/employee/employee.module.ts b/src/main/webapp/app/entities/employee/employee.module.ts
new file mode 100644
index 0000000..e9b2c43
--- /dev/null
+++ b/src/main/webapp/app/entities/employee/employee.module.ts
@@ -0,0 +1,49 @@
+import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';
+import { RouterModule } from '@angular/router';
+
+import { OniryxHackathonSharedModule } from '../../shared';
+import {
+    EmployeeService,
+    EmployeePopupService,
+    EmployeeComponent,
+    EmployeeDetailComponent,
+    EmployeeDialogComponent,
+    EmployeePopupComponent,
+    EmployeeDeletePopupComponent,
+    EmployeeDeleteDialogComponent,
+    employeeRoute,
+    employeePopupRoute,
+} from './';
+
+const ENTITY_STATES = [
+    ...employeeRoute,
+    ...employeePopupRoute,
+];
+
+@NgModule({
+    imports: [
+        OniryxHackathonSharedModule,
+        RouterModule.forChild(ENTITY_STATES)
+    ],
+    declarations: [
+        EmployeeComponent,
+        EmployeeDetailComponent,
+        EmployeeDialogComponent,
+        EmployeeDeleteDialogComponent,
+        EmployeePopupComponent,
+        EmployeeDeletePopupComponent,
+    ],
+    entryComponents: [
+        EmployeeComponent,
+        EmployeeDialogComponent,
+        EmployeePopupComponent,
+        EmployeeDeleteDialogComponent,
+        EmployeeDeletePopupComponent,
+    ],
+    providers: [
+        EmployeeService,
+        EmployeePopupService,
+    ],
+    schemas: [CUSTOM_ELEMENTS_SCHEMA]
+})
+export class OniryxHackathonEmployeeModule {}
diff --git a/src/main/webapp/app/entities/employee/employee.route.ts b/src/main/webapp/app/entities/employee/employee.route.ts
new file mode 100644
index 0000000..a90fc19
--- /dev/null
+++ b/src/main/webapp/app/entities/employee/employee.route.ts
@@ -0,0 +1,60 @@
+import { Routes } from '@angular/router';
+
+import { UserRouteAccessService } from '../../shared';
+import { EmployeeComponent } from './employee.component';
+import { EmployeeDetailComponent } from './employee-detail.component';
+import { EmployeePopupComponent } from './employee-dialog.component';
+import { EmployeeDeletePopupComponent } from './employee-delete-dialog.component';
+
+export const employeeRoute: Routes = [
+    {
+        path: 'employee',
+        component: EmployeeComponent,
+        data: {
+            authorities: ['ROLE_USER'],
+            pageTitle: 'Employees'
+        },
+        canActivate: [UserRouteAccessService]
+    }, {
+        path: 'employee/:id',
+        component: EmployeeDetailComponent,
+        data: {
+            authorities: ['ROLE_USER'],
+            pageTitle: 'Employees'
+        },
+        canActivate: [UserRouteAccessService]
+    }
+];
+
+export const employeePopupRoute: Routes = [
+    {
+        path: 'employee-new',
+        component: EmployeePopupComponent,
+        data: {
+            authorities: ['ROLE_USER'],
+            pageTitle: 'Employees'
+        },
+        canActivate: [UserRouteAccessService],
+        outlet: 'popup'
+    },
+    {
+        path: 'employee/:id/edit',
+        component: EmployeePopupComponent,
+        data: {
+            authorities: ['ROLE_USER'],
+            pageTitle: 'Employees'
+        },
+        canActivate: [UserRouteAccessService],
+        outlet: 'popup'
+    },
+    {
+        path: 'employee/:id/delete',
+        component: EmployeeDeletePopupComponent,
+        data: {
+            authorities: ['ROLE_USER'],
+            pageTitle: 'Employees'
+        },
+        canActivate: [UserRouteAccessService],
+        outlet: 'popup'
+    }
+];
diff --git a/src/main/webapp/app/entities/employee/employee.service.ts b/src/main/webapp/app/entities/employee/employee.service.ts
new file mode 100644
index 0000000..daa73b1
--- /dev/null
+++ b/src/main/webapp/app/entities/employee/employee.service.ts
@@ -0,0 +1,74 @@
+import { Injectable } from '@angular/core';
+import { HttpClient, HttpResponse } from '@angular/common/http';
+import { Observable } from 'rxjs/Observable';
+import { SERVER_API_URL } from '../../app.constants';
+
+import { Employee } from './employee.model';
+import { createRequestOption } from '../../shared';
+
+export type EntityResponseType = HttpResponse<Employee>;
+
+@Injectable()
+export class EmployeeService {
+
+    private resourceUrl =  SERVER_API_URL + 'api/employees';
+
+    constructor(private http: HttpClient) { }
+
+    create(employee: Employee): Observable<EntityResponseType> {
+        const copy = this.convert(employee);
+        return this.http.post<Employee>(this.resourceUrl, copy, { observe: 'response' })
+            .map((res: EntityResponseType) => this.convertResponse(res));
+    }
+
+    update(employee: Employee): Observable<EntityResponseType> {
+        const copy = this.convert(employee);
+        return this.http.put<Employee>(this.resourceUrl, copy, { observe: 'response' })
+            .map((res: EntityResponseType) => this.convertResponse(res));
+    }
+
+    find(id: number): Observable<EntityResponseType> {
+        return this.http.get<Employee>(`${this.resourceUrl}/${id}`, { observe: 'response'})
+            .map((res: EntityResponseType) => this.convertResponse(res));
+    }
+
+    query(req?: any): Observable<HttpResponse<Employee[]>> {
+        const options = createRequestOption(req);
+        return this.http.get<Employee[]>(this.resourceUrl, { params: options, observe: 'response' })
+            .map((res: HttpResponse<Employee[]>) => this.convertArrayResponse(res));
+    }
+
+    delete(id: number): Observable<HttpResponse<any>> {
+        return this.http.delete<any>(`${this.resourceUrl}/${id}`, { observe: 'response'});
+    }
+
+    private convertResponse(res: EntityResponseType): EntityResponseType {
+        const body: Employee = this.convertItemFromServer(res.body);
+        return res.clone({body});
+    }
+
+    private convertArrayResponse(res: HttpResponse<Employee[]>): HttpResponse<Employee[]> {
+        const jsonResponse: Employee[] = res.body;
+        const body: Employee[] = [];
+        for (let i = 0; i < jsonResponse.length; i++) {
+            body.push(this.convertItemFromServer(jsonResponse[i]));
+        }
+        return res.clone({body});
+    }
+
+    /**
+     * Convert a returned JSON object to Employee.
+     */
+    private convertItemFromServer(employee: Employee): Employee {
+        const copy: Employee = Object.assign({}, employee);
+        return copy;
+    }
+
+    /**
+     * Convert a Employee to a JSON which can be sent to the server.
+     */
+    private convert(employee: Employee): Employee {
+        const copy: Employee = Object.assign({}, employee);
+        return copy;
+    }
+}
diff --git a/src/main/webapp/app/entities/employee/index.ts b/src/main/webapp/app/entities/employee/index.ts
new file mode 100644
index 0000000..59b66dd
--- /dev/null
+++ b/src/main/webapp/app/entities/employee/index.ts
@@ -0,0 +1,8 @@
+export * from './employee.model';
+export * from './employee-popup.service';
+export * from './employee.service';
+export * from './employee-dialog.component';
+export * from './employee-delete-dialog.component';
+export * from './employee-detail.component';
+export * from './employee.component';
+export * from './employee.route';
diff --git a/src/main/webapp/app/entities/entity.module.ts b/src/main/webapp/app/entities/entity.module.ts
index 6975270..15357be 100644
--- a/src/main/webapp/app/entities/entity.module.ts
+++ b/src/main/webapp/app/entities/entity.module.ts
@@ -1,9 +1,17 @@
 import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';
 
+import { OniryxHackathonTemplateModule } from './template/template.module';
+import { OniryxHackathonCategoryModule } from './category/category.module';
+import { OniryxHackathonEmployeeModule } from './employee/employee.module';
+import { OniryxHackathonExpenseNoteModule } from './expense-note/expense-note.module';
 /* jhipster-needle-add-entity-module-import - JHipster will add entity modules imports here */
 
 @NgModule({
     imports: [
+        OniryxHackathonTemplateModule,
+        OniryxHackathonCategoryModule,
+        OniryxHackathonEmployeeModule,
+        OniryxHackathonExpenseNoteModule,
         /* jhipster-needle-add-entity-module - JHipster will add entity modules here */
     ],
     declarations: [],
diff --git a/src/main/webapp/app/entities/expense-note/expense-note-delete-dialog.component.html b/src/main/webapp/app/entities/expense-note/expense-note-delete-dialog.component.html
new file mode 100644
index 0000000..e6c8c85
--- /dev/null
+++ b/src/main/webapp/app/entities/expense-note/expense-note-delete-dialog.component.html
@@ -0,0 +1,19 @@
+<form name="deleteForm" (ngSubmit)="confirmDelete(expenseNote.id)">
+    <div class="modal-header">
+        <h4 class="modal-title">Confirm delete operation</h4>
+        <button type="button" class="close" data-dismiss="modal" aria-hidden="true"
+                (click)="clear()">&times;</button>
+    </div>
+    <div class="modal-body">
+        <jhi-alert-error></jhi-alert-error>
+        <p>Are you sure you want to delete this Expense Note?</p>
+    </div>
+    <div class="modal-footer">
+        <button type="button" class="btn btn-secondary" data-dismiss="modal" (click)="clear()">
+            <span class="fa fa-ban"></span>&nbsp;<span>Cancel</span>
+        </button>
+        <button type="submit" class="btn btn-danger">
+            <span class="fa fa-remove"></span>&nbsp;<span>Delete</span>
+        </button>
+    </div>
+</form>
diff --git a/src/main/webapp/app/entities/expense-note/expense-note-delete-dialog.component.ts b/src/main/webapp/app/entities/expense-note/expense-note-delete-dialog.component.ts
new file mode 100644
index 0000000..ed9f545
--- /dev/null
+++ b/src/main/webapp/app/entities/expense-note/expense-note-delete-dialog.component.ts
@@ -0,0 +1,64 @@
+import { Component, OnInit, OnDestroy } from '@angular/core';
+import { ActivatedRoute } from '@angular/router';
+
+import { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';
+import { JhiEventManager } from 'ng-jhipster';
+
+import { ExpenseNote } from './expense-note.model';
+import { ExpenseNotePopupService } from './expense-note-popup.service';
+import { ExpenseNoteService } from './expense-note.service';
+
+@Component({
+    selector: 'jhi-expense-note-delete-dialog',
+    templateUrl: './expense-note-delete-dialog.component.html'
+})
+export class ExpenseNoteDeleteDialogComponent {
+
+    expenseNote: ExpenseNote;
+
+    constructor(
+        private expenseNoteService: ExpenseNoteService,
+        public activeModal: NgbActiveModal,
+        private eventManager: JhiEventManager
+    ) {
+    }
+
+    clear() {
+        this.activeModal.dismiss('cancel');
+    }
+
+    confirmDelete(id: number) {
+        this.expenseNoteService.delete(id).subscribe((response) => {
+            this.eventManager.broadcast({
+                name: 'expenseNoteListModification',
+                content: 'Deleted an expenseNote'
+            });
+            this.activeModal.dismiss(true);
+        });
+    }
+}
+
+@Component({
+    selector: 'jhi-expense-note-delete-popup',
+    template: ''
+})
+export class ExpenseNoteDeletePopupComponent implements OnInit, OnDestroy {
+
+    routeSub: any;
+
+    constructor(
+        private route: ActivatedRoute,
+        private expenseNotePopupService: ExpenseNotePopupService
+    ) {}
+
+    ngOnInit() {
+        this.routeSub = this.route.params.subscribe((params) => {
+            this.expenseNotePopupService
+                .open(ExpenseNoteDeleteDialogComponent as Component, params['id']);
+        });
+    }
+
+    ngOnDestroy() {
+        this.routeSub.unsubscribe();
+    }
+}
diff --git a/src/main/webapp/app/entities/expense-note/expense-note-detail.component.html b/src/main/webapp/app/entities/expense-note/expense-note-detail.component.html
new file mode 100644
index 0000000..2ba932c
--- /dev/null
+++ b/src/main/webapp/app/entities/expense-note/expense-note-detail.component.html
@@ -0,0 +1,60 @@
+
+<div *ngIf="expenseNote">
+    <h2><span>Expense Note</span> {{expenseNote.id}}</h2>
+    <hr>
+    <jhi-alert-error></jhi-alert-error>
+    <dl class="row-md jh-entity-details">
+        <dt><span>Montant</span></dt>
+        <dd>
+            <span>{{expenseNote.montant}}</span>
+        </dd>
+        <dt><span>Label</span></dt>
+        <dd>
+            <span>{{expenseNote.label}}</span>
+        </dd>
+        <dt><span>Justification</span></dt>
+        <dd>
+            <span>{{expenseNote.justification}}</span>
+        </dd>
+        <dt><span>Comment</span></dt>
+        <dd>
+            <span>{{expenseNote.comment}}</span>
+        </dd>
+        <dt><span>Provider</span></dt>
+        <dd>
+            <span>{{expenseNote.provider}}</span>
+        </dd>
+        <dt><span>Submit Date</span></dt>
+        <dd>
+            <span>{{expenseNote.submitDate | date:'mediumDate'}}</span>
+        </dd>
+        <dt><span>Payment Date</span></dt>
+        <dd>
+            <span>{{expenseNote.paymentDate | date:'mediumDate'}}</span>
+        </dd>
+        <dt><span>Status</span></dt>
+        <dd>
+            <span>{{expenseNote.status}}</span>
+        </dd>
+        <dt><span>Employee</span></dt>
+        <dd>
+            <div *ngIf="expenseNote.employee">
+                <a [routerLink]="['/employee', expenseNote.employee?.id]">{{expenseNote.employee?.id}}</a>
+            </div>
+        </dd>
+    </dl>
+
+    <button type="submit"
+            (click)="previousState()"
+            class="btn btn-info">
+        <span class="fa fa-arrow-left"></span>&nbsp;<span> Back</span>
+    </button>
+
+    <button type="button"
+            [routerLink]="['/', { outlets: { popup: 'expense-note/'+ expenseNote.id + '/edit'} }]"
+            replaceUrl="true"
+            queryParamsHandling="merge"
+            class="btn btn-primary">
+        <span class="fa fa-pencil"></span>&nbsp;<span> Edit</span>
+    </button>
+</div>
diff --git a/src/main/webapp/app/entities/expense-note/expense-note-detail.component.ts b/src/main/webapp/app/entities/expense-note/expense-note-detail.component.ts
new file mode 100644
index 0000000..4785c6d
--- /dev/null
+++ b/src/main/webapp/app/entities/expense-note/expense-note-detail.component.ts
@@ -0,0 +1,55 @@
+import { Component, OnInit, OnDestroy } from '@angular/core';
+import { ActivatedRoute } from '@angular/router';
+import { HttpResponse } from '@angular/common/http';
+import { Subscription } from 'rxjs/Subscription';
+import { JhiEventManager } from 'ng-jhipster';
+
+import { ExpenseNote } from './expense-note.model';
+import { ExpenseNoteService } from './expense-note.service';
+
+@Component({
+    selector: 'jhi-expense-note-detail',
+    templateUrl: './expense-note-detail.component.html'
+})
+export class ExpenseNoteDetailComponent implements OnInit, OnDestroy {
+
+    expenseNote: ExpenseNote;
+    private subscription: Subscription;
+    private eventSubscriber: Subscription;
+
+    constructor(
+        private eventManager: JhiEventManager,
+        private expenseNoteService: ExpenseNoteService,
+        private route: ActivatedRoute
+    ) {
+    }
+
+    ngOnInit() {
+        this.subscription = this.route.params.subscribe((params) => {
+            this.load(params['id']);
+        });
+        this.registerChangeInExpenseNotes();
+    }
+
+    load(id) {
+        this.expenseNoteService.find(id)
+            .subscribe((expenseNoteResponse: HttpResponse<ExpenseNote>) => {
+                this.expenseNote = expenseNoteResponse.body;
+            });
+    }
+    previousState() {
+        window.history.back();
+    }
+
+    ngOnDestroy() {
+        this.subscription.unsubscribe();
+        this.eventManager.destroy(this.eventSubscriber);
+    }
+
+    registerChangeInExpenseNotes() {
+        this.eventSubscriber = this.eventManager.subscribe(
+            'expenseNoteListModification',
+            (response) => this.load(this.expenseNote.id)
+        );
+    }
+}
diff --git a/src/main/webapp/app/entities/expense-note/expense-note-dialog.component.html b/src/main/webapp/app/entities/expense-note/expense-note-dialog.component.html
new file mode 100644
index 0000000..0b2ee5d
--- /dev/null
+++ b/src/main/webapp/app/entities/expense-note/expense-note-dialog.component.html
@@ -0,0 +1,120 @@
+<form name="editForm" role="form" novalidate (ngSubmit)="save()" #editForm="ngForm">
+
+    <div class="modal-header">
+        <h4 class="modal-title" id="myExpenseNoteLabel">Create or edit a Expense Note</h4>
+        <button type="button" class="close" data-dismiss="modal" aria-hidden="true"
+                (click)="clear()">&times;</button>
+    </div>
+    <div class="modal-body">
+        <jhi-alert-error></jhi-alert-error>
+        <div class="form-group" [hidden]="!expenseNote.id">
+            <label for="id">ID</label>
+            <input type="text" class="form-control" id="id" name="id"
+                   [(ngModel)]="expenseNote.id" readonly />
+        </div>
+        <div class="form-group">
+            <label class="form-control-label" for="field_montant">Montant</label>
+            <input type="number" class="form-control" name="montant" id="field_montant"
+                [(ngModel)]="expenseNote.montant" required/>
+            <div [hidden]="!(editForm.controls.montant?.dirty && editForm.controls.montant?.invalid)">
+                <small class="form-text text-danger"
+                   [hidden]="!editForm.controls.montant?.errors?.required">
+                   This field is required.
+                </small>
+                <small class="form-text text-danger"
+                    [hidden]="!editForm.controls.montant?.errors?.number">
+                    This field should be a number.
+                </small>
+            </div>
+        </div>
+        <div class="form-group">
+            <label class="form-control-label" for="field_label">Label</label>
+            <input type="text" class="form-control" name="label" id="field_label"
+                [(ngModel)]="expenseNote.label" required/>
+            <div [hidden]="!(editForm.controls.label?.dirty && editForm.controls.label?.invalid)">
+                <small class="form-text text-danger"
+                   [hidden]="!editForm.controls.label?.errors?.required">
+                   This field is required.
+                </small>
+            </div>
+        </div>
+        <div class="form-group">
+            <label class="form-control-label" for="field_justification">Justification</label>
+            <input type="text" class="form-control" name="justification" id="field_justification"
+                [(ngModel)]="expenseNote.justification" required/>
+            <div [hidden]="!(editForm.controls.justification?.dirty && editForm.controls.justification?.invalid)">
+                <small class="form-text text-danger"
+                   [hidden]="!editForm.controls.justification?.errors?.required">
+                   This field is required.
+                </small>
+            </div>
+        </div>
+        <div class="form-group">
+            <label class="form-control-label" for="field_comment">Comment</label>
+            <input type="text" class="form-control" name="comment" id="field_comment"
+                [(ngModel)]="expenseNote.comment" />
+        </div>
+        <div class="form-group">
+            <label class="form-control-label" for="field_provider">Provider</label>
+            <input type="text" class="form-control" name="provider" id="field_provider"
+                [(ngModel)]="expenseNote.provider" required/>
+            <div [hidden]="!(editForm.controls.provider?.dirty && editForm.controls.provider?.invalid)">
+                <small class="form-text text-danger"
+                   [hidden]="!editForm.controls.provider?.errors?.required">
+                   This field is required.
+                </small>
+            </div>
+        </div>
+        <div class="form-group">
+            <label class="form-control-label" for="field_submitDate">Submit Date</label>
+            <div class="input-group">
+                <input id="field_submitDate" type="text" class="form-control" name="submitDate" ngbDatepicker  #submitDateDp="ngbDatepicker" [(ngModel)]="expenseNote.submitDate"
+                required/>
+                <span class="input-group-append">
+                    <button type="button" class="btn btn-secondary" (click)="submitDateDp.toggle()"><i class="fa fa-calendar"></i></button>
+                </span>
+            </div>
+            <div [hidden]="!(editForm.controls.submitDate?.dirty && editForm.controls.submitDate?.invalid)">
+                <small class="form-text text-danger"
+                   [hidden]="!editForm.controls.submitDate?.errors?.required">
+                   This field is required.
+                </small>
+            </div>
+        </div>
+        <div class="form-group">
+            <label class="form-control-label" for="field_paymentDate">Payment Date</label>
+            <div class="input-group">
+                <input id="field_paymentDate" type="text" class="form-control" name="paymentDate" ngbDatepicker  #paymentDateDp="ngbDatepicker" [(ngModel)]="expenseNote.paymentDate"
+                />
+                <span class="input-group-append">
+                    <button type="button" class="btn btn-secondary" (click)="paymentDateDp.toggle()"><i class="fa fa-calendar"></i></button>
+                </span>
+            </div>
+        </div>
+        <div class="form-group">
+            <label class="form-control-label" for="field_status">Status</label>
+            <select class="form-control" name="status" [(ngModel)]="expenseNote.status" id="field_status" >
+                <option value="ENCODED">ENCODED</option>
+                <option value="SUSPENDED">SUSPENDED</option>
+                <option value="PAID">PAID</option>
+                <option value="REJECTED">REJECTED</option>
+            </select>
+        </div>
+
+        <div class="form-group">
+            <label class="form-control-label" for="field_employee">Employee</label>
+            <select class="form-control" id="field_employee" name="employee" [(ngModel)]="expenseNote.employee">
+                <option [ngValue]="null"></option>
+                <option [ngValue]="employeeOption.id === expenseNote.employee?.id ? expenseNote.employee : employeeOption" *ngFor="let employeeOption of employees; trackBy: trackEmployeeById">{{employeeOption.id}}</option>
+            </select>
+        </div>
+    </div>
+    <div class="modal-footer">
+        <button type="button" class="btn btn-secondary" data-dismiss="modal" (click)="clear()">
+            <span class="fa fa-ban"></span>&nbsp;<span>Cancel</span>
+        </button>
+        <button type="submit" [disabled]="editForm.form.invalid || isSaving" class="btn btn-primary">
+            <span class="fa fa-save"></span>&nbsp;<span>Save</span>
+        </button>
+    </div>
+</form>
diff --git a/src/main/webapp/app/entities/expense-note/expense-note-dialog.component.ts b/src/main/webapp/app/entities/expense-note/expense-note-dialog.component.ts
new file mode 100644
index 0000000..eb0a962
--- /dev/null
+++ b/src/main/webapp/app/entities/expense-note/expense-note-dialog.component.ts
@@ -0,0 +1,120 @@
+import { Component, OnInit, OnDestroy } from '@angular/core';
+import { ActivatedRoute } from '@angular/router';
+import { HttpResponse, HttpErrorResponse } from '@angular/common/http';
+
+import { Observable } from 'rxjs/Observable';
+import { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';
+import { JhiEventManager, JhiAlertService } from 'ng-jhipster';
+
+import { ExpenseNote } from './expense-note.model';
+import { ExpenseNotePopupService } from './expense-note-popup.service';
+import { ExpenseNoteService } from './expense-note.service';
+import { Employee, EmployeeService } from '../employee';
+
+@Component({
+    selector: 'jhi-expense-note-dialog',
+    templateUrl: './expense-note-dialog.component.html'
+})
+export class ExpenseNoteDialogComponent implements OnInit {
+
+    expenseNote: ExpenseNote;
+    isSaving: boolean;
+
+    employees: Employee[];
+    submitDateDp: any;
+    paymentDateDp: any;
+
+    constructor(
+        public activeModal: NgbActiveModal,
+        private jhiAlertService: JhiAlertService,
+        private expenseNoteService: ExpenseNoteService,
+        private employeeService: EmployeeService,
+        private eventManager: JhiEventManager
+    ) {
+    }
+
+    ngOnInit() {
+        this.isSaving = false;
+        this.employeeService
+            .query({filter: 'expensenote(id)-is-null'})
+            .subscribe((res: HttpResponse<Employee[]>) => {
+                if (!this.expenseNote.employee || !this.expenseNote.employee.id) {
+                    this.employees = res.body;
+                } else {
+                    this.employeeService
+                        .find(this.expenseNote.employee.id)
+                        .subscribe((subRes: HttpResponse<Employee>) => {
+                            this.employees = [subRes.body].concat(res.body);
+                        }, (subRes: HttpErrorResponse) => this.onError(subRes.message));
+                }
+            }, (res: HttpErrorResponse) => this.onError(res.message));
+    }
+
+    clear() {
+        this.activeModal.dismiss('cancel');
+    }
+
+    save() {
+        this.isSaving = true;
+        if (this.expenseNote.id !== undefined) {
+            this.subscribeToSaveResponse(
+                this.expenseNoteService.update(this.expenseNote));
+        } else {
+            this.subscribeToSaveResponse(
+                this.expenseNoteService.create(this.expenseNote));
+        }
+    }
+
+    private subscribeToSaveResponse(result: Observable<HttpResponse<ExpenseNote>>) {
+        result.subscribe((res: HttpResponse<ExpenseNote>) =>
+            this.onSaveSuccess(res.body), (res: HttpErrorResponse) => this.onSaveError());
+    }
+
+    private onSaveSuccess(result: ExpenseNote) {
+        this.eventManager.broadcast({ name: 'expenseNoteListModification', content: 'OK'});
+        this.isSaving = false;
+        this.activeModal.dismiss(result);
+    }
+
+    private onSaveError() {
+        this.isSaving = false;
+    }
+
+    private onError(error: any) {
+        this.jhiAlertService.error(error.message, null, null);
+    }
+
+    trackEmployeeById(index: number, item: Employee) {
+        return item.id;
+    }
+}
+
+@Component({
+    selector: 'jhi-expense-note-popup',
+    template: ''
+})
+export class ExpenseNotePopupComponent implements OnInit, OnDestroy {
+
+    routeSub: any;
+
+    constructor(
+        private route: ActivatedRoute,
+        private expenseNotePopupService: ExpenseNotePopupService
+    ) {}
+
+    ngOnInit() {
+        this.routeSub = this.route.params.subscribe((params) => {
+            if ( params['id'] ) {
+                this.expenseNotePopupService
+                    .open(ExpenseNoteDialogComponent as Component, params['id']);
+            } else {
+                this.expenseNotePopupService
+                    .open(ExpenseNoteDialogComponent as Component);
+            }
+        });
+    }
+
+    ngOnDestroy() {
+        this.routeSub.unsubscribe();
+    }
+}
diff --git a/src/main/webapp/app/entities/expense-note/expense-note-popup.service.ts b/src/main/webapp/app/entities/expense-note/expense-note-popup.service.ts
new file mode 100644
index 0000000..652dc55
--- /dev/null
+++ b/src/main/webapp/app/entities/expense-note/expense-note-popup.service.ts
@@ -0,0 +1,71 @@
+import { Injectable, Component } from '@angular/core';
+import { Router } from '@angular/router';
+import { NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';
+import { HttpResponse } from '@angular/common/http';
+import { ExpenseNote } from './expense-note.model';
+import { ExpenseNoteService } from './expense-note.service';
+
+@Injectable()
+export class ExpenseNotePopupService {
+    private ngbModalRef: NgbModalRef;
+
+    constructor(
+        private modalService: NgbModal,
+        private router: Router,
+        private expenseNoteService: ExpenseNoteService
+
+    ) {
+        this.ngbModalRef = null;
+    }
+
+    open(component: Component, id?: number | any): Promise<NgbModalRef> {
+        return new Promise<NgbModalRef>((resolve, reject) => {
+            const isOpen = this.ngbModalRef !== null;
+            if (isOpen) {
+                resolve(this.ngbModalRef);
+            }
+
+            if (id) {
+                this.expenseNoteService.find(id)
+                    .subscribe((expenseNoteResponse: HttpResponse<ExpenseNote>) => {
+                        const expenseNote: ExpenseNote = expenseNoteResponse.body;
+                        if (expenseNote.submitDate) {
+                            expenseNote.submitDate = {
+                                year: expenseNote.submitDate.getFullYear(),
+                                month: expenseNote.submitDate.getMonth() + 1,
+                                day: expenseNote.submitDate.getDate()
+                            };
+                        }
+                        if (expenseNote.paymentDate) {
+                            expenseNote.paymentDate = {
+                                year: expenseNote.paymentDate.getFullYear(),
+                                month: expenseNote.paymentDate.getMonth() + 1,
+                                day: expenseNote.paymentDate.getDate()
+                            };
+                        }
+                        this.ngbModalRef = this.expenseNoteModalRef(component, expenseNote);
+                        resolve(this.ngbModalRef);
+                    });
+            } else {
+                // setTimeout used as a workaround for getting ExpressionChangedAfterItHasBeenCheckedError
+                setTimeout(() => {
+                    this.ngbModalRef = this.expenseNoteModalRef(component, new ExpenseNote());
+                    resolve(this.ngbModalRef);
+                }, 0);
+            }
+        });
+    }
+
+    expenseNoteModalRef(component: Component, expenseNote: ExpenseNote): NgbModalRef {
+        const modalRef = this.modalService.open(component, { size: 'lg', backdrop: 'static'});
+        modalRef.componentInstance.expenseNote = expenseNote;
+        modalRef.result.then((result) => {
+            this.router.navigate([{ outlets: { popup: null }}], { replaceUrl: true, queryParamsHandling: 'merge' });
+            this.ngbModalRef = null;
+        }, (reason) => {
+            this.router.navigate([{ outlets: { popup: null }}], { replaceUrl: true, queryParamsHandling: 'merge' });
+            this.ngbModalRef = null;
+        });
+        return modalRef;
+    }
+}
diff --git a/src/main/webapp/app/entities/expense-note/expense-note.component.html b/src/main/webapp/app/entities/expense-note/expense-note.component.html
new file mode 100644
index 0000000..54705c2
--- /dev/null
+++ b/src/main/webapp/app/entities/expense-note/expense-note.component.html
@@ -0,0 +1,78 @@
+<div>
+    <h2>
+        <span>Expense Notes</span>
+        <button class="btn btn-primary float-right jh-create-entity create-expense-note" [routerLink]="['/', { outlets: { popup: ['expense-note-new'] } }]">
+            <span class="fa fa-plus"></span>
+            <span >
+            Create new Expense Note
+            </span>
+        </button>
+    </h2>
+    <jhi-alert></jhi-alert>
+    <div class="row">
+    </div>
+    <br/>
+    <div class="table-responsive" *ngIf="expenseNotes">
+        <table class="table table-striped">
+            <thead>
+            <tr>
+            <th><span>ID</span></th>
+            <th><span>Montant</span></th>
+            <th><span>Label</span></th>
+            <th><span>Justification</span></th>
+            <th><span>Comment</span></th>
+            <th><span>Provider</span></th>
+            <th><span>Submit Date</span></th>
+            <th><span>Payment Date</span></th>
+            <th><span>Status</span></th>
+            <th><span>Employee</span></th>
+            <th></th>
+            </tr>
+            </thead>
+            <tbody>
+            <tr *ngFor="let expenseNote of expenseNotes ;trackBy: trackId">
+                <td><a [routerLink]="['../expense-note', expenseNote.id ]">{{expenseNote.id}}</a></td>
+                <td>{{expenseNote.montant}}</td>
+                <td>{{expenseNote.label}}</td>
+                <td>{{expenseNote.justification}}</td>
+                <td>{{expenseNote.comment}}</td>
+                <td>{{expenseNote.provider}}</td>
+                <td>{{expenseNote.submitDate | date:'mediumDate'}}</td>
+                <td>{{expenseNote.paymentDate | date:'mediumDate'}}</td>
+                <td>{{expenseNote.status}}</td>
+                <td>
+                    <div *ngIf="expenseNote.employee">
+                        <a [routerLink]="['../employee', expenseNote.employee?.id ]" >{{expenseNote.employee?.id}}</a>
+                    </div>
+                </td>
+                <td class="text-right">
+                    <div class="btn-group flex-btn-group-container">
+                        <button type="submit"
+                                [routerLink]="['../expense-note', expenseNote.id ]"
+                                class="btn btn-info btn-sm">
+                            <span class="fa fa-eye"></span>
+                            <span class="d-none d-md-inline">View</span>
+                        </button>
+                        <button type="submit"
+                                [routerLink]="['/', { outlets: { popup: 'expense-note/'+ expenseNote.id + '/edit'} }]"
+                                replaceUrl="true"
+                                queryParamsHandling="merge"
+                                class="btn btn-primary btn-sm">
+                            <span class="fa fa-pencil"></span>
+                            <span class="d-none d-md-inline">Edit</span>
+                        </button>
+                        <button type="submit"
+                                [routerLink]="['/', { outlets: { popup: 'expense-note/'+ expenseNote.id + '/delete'} }]"
+                                replaceUrl="true"
+                                queryParamsHandling="merge"
+                                class="btn btn-danger btn-sm">
+                            <span class="fa fa-remove"></span>
+                            <span class="d-none d-md-inline">Delete</span>
+                        </button>
+                    </div>
+                </td>
+            </tr>
+            </tbody>
+        </table>
+    </div>
+</div>
diff --git a/src/main/webapp/app/entities/expense-note/expense-note.component.ts b/src/main/webapp/app/entities/expense-note/expense-note.component.ts
new file mode 100644
index 0000000..1bd00f7
--- /dev/null
+++ b/src/main/webapp/app/entities/expense-note/expense-note.component.ts
@@ -0,0 +1,57 @@
+import { Component, OnInit, OnDestroy } from '@angular/core';
+import { HttpResponse, HttpErrorResponse } from '@angular/common/http';
+import { Subscription } from 'rxjs/Subscription';
+import { JhiEventManager, JhiAlertService } from 'ng-jhipster';
+
+import { ExpenseNote } from './expense-note.model';
+import { ExpenseNoteService } from './expense-note.service';
+import { Principal } from '../../shared';
+
+@Component({
+    selector: 'jhi-expense-note',
+    templateUrl: './expense-note.component.html'
+})
+export class ExpenseNoteComponent implements OnInit, OnDestroy {
+expenseNotes: ExpenseNote[];
+    currentAccount: any;
+    eventSubscriber: Subscription;
+
+    constructor(
+        private expenseNoteService: ExpenseNoteService,
+        private jhiAlertService: JhiAlertService,
+        private eventManager: JhiEventManager,
+        private principal: Principal
+    ) {
+    }
+
+    loadAll() {
+        this.expenseNoteService.query().subscribe(
+            (res: HttpResponse<ExpenseNote[]>) => {
+                this.expenseNotes = res.body;
+            },
+            (res: HttpErrorResponse) => this.onError(res.message)
+        );
+    }
+    ngOnInit() {
+        this.loadAll();
+        this.principal.identity().then((account) => {
+            this.currentAccount = account;
+        });
+        this.registerChangeInExpenseNotes();
+    }
+
+    ngOnDestroy() {
+        this.eventManager.destroy(this.eventSubscriber);
+    }
+
+    trackId(index: number, item: ExpenseNote) {
+        return item.id;
+    }
+    registerChangeInExpenseNotes() {
+        this.eventSubscriber = this.eventManager.subscribe('expenseNoteListModification', (response) => this.loadAll());
+    }
+
+    private onError(error) {
+        this.jhiAlertService.error(error.message, null, null);
+    }
+}
diff --git a/src/main/webapp/app/entities/expense-note/expense-note.model.ts b/src/main/webapp/app/entities/expense-note/expense-note.model.ts
new file mode 100644
index 0000000..dfd79b5
--- /dev/null
+++ b/src/main/webapp/app/entities/expense-note/expense-note.model.ts
@@ -0,0 +1,25 @@
+import { BaseEntity } from './../../shared';
+
+export const enum Status {
+    'ENCODED',
+    'SUSPENDED',
+    'PAID',
+    'REJECTED'
+}
+
+export class ExpenseNote implements BaseEntity {
+    constructor(
+        public id?: number,
+        public montant?: number,
+        public label?: string,
+        public justification?: string,
+        public comment?: string,
+        public provider?: string,
+        public submitDate?: any,
+        public paymentDate?: any,
+        public status?: Status,
+        public employee?: BaseEntity,
+        public categories?: BaseEntity[],
+    ) {
+    }
+}
diff --git a/src/main/webapp/app/entities/expense-note/expense-note.module.ts b/src/main/webapp/app/entities/expense-note/expense-note.module.ts
new file mode 100644
index 0000000..0f0e3b3
--- /dev/null
+++ b/src/main/webapp/app/entities/expense-note/expense-note.module.ts
@@ -0,0 +1,49 @@
+import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';
+import { RouterModule } from '@angular/router';
+
+import { OniryxHackathonSharedModule } from '../../shared';
+import {
+    ExpenseNoteService,
+    ExpenseNotePopupService,
+    ExpenseNoteComponent,
+    ExpenseNoteDetailComponent,
+    ExpenseNoteDialogComponent,
+    ExpenseNotePopupComponent,
+    ExpenseNoteDeletePopupComponent,
+    ExpenseNoteDeleteDialogComponent,
+    expenseNoteRoute,
+    expenseNotePopupRoute,
+} from './';
+
+const ENTITY_STATES = [
+    ...expenseNoteRoute,
+    ...expenseNotePopupRoute,
+];
+
+@NgModule({
+    imports: [
+        OniryxHackathonSharedModule,
+        RouterModule.forChild(ENTITY_STATES)
+    ],
+    declarations: [
+        ExpenseNoteComponent,
+        ExpenseNoteDetailComponent,
+        ExpenseNoteDialogComponent,
+        ExpenseNoteDeleteDialogComponent,
+        ExpenseNotePopupComponent,
+        ExpenseNoteDeletePopupComponent,
+    ],
+    entryComponents: [
+        ExpenseNoteComponent,
+        ExpenseNoteDialogComponent,
+        ExpenseNotePopupComponent,
+        ExpenseNoteDeleteDialogComponent,
+        ExpenseNoteDeletePopupComponent,
+    ],
+    providers: [
+        ExpenseNoteService,
+        ExpenseNotePopupService,
+    ],
+    schemas: [CUSTOM_ELEMENTS_SCHEMA]
+})
+export class OniryxHackathonExpenseNoteModule {}
diff --git a/src/main/webapp/app/entities/expense-note/expense-note.route.ts b/src/main/webapp/app/entities/expense-note/expense-note.route.ts
new file mode 100644
index 0000000..5baa3da
--- /dev/null
+++ b/src/main/webapp/app/entities/expense-note/expense-note.route.ts
@@ -0,0 +1,60 @@
+import { Routes } from '@angular/router';
+
+import { UserRouteAccessService } from '../../shared';
+import { ExpenseNoteComponent } from './expense-note.component';
+import { ExpenseNoteDetailComponent } from './expense-note-detail.component';
+import { ExpenseNotePopupComponent } from './expense-note-dialog.component';
+import { ExpenseNoteDeletePopupComponent } from './expense-note-delete-dialog.component';
+
+export const expenseNoteRoute: Routes = [
+    {
+        path: 'expense-note',
+        component: ExpenseNoteComponent,
+        data: {
+            authorities: ['ROLE_USER'],
+            pageTitle: 'ExpenseNotes'
+        },
+        canActivate: [UserRouteAccessService]
+    }, {
+        path: 'expense-note/:id',
+        component: ExpenseNoteDetailComponent,
+        data: {
+            authorities: ['ROLE_USER'],
+            pageTitle: 'ExpenseNotes'
+        },
+        canActivate: [UserRouteAccessService]
+    }
+];
+
+export const expenseNotePopupRoute: Routes = [
+    {
+        path: 'expense-note-new',
+        component: ExpenseNotePopupComponent,
+        data: {
+            authorities: ['ROLE_USER'],
+            pageTitle: 'ExpenseNotes'
+        },
+        canActivate: [UserRouteAccessService],
+        outlet: 'popup'
+    },
+    {
+        path: 'expense-note/:id/edit',
+        component: ExpenseNotePopupComponent,
+        data: {
+            authorities: ['ROLE_USER'],
+            pageTitle: 'ExpenseNotes'
+        },
+        canActivate: [UserRouteAccessService],
+        outlet: 'popup'
+    },
+    {
+        path: 'expense-note/:id/delete',
+        component: ExpenseNoteDeletePopupComponent,
+        data: {
+            authorities: ['ROLE_USER'],
+            pageTitle: 'ExpenseNotes'
+        },
+        canActivate: [UserRouteAccessService],
+        outlet: 'popup'
+    }
+];
diff --git a/src/main/webapp/app/entities/expense-note/expense-note.service.ts b/src/main/webapp/app/entities/expense-note/expense-note.service.ts
new file mode 100644
index 0000000..8e08166
--- /dev/null
+++ b/src/main/webapp/app/entities/expense-note/expense-note.service.ts
@@ -0,0 +1,84 @@
+import { Injectable } from '@angular/core';
+import { HttpClient, HttpResponse } from '@angular/common/http';
+import { Observable } from 'rxjs/Observable';
+import { SERVER_API_URL } from '../../app.constants';
+
+import { JhiDateUtils } from 'ng-jhipster';
+
+import { ExpenseNote } from './expense-note.model';
+import { createRequestOption } from '../../shared';
+
+export type EntityResponseType = HttpResponse<ExpenseNote>;
+
+@Injectable()
+export class ExpenseNoteService {
+
+    private resourceUrl =  SERVER_API_URL + 'api/expense-notes';
+
+    constructor(private http: HttpClient, private dateUtils: JhiDateUtils) { }
+
+    create(expenseNote: ExpenseNote): Observable<EntityResponseType> {
+        const copy = this.convert(expenseNote);
+        return this.http.post<ExpenseNote>(this.resourceUrl, copy, { observe: 'response' })
+            .map((res: EntityResponseType) => this.convertResponse(res));
+    }
+
+    update(expenseNote: ExpenseNote): Observable<EntityResponseType> {
+        const copy = this.convert(expenseNote);
+        return this.http.put<ExpenseNote>(this.resourceUrl, copy, { observe: 'response' })
+            .map((res: EntityResponseType) => this.convertResponse(res));
+    }
+
+    find(id: number): Observable<EntityResponseType> {
+        return this.http.get<ExpenseNote>(`${this.resourceUrl}/${id}`, { observe: 'response'})
+            .map((res: EntityResponseType) => this.convertResponse(res));
+    }
+
+    query(req?: any): Observable<HttpResponse<ExpenseNote[]>> {
+        const options = createRequestOption(req);
+        return this.http.get<ExpenseNote[]>(this.resourceUrl, { params: options, observe: 'response' })
+            .map((res: HttpResponse<ExpenseNote[]>) => this.convertArrayResponse(res));
+    }
+
+    delete(id: number): Observable<HttpResponse<any>> {
+        return this.http.delete<any>(`${this.resourceUrl}/${id}`, { observe: 'response'});
+    }
+
+    private convertResponse(res: EntityResponseType): EntityResponseType {
+        const body: ExpenseNote = this.convertItemFromServer(res.body);
+        return res.clone({body});
+    }
+
+    private convertArrayResponse(res: HttpResponse<ExpenseNote[]>): HttpResponse<ExpenseNote[]> {
+        const jsonResponse: ExpenseNote[] = res.body;
+        const body: ExpenseNote[] = [];
+        for (let i = 0; i < jsonResponse.length; i++) {
+            body.push(this.convertItemFromServer(jsonResponse[i]));
+        }
+        return res.clone({body});
+    }
+
+    /**
+     * Convert a returned JSON object to ExpenseNote.
+     */
+    private convertItemFromServer(expenseNote: ExpenseNote): ExpenseNote {
+        const copy: ExpenseNote = Object.assign({}, expenseNote);
+        copy.submitDate = this.dateUtils
+            .convertLocalDateFromServer(expenseNote.submitDate);
+        copy.paymentDate = this.dateUtils
+            .convertLocalDateFromServer(expenseNote.paymentDate);
+        return copy;
+    }
+
+    /**
+     * Convert a ExpenseNote to a JSON which can be sent to the server.
+     */
+    private convert(expenseNote: ExpenseNote): ExpenseNote {
+        const copy: ExpenseNote = Object.assign({}, expenseNote);
+        copy.submitDate = this.dateUtils
+            .convertLocalDateToServer(expenseNote.submitDate);
+        copy.paymentDate = this.dateUtils
+            .convertLocalDateToServer(expenseNote.paymentDate);
+        return copy;
+    }
+}
diff --git a/src/main/webapp/app/entities/expense-note/index.ts b/src/main/webapp/app/entities/expense-note/index.ts
new file mode 100644
index 0000000..c0d0041
--- /dev/null
+++ b/src/main/webapp/app/entities/expense-note/index.ts
@@ -0,0 +1,8 @@
+export * from './expense-note.model';
+export * from './expense-note-popup.service';
+export * from './expense-note.service';
+export * from './expense-note-dialog.component';
+export * from './expense-note-delete-dialog.component';
+export * from './expense-note-detail.component';
+export * from './expense-note.component';
+export * from './expense-note.route';
diff --git a/src/main/webapp/app/entities/template/index.ts b/src/main/webapp/app/entities/template/index.ts
new file mode 100644
index 0000000..348c60e
--- /dev/null
+++ b/src/main/webapp/app/entities/template/index.ts
@@ -0,0 +1,8 @@
+export * from './template.model';
+export * from './template-popup.service';
+export * from './template.service';
+export * from './template-dialog.component';
+export * from './template-delete-dialog.component';
+export * from './template-detail.component';
+export * from './template.component';
+export * from './template.route';
diff --git a/src/main/webapp/app/entities/template/template-delete-dialog.component.html b/src/main/webapp/app/entities/template/template-delete-dialog.component.html
new file mode 100644
index 0000000..0242643
--- /dev/null
+++ b/src/main/webapp/app/entities/template/template-delete-dialog.component.html
@@ -0,0 +1,19 @@
+<form name="deleteForm" (ngSubmit)="confirmDelete(template.id)">
+    <div class="modal-header">
+        <h4 class="modal-title">Confirm delete operation</h4>
+        <button type="button" class="close" data-dismiss="modal" aria-hidden="true"
+                (click)="clear()">&times;</button>
+    </div>
+    <div class="modal-body">
+        <jhi-alert-error></jhi-alert-error>
+        <p>Are you sure you want to delete this Template?</p>
+    </div>
+    <div class="modal-footer">
+        <button type="button" class="btn btn-secondary" data-dismiss="modal" (click)="clear()">
+            <span class="fa fa-ban"></span>&nbsp;<span>Cancel</span>
+        </button>
+        <button type="submit" class="btn btn-danger">
+            <span class="fa fa-remove"></span>&nbsp;<span>Delete</span>
+        </button>
+    </div>
+</form>
diff --git a/src/main/webapp/app/entities/template/template-delete-dialog.component.ts b/src/main/webapp/app/entities/template/template-delete-dialog.component.ts
new file mode 100644
index 0000000..5a033ec
--- /dev/null
+++ b/src/main/webapp/app/entities/template/template-delete-dialog.component.ts
@@ -0,0 +1,64 @@
+import { Component, OnInit, OnDestroy } from '@angular/core';
+import { ActivatedRoute } from '@angular/router';
+
+import { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';
+import { JhiEventManager } from 'ng-jhipster';
+
+import { Template } from './template.model';
+import { TemplatePopupService } from './template-popup.service';
+import { TemplateService } from './template.service';
+
+@Component({
+    selector: 'jhi-template-delete-dialog',
+    templateUrl: './template-delete-dialog.component.html'
+})
+export class TemplateDeleteDialogComponent {
+
+    template: Template;
+
+    constructor(
+        private templateService: TemplateService,
+        public activeModal: NgbActiveModal,
+        private eventManager: JhiEventManager
+    ) {
+    }
+
+    clear() {
+        this.activeModal.dismiss('cancel');
+    }
+
+    confirmDelete(id: number) {
+        this.templateService.delete(id).subscribe((response) => {
+            this.eventManager.broadcast({
+                name: 'templateListModification',
+                content: 'Deleted an template'
+            });
+            this.activeModal.dismiss(true);
+        });
+    }
+}
+
+@Component({
+    selector: 'jhi-template-delete-popup',
+    template: ''
+})
+export class TemplateDeletePopupComponent implements OnInit, OnDestroy {
+
+    routeSub: any;
+
+    constructor(
+        private route: ActivatedRoute,
+        private templatePopupService: TemplatePopupService
+    ) {}
+
+    ngOnInit() {
+        this.routeSub = this.route.params.subscribe((params) => {
+            this.templatePopupService
+                .open(TemplateDeleteDialogComponent as Component, params['id']);
+        });
+    }
+
+    ngOnDestroy() {
+        this.routeSub.unsubscribe();
+    }
+}
diff --git a/src/main/webapp/app/entities/template/template-detail.component.html b/src/main/webapp/app/entities/template/template-detail.component.html
new file mode 100644
index 0000000..ee88000
--- /dev/null
+++ b/src/main/webapp/app/entities/template/template-detail.component.html
@@ -0,0 +1,48 @@
+
+<div *ngIf="template">
+    <h2><span>Template</span> {{template.id}}</h2>
+    <hr>
+    <jhi-alert-error></jhi-alert-error>
+    <dl class="row-md jh-entity-details">
+        <dt><span>Montant</span></dt>
+        <dd>
+            <span>{{template.montant}}</span>
+        </dd>
+        <dt><span>Label</span></dt>
+        <dd>
+            <span>{{template.label}}</span>
+        </dd>
+        <dt><span>Justification</span></dt>
+        <dd>
+            <span>{{template.justification}}</span>
+        </dd>
+        <dt><span>Comment</span></dt>
+        <dd>
+            <span>{{template.comment}}</span>
+        </dd>
+        <dt><span>Provider</span></dt>
+        <dd>
+            <span>{{template.provider}}</span>
+        </dd>
+        <dt><span>Employee</span></dt>
+        <dd>
+            <div *ngIf="template.employee">
+                <a [routerLink]="['/employee', template.employee?.id]">{{template.employee?.id}}</a>
+            </div>
+        </dd>
+    </dl>
+
+    <button type="submit"
+            (click)="previousState()"
+            class="btn btn-info">
+        <span class="fa fa-arrow-left"></span>&nbsp;<span> Back</span>
+    </button>
+
+    <button type="button"
+            [routerLink]="['/', { outlets: { popup: 'template/'+ template.id + '/edit'} }]"
+            replaceUrl="true"
+            queryParamsHandling="merge"
+            class="btn btn-primary">
+        <span class="fa fa-pencil"></span>&nbsp;<span> Edit</span>
+    </button>
+</div>
diff --git a/src/main/webapp/app/entities/template/template-detail.component.ts b/src/main/webapp/app/entities/template/template-detail.component.ts
new file mode 100644
index 0000000..cc8e7d7
--- /dev/null
+++ b/src/main/webapp/app/entities/template/template-detail.component.ts
@@ -0,0 +1,55 @@
+import { Component, OnInit, OnDestroy } from '@angular/core';
+import { ActivatedRoute } from '@angular/router';
+import { HttpResponse } from '@angular/common/http';
+import { Subscription } from 'rxjs/Subscription';
+import { JhiEventManager } from 'ng-jhipster';
+
+import { Template } from './template.model';
+import { TemplateService } from './template.service';
+
+@Component({
+    selector: 'jhi-template-detail',
+    templateUrl: './template-detail.component.html'
+})
+export class TemplateDetailComponent implements OnInit, OnDestroy {
+
+    template: Template;
+    private subscription: Subscription;
+    private eventSubscriber: Subscription;
+
+    constructor(
+        private eventManager: JhiEventManager,
+        private templateService: TemplateService,
+        private route: ActivatedRoute
+    ) {
+    }
+
+    ngOnInit() {
+        this.subscription = this.route.params.subscribe((params) => {
+            this.load(params['id']);
+        });
+        this.registerChangeInTemplates();
+    }
+
+    load(id) {
+        this.templateService.find(id)
+            .subscribe((templateResponse: HttpResponse<Template>) => {
+                this.template = templateResponse.body;
+            });
+    }
+    previousState() {
+        window.history.back();
+    }
+
+    ngOnDestroy() {
+        this.subscription.unsubscribe();
+        this.eventManager.destroy(this.eventSubscriber);
+    }
+
+    registerChangeInTemplates() {
+        this.eventSubscriber = this.eventManager.subscribe(
+            'templateListModification',
+            (response) => this.load(this.template.id)
+        );
+    }
+}
diff --git a/src/main/webapp/app/entities/template/template-dialog.component.html b/src/main/webapp/app/entities/template/template-dialog.component.html
new file mode 100644
index 0000000..493179f
--- /dev/null
+++ b/src/main/webapp/app/entities/template/template-dialog.component.html
@@ -0,0 +1,85 @@
+<form name="editForm" role="form" novalidate (ngSubmit)="save()" #editForm="ngForm">
+
+    <div class="modal-header">
+        <h4 class="modal-title" id="myTemplateLabel">Create or edit a Template</h4>
+        <button type="button" class="close" data-dismiss="modal" aria-hidden="true"
+                (click)="clear()">&times;</button>
+    </div>
+    <div class="modal-body">
+        <jhi-alert-error></jhi-alert-error>
+        <div class="form-group" [hidden]="!template.id">
+            <label for="id">ID</label>
+            <input type="text" class="form-control" id="id" name="id"
+                   [(ngModel)]="template.id" readonly />
+        </div>
+        <div class="form-group">
+            <label class="form-control-label" for="field_montant">Montant</label>
+            <input type="number" class="form-control" name="montant" id="field_montant"
+                [(ngModel)]="template.montant" required/>
+            <div [hidden]="!(editForm.controls.montant?.dirty && editForm.controls.montant?.invalid)">
+                <small class="form-text text-danger"
+                   [hidden]="!editForm.controls.montant?.errors?.required">
+                   This field is required.
+                </small>
+                <small class="form-text text-danger"
+                    [hidden]="!editForm.controls.montant?.errors?.number">
+                    This field should be a number.
+                </small>
+            </div>
+        </div>
+        <div class="form-group">
+            <label class="form-control-label" for="field_label">Label</label>
+            <input type="text" class="form-control" name="label" id="field_label"
+                [(ngModel)]="template.label" required/>
+            <div [hidden]="!(editForm.controls.label?.dirty && editForm.controls.label?.invalid)">
+                <small class="form-text text-danger"
+                   [hidden]="!editForm.controls.label?.errors?.required">
+                   This field is required.
+                </small>
+            </div>
+        </div>
+        <div class="form-group">
+            <label class="form-control-label" for="field_justification">Justification</label>
+            <input type="text" class="form-control" name="justification" id="field_justification"
+                [(ngModel)]="template.justification" required/>
+            <div [hidden]="!(editForm.controls.justification?.dirty && editForm.controls.justification?.invalid)">
+                <small class="form-text text-danger"
+                   [hidden]="!editForm.controls.justification?.errors?.required">
+                   This field is required.
+                </small>
+            </div>
+        </div>
+        <div class="form-group">
+            <label class="form-control-label" for="field_comment">Comment</label>
+            <input type="text" class="form-control" name="comment" id="field_comment"
+                [(ngModel)]="template.comment" />
+        </div>
+        <div class="form-group">
+            <label class="form-control-label" for="field_provider">Provider</label>
+            <input type="text" class="form-control" name="provider" id="field_provider"
+                [(ngModel)]="template.provider" required/>
+            <div [hidden]="!(editForm.controls.provider?.dirty && editForm.controls.provider?.invalid)">
+                <small class="form-text text-danger"
+                   [hidden]="!editForm.controls.provider?.errors?.required">
+                   This field is required.
+                </small>
+            </div>
+        </div>
+
+        <div class="form-group">
+            <label class="form-control-label" for="field_employee">Employee</label>
+            <select class="form-control" id="field_employee" name="employee" [(ngModel)]="template.employee">
+                <option [ngValue]="null"></option>
+                <option [ngValue]="employeeOption.id === template.employee?.id ? template.employee : employeeOption" *ngFor="let employeeOption of employees; trackBy: trackEmployeeById">{{employeeOption.id}}</option>
+            </select>
+        </div>
+    </div>
+    <div class="modal-footer">
+        <button type="button" class="btn btn-secondary" data-dismiss="modal" (click)="clear()">
+            <span class="fa fa-ban"></span>&nbsp;<span>Cancel</span>
+        </button>
+        <button type="submit" [disabled]="editForm.form.invalid || isSaving" class="btn btn-primary">
+            <span class="fa fa-save"></span>&nbsp;<span>Save</span>
+        </button>
+    </div>
+</form>
diff --git a/src/main/webapp/app/entities/template/template-dialog.component.ts b/src/main/webapp/app/entities/template/template-dialog.component.ts
new file mode 100644
index 0000000..36bd496
--- /dev/null
+++ b/src/main/webapp/app/entities/template/template-dialog.component.ts
@@ -0,0 +1,118 @@
+import { Component, OnInit, OnDestroy } from '@angular/core';
+import { ActivatedRoute } from '@angular/router';
+import { HttpResponse, HttpErrorResponse } from '@angular/common/http';
+
+import { Observable } from 'rxjs/Observable';
+import { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';
+import { JhiEventManager, JhiAlertService } from 'ng-jhipster';
+
+import { Template } from './template.model';
+import { TemplatePopupService } from './template-popup.service';
+import { TemplateService } from './template.service';
+import { Employee, EmployeeService } from '../employee';
+
+@Component({
+    selector: 'jhi-template-dialog',
+    templateUrl: './template-dialog.component.html'
+})
+export class TemplateDialogComponent implements OnInit {
+
+    template: Template;
+    isSaving: boolean;
+
+    employees: Employee[];
+
+    constructor(
+        public activeModal: NgbActiveModal,
+        private jhiAlertService: JhiAlertService,
+        private templateService: TemplateService,
+        private employeeService: EmployeeService,
+        private eventManager: JhiEventManager
+    ) {
+    }
+
+    ngOnInit() {
+        this.isSaving = false;
+        this.employeeService
+            .query({filter: 'template(id)-is-null'})
+            .subscribe((res: HttpResponse<Employee[]>) => {
+                if (!this.template.employee || !this.template.employee.id) {
+                    this.employees = res.body;
+                } else {
+                    this.employeeService
+                        .find(this.template.employee.id)
+                        .subscribe((subRes: HttpResponse<Employee>) => {
+                            this.employees = [subRes.body].concat(res.body);
+                        }, (subRes: HttpErrorResponse) => this.onError(subRes.message));
+                }
+            }, (res: HttpErrorResponse) => this.onError(res.message));
+    }
+
+    clear() {
+        this.activeModal.dismiss('cancel');
+    }
+
+    save() {
+        this.isSaving = true;
+        if (this.template.id !== undefined) {
+            this.subscribeToSaveResponse(
+                this.templateService.update(this.template));
+        } else {
+            this.subscribeToSaveResponse(
+                this.templateService.create(this.template));
+        }
+    }
+
+    private subscribeToSaveResponse(result: Observable<HttpResponse<Template>>) {
+        result.subscribe((res: HttpResponse<Template>) =>
+            this.onSaveSuccess(res.body), (res: HttpErrorResponse) => this.onSaveError());
+    }
+
+    private onSaveSuccess(result: Template) {
+        this.eventManager.broadcast({ name: 'templateListModification', content: 'OK'});
+        this.isSaving = false;
+        this.activeModal.dismiss(result);
+    }
+
+    private onSaveError() {
+        this.isSaving = false;
+    }
+
+    private onError(error: any) {
+        this.jhiAlertService.error(error.message, null, null);
+    }
+
+    trackEmployeeById(index: number, item: Employee) {
+        return item.id;
+    }
+}
+
+@Component({
+    selector: 'jhi-template-popup',
+    template: ''
+})
+export class TemplatePopupComponent implements OnInit, OnDestroy {
+
+    routeSub: any;
+
+    constructor(
+        private route: ActivatedRoute,
+        private templatePopupService: TemplatePopupService
+    ) {}
+
+    ngOnInit() {
+        this.routeSub = this.route.params.subscribe((params) => {
+            if ( params['id'] ) {
+                this.templatePopupService
+                    .open(TemplateDialogComponent as Component, params['id']);
+            } else {
+                this.templatePopupService
+                    .open(TemplateDialogComponent as Component);
+            }
+        });
+    }
+
+    ngOnDestroy() {
+        this.routeSub.unsubscribe();
+    }
+}
diff --git a/src/main/webapp/app/entities/template/template-popup.service.ts b/src/main/webapp/app/entities/template/template-popup.service.ts
new file mode 100644
index 0000000..bc693c5
--- /dev/null
+++ b/src/main/webapp/app/entities/template/template-popup.service.ts
@@ -0,0 +1,57 @@
+import { Injectable, Component } from '@angular/core';
+import { Router } from '@angular/router';
+import { NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';
+import { HttpResponse } from '@angular/common/http';
+import { Template } from './template.model';
+import { TemplateService } from './template.service';
+
+@Injectable()
+export class TemplatePopupService {
+    private ngbModalRef: NgbModalRef;
+
+    constructor(
+        private modalService: NgbModal,
+        private router: Router,
+        private templateService: TemplateService
+
+    ) {
+        this.ngbModalRef = null;
+    }
+
+    open(component: Component, id?: number | any): Promise<NgbModalRef> {
+        return new Promise<NgbModalRef>((resolve, reject) => {
+            const isOpen = this.ngbModalRef !== null;
+            if (isOpen) {
+                resolve(this.ngbModalRef);
+            }
+
+            if (id) {
+                this.templateService.find(id)
+                    .subscribe((templateResponse: HttpResponse<Template>) => {
+                        const template: Template = templateResponse.body;
+                        this.ngbModalRef = this.templateModalRef(component, template);
+                        resolve(this.ngbModalRef);
+                    });
+            } else {
+                // setTimeout used as a workaround for getting ExpressionChangedAfterItHasBeenCheckedError
+                setTimeout(() => {
+                    this.ngbModalRef = this.templateModalRef(component, new Template());
+                    resolve(this.ngbModalRef);
+                }, 0);
+            }
+        });
+    }
+
+    templateModalRef(component: Component, template: Template): NgbModalRef {
+        const modalRef = this.modalService.open(component, { size: 'lg', backdrop: 'static'});
+        modalRef.componentInstance.template = template;
+        modalRef.result.then((result) => {
+            this.router.navigate([{ outlets: { popup: null }}], { replaceUrl: true, queryParamsHandling: 'merge' });
+            this.ngbModalRef = null;
+        }, (reason) => {
+            this.router.navigate([{ outlets: { popup: null }}], { replaceUrl: true, queryParamsHandling: 'merge' });
+            this.ngbModalRef = null;
+        });
+        return modalRef;
+    }
+}
diff --git a/src/main/webapp/app/entities/template/template.component.html b/src/main/webapp/app/entities/template/template.component.html
new file mode 100644
index 0000000..99bbf92
--- /dev/null
+++ b/src/main/webapp/app/entities/template/template.component.html
@@ -0,0 +1,72 @@
+<div>
+    <h2>
+        <span>Templates</span>
+        <button class="btn btn-primary float-right jh-create-entity create-template" [routerLink]="['/', { outlets: { popup: ['template-new'] } }]">
+            <span class="fa fa-plus"></span>
+            <span >
+            Create new Template
+            </span>
+        </button>
+    </h2>
+    <jhi-alert></jhi-alert>
+    <div class="row">
+    </div>
+    <br/>
+    <div class="table-responsive" *ngIf="templates">
+        <table class="table table-striped">
+            <thead>
+            <tr>
+            <th><span>ID</span></th>
+            <th><span>Montant</span></th>
+            <th><span>Label</span></th>
+            <th><span>Justification</span></th>
+            <th><span>Comment</span></th>
+            <th><span>Provider</span></th>
+            <th><span>Employee</span></th>
+            <th></th>
+            </tr>
+            </thead>
+            <tbody>
+            <tr *ngFor="let template of templates ;trackBy: trackId">
+                <td><a [routerLink]="['../template', template.id ]">{{template.id}}</a></td>
+                <td>{{template.montant}}</td>
+                <td>{{template.label}}</td>
+                <td>{{template.justification}}</td>
+                <td>{{template.comment}}</td>
+                <td>{{template.provider}}</td>
+                <td>
+                    <div *ngIf="template.employee">
+                        <a [routerLink]="['../employee', template.employee?.id ]" >{{template.employee?.id}}</a>
+                    </div>
+                </td>
+                <td class="text-right">
+                    <div class="btn-group flex-btn-group-container">
+                        <button type="submit"
+                                [routerLink]="['../template', template.id ]"
+                                class="btn btn-info btn-sm">
+                            <span class="fa fa-eye"></span>
+                            <span class="d-none d-md-inline">View</span>
+                        </button>
+                        <button type="submit"
+                                [routerLink]="['/', { outlets: { popup: 'template/'+ template.id + '/edit'} }]"
+                                replaceUrl="true"
+                                queryParamsHandling="merge"
+                                class="btn btn-primary btn-sm">
+                            <span class="fa fa-pencil"></span>
+                            <span class="d-none d-md-inline">Edit</span>
+                        </button>
+                        <button type="submit"
+                                [routerLink]="['/', { outlets: { popup: 'template/'+ template.id + '/delete'} }]"
+                                replaceUrl="true"
+                                queryParamsHandling="merge"
+                                class="btn btn-danger btn-sm">
+                            <span class="fa fa-remove"></span>
+                            <span class="d-none d-md-inline">Delete</span>
+                        </button>
+                    </div>
+                </td>
+            </tr>
+            </tbody>
+        </table>
+    </div>
+</div>
diff --git a/src/main/webapp/app/entities/template/template.component.ts b/src/main/webapp/app/entities/template/template.component.ts
new file mode 100644
index 0000000..61af5f3
--- /dev/null
+++ b/src/main/webapp/app/entities/template/template.component.ts
@@ -0,0 +1,57 @@
+import { Component, OnInit, OnDestroy } from '@angular/core';
+import { HttpResponse, HttpErrorResponse } from '@angular/common/http';
+import { Subscription } from 'rxjs/Subscription';
+import { JhiEventManager, JhiAlertService } from 'ng-jhipster';
+
+import { Template } from './template.model';
+import { TemplateService } from './template.service';
+import { Principal } from '../../shared';
+
+@Component({
+    selector: 'jhi-template',
+    templateUrl: './template.component.html'
+})
+export class TemplateComponent implements OnInit, OnDestroy {
+templates: Template[];
+    currentAccount: any;
+    eventSubscriber: Subscription;
+
+    constructor(
+        private templateService: TemplateService,
+        private jhiAlertService: JhiAlertService,
+        private eventManager: JhiEventManager,
+        private principal: Principal
+    ) {
+    }
+
+    loadAll() {
+        this.templateService.query().subscribe(
+            (res: HttpResponse<Template[]>) => {
+                this.templates = res.body;
+            },
+            (res: HttpErrorResponse) => this.onError(res.message)
+        );
+    }
+    ngOnInit() {
+        this.loadAll();
+        this.principal.identity().then((account) => {
+            this.currentAccount = account;
+        });
+        this.registerChangeInTemplates();
+    }
+
+    ngOnDestroy() {
+        this.eventManager.destroy(this.eventSubscriber);
+    }
+
+    trackId(index: number, item: Template) {
+        return item.id;
+    }
+    registerChangeInTemplates() {
+        this.eventSubscriber = this.eventManager.subscribe('templateListModification', (response) => this.loadAll());
+    }
+
+    private onError(error) {
+        this.jhiAlertService.error(error.message, null, null);
+    }
+}
diff --git a/src/main/webapp/app/entities/template/template.model.ts b/src/main/webapp/app/entities/template/template.model.ts
new file mode 100644
index 0000000..878de22
--- /dev/null
+++ b/src/main/webapp/app/entities/template/template.model.ts
@@ -0,0 +1,15 @@
+import { BaseEntity } from './../../shared';
+
+export class Template implements BaseEntity {
+    constructor(
+        public id?: number,
+        public montant?: number,
+        public label?: string,
+        public justification?: string,
+        public comment?: string,
+        public provider?: string,
+        public employee?: BaseEntity,
+        public categories?: BaseEntity[],
+    ) {
+    }
+}
diff --git a/src/main/webapp/app/entities/template/template.module.ts b/src/main/webapp/app/entities/template/template.module.ts
new file mode 100644
index 0000000..0bce04a
--- /dev/null
+++ b/src/main/webapp/app/entities/template/template.module.ts
@@ -0,0 +1,49 @@
+import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';
+import { RouterModule } from '@angular/router';
+
+import { OniryxHackathonSharedModule } from '../../shared';
+import {
+    TemplateService,
+    TemplatePopupService,
+    TemplateComponent,
+    TemplateDetailComponent,
+    TemplateDialogComponent,
+    TemplatePopupComponent,
+    TemplateDeletePopupComponent,
+    TemplateDeleteDialogComponent,
+    templateRoute,
+    templatePopupRoute,
+} from './';
+
+const ENTITY_STATES = [
+    ...templateRoute,
+    ...templatePopupRoute,
+];
+
+@NgModule({
+    imports: [
+        OniryxHackathonSharedModule,
+        RouterModule.forChild(ENTITY_STATES)
+    ],
+    declarations: [
+        TemplateComponent,
+        TemplateDetailComponent,
+        TemplateDialogComponent,
+        TemplateDeleteDialogComponent,
+        TemplatePopupComponent,
+        TemplateDeletePopupComponent,
+    ],
+    entryComponents: [
+        TemplateComponent,
+        TemplateDialogComponent,
+        TemplatePopupComponent,
+        TemplateDeleteDialogComponent,
+        TemplateDeletePopupComponent,
+    ],
+    providers: [
+        TemplateService,
+        TemplatePopupService,
+    ],
+    schemas: [CUSTOM_ELEMENTS_SCHEMA]
+})
+export class OniryxHackathonTemplateModule {}
diff --git a/src/main/webapp/app/entities/template/template.route.ts b/src/main/webapp/app/entities/template/template.route.ts
new file mode 100644
index 0000000..a5ed9bb
--- /dev/null
+++ b/src/main/webapp/app/entities/template/template.route.ts
@@ -0,0 +1,60 @@
+import { Routes } from '@angular/router';
+
+import { UserRouteAccessService } from '../../shared';
+import { TemplateComponent } from './template.component';
+import { TemplateDetailComponent } from './template-detail.component';
+import { TemplatePopupComponent } from './template-dialog.component';
+import { TemplateDeletePopupComponent } from './template-delete-dialog.component';
+
+export const templateRoute: Routes = [
+    {
+        path: 'template',
+        component: TemplateComponent,
+        data: {
+            authorities: ['ROLE_USER'],
+            pageTitle: 'Templates'
+        },
+        canActivate: [UserRouteAccessService]
+    }, {
+        path: 'template/:id',
+        component: TemplateDetailComponent,
+        data: {
+            authorities: ['ROLE_USER'],
+            pageTitle: 'Templates'
+        },
+        canActivate: [UserRouteAccessService]
+    }
+];
+
+export const templatePopupRoute: Routes = [
+    {
+        path: 'template-new',
+        component: TemplatePopupComponent,
+        data: {
+            authorities: ['ROLE_USER'],
+            pageTitle: 'Templates'
+        },
+        canActivate: [UserRouteAccessService],
+        outlet: 'popup'
+    },
+    {
+        path: 'template/:id/edit',
+        component: TemplatePopupComponent,
+        data: {
+            authorities: ['ROLE_USER'],
+            pageTitle: 'Templates'
+        },
+        canActivate: [UserRouteAccessService],
+        outlet: 'popup'
+    },
+    {
+        path: 'template/:id/delete',
+        component: TemplateDeletePopupComponent,
+        data: {
+            authorities: ['ROLE_USER'],
+            pageTitle: 'Templates'
+        },
+        canActivate: [UserRouteAccessService],
+        outlet: 'popup'
+    }
+];
diff --git a/src/main/webapp/app/entities/template/template.service.ts b/src/main/webapp/app/entities/template/template.service.ts
new file mode 100644
index 0000000..259f3cc
--- /dev/null
+++ b/src/main/webapp/app/entities/template/template.service.ts
@@ -0,0 +1,74 @@
+import { Injectable } from '@angular/core';
+import { HttpClient, HttpResponse } from '@angular/common/http';
+import { Observable } from 'rxjs/Observable';
+import { SERVER_API_URL } from '../../app.constants';
+
+import { Template } from './template.model';
+import { createRequestOption } from '../../shared';
+
+export type EntityResponseType = HttpResponse<Template>;
+
+@Injectable()
+export class TemplateService {
+
+    private resourceUrl =  SERVER_API_URL + 'api/templates';
+
+    constructor(private http: HttpClient) { }
+
+    create(template: Template): Observable<EntityResponseType> {
+        const copy = this.convert(template);
+        return this.http.post<Template>(this.resourceUrl, copy, { observe: 'response' })
+            .map((res: EntityResponseType) => this.convertResponse(res));
+    }
+
+    update(template: Template): Observable<EntityResponseType> {
+        const copy = this.convert(template);
+        return this.http.put<Template>(this.resourceUrl, copy, { observe: 'response' })
+            .map((res: EntityResponseType) => this.convertResponse(res));
+    }
+
+    find(id: number): Observable<EntityResponseType> {
+        return this.http.get<Template>(`${this.resourceUrl}/${id}`, { observe: 'response'})
+            .map((res: EntityResponseType) => this.convertResponse(res));
+    }
+
+    query(req?: any): Observable<HttpResponse<Template[]>> {
+        const options = createRequestOption(req);
+        return this.http.get<Template[]>(this.resourceUrl, { params: options, observe: 'response' })
+            .map((res: HttpResponse<Template[]>) => this.convertArrayResponse(res));
+    }
+
+    delete(id: number): Observable<HttpResponse<any>> {
+        return this.http.delete<any>(`${this.resourceUrl}/${id}`, { observe: 'response'});
+    }
+
+    private convertResponse(res: EntityResponseType): EntityResponseType {
+        const body: Template = this.convertItemFromServer(res.body);
+        return res.clone({body});
+    }
+
+    private convertArrayResponse(res: HttpResponse<Template[]>): HttpResponse<Template[]> {
+        const jsonResponse: Template[] = res.body;
+        const body: Template[] = [];
+        for (let i = 0; i < jsonResponse.length; i++) {
+            body.push(this.convertItemFromServer(jsonResponse[i]));
+        }
+        return res.clone({body});
+    }
+
+    /**
+     * Convert a returned JSON object to Template.
+     */
+    private convertItemFromServer(template: Template): Template {
+        const copy: Template = Object.assign({}, template);
+        return copy;
+    }
+
+    /**
+     * Convert a Template to a JSON which can be sent to the server.
+     */
+    private convert(template: Template): Template {
+        const copy: Template = Object.assign({}, template);
+        return copy;
+    }
+}
diff --git a/src/main/webapp/app/layouts/navbar/navbar.component.html b/src/main/webapp/app/layouts/navbar/navbar.component.html
index f0a6f1c..eed4bfd 100644
--- a/src/main/webapp/app/layouts/navbar/navbar.component.html
+++ b/src/main/webapp/app/layouts/navbar/navbar.component.html
@@ -29,6 +29,30 @@
                     </span>
                 </a>
                 <ul class="dropdown-menu" ngbDropdownMenu>
+                    <li>
+                        <a class="dropdown-item" routerLink="template" routerLinkActive="active" [routerLinkActiveOptions]="{ exact: true }" (click)="collapseNavbar()">
+                            <i class="fa fa-fw fa-asterisk" aria-hidden="true"></i>
+                            <span>Template</span>
+                        </a>
+                    </li>
+                    <li>
+                        <a class="dropdown-item" routerLink="category" routerLinkActive="active" [routerLinkActiveOptions]="{ exact: true }" (click)="collapseNavbar()">
+                            <i class="fa fa-fw fa-asterisk" aria-hidden="true"></i>
+                            <span>Category</span>
+                        </a>
+                    </li>
+                    <li>
+                        <a class="dropdown-item" routerLink="employee" routerLinkActive="active" [routerLinkActiveOptions]="{ exact: true }" (click)="collapseNavbar()">
+                            <i class="fa fa-fw fa-asterisk" aria-hidden="true"></i>
+                            <span>Employee</span>
+                        </a>
+                    </li>
+                    <li>
+                        <a class="dropdown-item" routerLink="expense-note" routerLinkActive="active" [routerLinkActiveOptions]="{ exact: true }" (click)="collapseNavbar()">
+                            <i class="fa fa-fw fa-asterisk" aria-hidden="true"></i>
+                            <span>Expense Note</span>
+                        </a>
+                    </li>
                     <!-- jhipster-needle-add-entity-to-menu - JHipster will add entities to the menu here -->
                 </ul>
             </li>
diff --git a/src/test/java/be/oniryx/web/rest/CategoryResourceIntTest.java b/src/test/java/be/oniryx/web/rest/CategoryResourceIntTest.java
new file mode 100644
index 0000000..1bb3df8
--- /dev/null
+++ b/src/test/java/be/oniryx/web/rest/CategoryResourceIntTest.java
@@ -0,0 +1,257 @@
+package be.oniryx.web.rest;
+
+import be.oniryx.OniryxHackathonApp;
+
+import be.oniryx.domain.Category;
+import be.oniryx.repository.CategoryRepository;
+import be.oniryx.web.rest.errors.ExceptionTranslator;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.MockitoAnnotations;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.data.web.PageableHandlerMethodArgumentResolver;
+import org.springframework.http.MediaType;
+import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
+import org.springframework.test.context.junit4.SpringRunner;
+import org.springframework.test.web.servlet.MockMvc;
+import org.springframework.test.web.servlet.setup.MockMvcBuilders;
+import org.springframework.transaction.annotation.Transactional;
+
+import javax.persistence.EntityManager;
+import java.util.List;
+
+import static be.oniryx.web.rest.TestUtil.createFormattingConversionService;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.hamcrest.Matchers.hasItem;
+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
+
+/**
+ * Test class for the CategoryResource REST controller.
+ *
+ * @see CategoryResource
+ */
+@RunWith(SpringRunner.class)
+@SpringBootTest(classes = OniryxHackathonApp.class)
+public class CategoryResourceIntTest {
+
+    private static final String DEFAULT_LABEL = "AAAAAAAAAA";
+    private static final String UPDATED_LABEL = "BBBBBBBBBB";
+
+    @Autowired
+    private CategoryRepository categoryRepository;
+
+    @Autowired
+    private MappingJackson2HttpMessageConverter jacksonMessageConverter;
+
+    @Autowired
+    private PageableHandlerMethodArgumentResolver pageableArgumentResolver;
+
+    @Autowired
+    private ExceptionTranslator exceptionTranslator;
+
+    @Autowired
+    private EntityManager em;
+
+    private MockMvc restCategoryMockMvc;
+
+    private Category category;
+
+    @Before
+    public void setup() {
+        MockitoAnnotations.initMocks(this);
+        final CategoryResource categoryResource = new CategoryResource(categoryRepository);
+        this.restCategoryMockMvc = MockMvcBuilders.standaloneSetup(categoryResource)
+            .setCustomArgumentResolvers(pageableArgumentResolver)
+            .setControllerAdvice(exceptionTranslator)
+            .setConversionService(createFormattingConversionService())
+            .setMessageConverters(jacksonMessageConverter).build();
+    }
+
+    /**
+     * Create an entity for this test.
+     *
+     * This is a static method, as tests for other entities might also need it,
+     * if they test an entity which requires the current entity.
+     */
+    public static Category createEntity(EntityManager em) {
+        Category category = new Category()
+            .label(DEFAULT_LABEL);
+        return category;
+    }
+
+    @Before
+    public void initTest() {
+        category = createEntity(em);
+    }
+
+    @Test
+    @Transactional
+    public void createCategory() throws Exception {
+        int databaseSizeBeforeCreate = categoryRepository.findAll().size();
+
+        // Create the Category
+        restCategoryMockMvc.perform(post("/api/categories")
+            .contentType(TestUtil.APPLICATION_JSON_UTF8)
+            .content(TestUtil.convertObjectToJsonBytes(category)))
+            .andExpect(status().isCreated());
+
+        // Validate the Category in the database
+        List<Category> categoryList = categoryRepository.findAll();
+        assertThat(categoryList).hasSize(databaseSizeBeforeCreate + 1);
+        Category testCategory = categoryList.get(categoryList.size() - 1);
+        assertThat(testCategory.getLabel()).isEqualTo(DEFAULT_LABEL);
+    }
+
+    @Test
+    @Transactional
+    public void createCategoryWithExistingId() throws Exception {
+        int databaseSizeBeforeCreate = categoryRepository.findAll().size();
+
+        // Create the Category with an existing ID
+        category.setId(1L);
+
+        // An entity with an existing ID cannot be created, so this API call must fail
+        restCategoryMockMvc.perform(post("/api/categories")
+            .contentType(TestUtil.APPLICATION_JSON_UTF8)
+            .content(TestUtil.convertObjectToJsonBytes(category)))
+            .andExpect(status().isBadRequest());
+
+        // Validate the Category in the database
+        List<Category> categoryList = categoryRepository.findAll();
+        assertThat(categoryList).hasSize(databaseSizeBeforeCreate);
+    }
+
+    @Test
+    @Transactional
+    public void checkLabelIsRequired() throws Exception {
+        int databaseSizeBeforeTest = categoryRepository.findAll().size();
+        // set the field null
+        category.setLabel(null);
+
+        // Create the Category, which fails.
+
+        restCategoryMockMvc.perform(post("/api/categories")
+            .contentType(TestUtil.APPLICATION_JSON_UTF8)
+            .content(TestUtil.convertObjectToJsonBytes(category)))
+            .andExpect(status().isBadRequest());
+
+        List<Category> categoryList = categoryRepository.findAll();
+        assertThat(categoryList).hasSize(databaseSizeBeforeTest);
+    }
+
+    @Test
+    @Transactional
+    public void getAllCategories() throws Exception {
+        // Initialize the database
+        categoryRepository.saveAndFlush(category);
+
+        // Get all the categoryList
+        restCategoryMockMvc.perform(get("/api/categories?sort=id,desc"))
+            .andExpect(status().isOk())
+            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
+            .andExpect(jsonPath("$.[*].id").value(hasItem(category.getId().intValue())))
+            .andExpect(jsonPath("$.[*].label").value(hasItem(DEFAULT_LABEL.toString())));
+    }
+
+    @Test
+    @Transactional
+    public void getCategory() throws Exception {
+        // Initialize the database
+        categoryRepository.saveAndFlush(category);
+
+        // Get the category
+        restCategoryMockMvc.perform(get("/api/categories/{id}", category.getId()))
+            .andExpect(status().isOk())
+            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
+            .andExpect(jsonPath("$.id").value(category.getId().intValue()))
+            .andExpect(jsonPath("$.label").value(DEFAULT_LABEL.toString()));
+    }
+
+    @Test
+    @Transactional
+    public void getNonExistingCategory() throws Exception {
+        // Get the category
+        restCategoryMockMvc.perform(get("/api/categories/{id}", Long.MAX_VALUE))
+            .andExpect(status().isNotFound());
+    }
+
+    @Test
+    @Transactional
+    public void updateCategory() throws Exception {
+        // Initialize the database
+        categoryRepository.saveAndFlush(category);
+        int databaseSizeBeforeUpdate = categoryRepository.findAll().size();
+
+        // Update the category
+        Category updatedCategory = categoryRepository.findOne(category.getId());
+        // Disconnect from session so that the updates on updatedCategory are not directly saved in db
+        em.detach(updatedCategory);
+        updatedCategory
+            .label(UPDATED_LABEL);
+
+        restCategoryMockMvc.perform(put("/api/categories")
+            .contentType(TestUtil.APPLICATION_JSON_UTF8)
+            .content(TestUtil.convertObjectToJsonBytes(updatedCategory)))
+            .andExpect(status().isOk());
+
+        // Validate the Category in the database
+        List<Category> categoryList = categoryRepository.findAll();
+        assertThat(categoryList).hasSize(databaseSizeBeforeUpdate);
+        Category testCategory = categoryList.get(categoryList.size() - 1);
+        assertThat(testCategory.getLabel()).isEqualTo(UPDATED_LABEL);
+    }
+
+    @Test
+    @Transactional
+    public void updateNonExistingCategory() throws Exception {
+        int databaseSizeBeforeUpdate = categoryRepository.findAll().size();
+
+        // Create the Category
+
+        // If the entity doesn't have an ID, it will be created instead of just being updated
+        restCategoryMockMvc.perform(put("/api/categories")
+            .contentType(TestUtil.APPLICATION_JSON_UTF8)
+            .content(TestUtil.convertObjectToJsonBytes(category)))
+            .andExpect(status().isCreated());
+
+        // Validate the Category in the database
+        List<Category> categoryList = categoryRepository.findAll();
+        assertThat(categoryList).hasSize(databaseSizeBeforeUpdate + 1);
+    }
+
+    @Test
+    @Transactional
+    public void deleteCategory() throws Exception {
+        // Initialize the database
+        categoryRepository.saveAndFlush(category);
+        int databaseSizeBeforeDelete = categoryRepository.findAll().size();
+
+        // Get the category
+        restCategoryMockMvc.perform(delete("/api/categories/{id}", category.getId())
+            .accept(TestUtil.APPLICATION_JSON_UTF8))
+            .andExpect(status().isOk());
+
+        // Validate the database is empty
+        List<Category> categoryList = categoryRepository.findAll();
+        assertThat(categoryList).hasSize(databaseSizeBeforeDelete - 1);
+    }
+
+    @Test
+    @Transactional
+    public void equalsVerifier() throws Exception {
+        TestUtil.equalsVerifier(Category.class);
+        Category category1 = new Category();
+        category1.setId(1L);
+        Category category2 = new Category();
+        category2.setId(category1.getId());
+        assertThat(category1).isEqualTo(category2);
+        category2.setId(2L);
+        assertThat(category1).isNotEqualTo(category2);
+        category1.setId(null);
+        assertThat(category1).isNotEqualTo(category2);
+    }
+}
diff --git a/src/test/java/be/oniryx/web/rest/EmployeeResourceIntTest.java b/src/test/java/be/oniryx/web/rest/EmployeeResourceIntTest.java
new file mode 100644
index 0000000..24c7a59
--- /dev/null
+++ b/src/test/java/be/oniryx/web/rest/EmployeeResourceIntTest.java
@@ -0,0 +1,257 @@
+package be.oniryx.web.rest;
+
+import be.oniryx.OniryxHackathonApp;
+
+import be.oniryx.domain.Employee;
+import be.oniryx.repository.EmployeeRepository;
+import be.oniryx.web.rest.errors.ExceptionTranslator;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.MockitoAnnotations;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.data.web.PageableHandlerMethodArgumentResolver;
+import org.springframework.http.MediaType;
+import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
+import org.springframework.test.context.junit4.SpringRunner;
+import org.springframework.test.web.servlet.MockMvc;
+import org.springframework.test.web.servlet.setup.MockMvcBuilders;
+import org.springframework.transaction.annotation.Transactional;
+
+import javax.persistence.EntityManager;
+import java.util.List;
+
+import static be.oniryx.web.rest.TestUtil.createFormattingConversionService;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.hamcrest.Matchers.hasItem;
+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
+
+/**
+ * Test class for the EmployeeResource REST controller.
+ *
+ * @see EmployeeResource
+ */
+@RunWith(SpringRunner.class)
+@SpringBootTest(classes = OniryxHackathonApp.class)
+public class EmployeeResourceIntTest {
+
+    private static final String DEFAULT_TRIGRAM = "AAAAAAAAAA";
+    private static final String UPDATED_TRIGRAM = "BBBBBBBBBB";
+
+    @Autowired
+    private EmployeeRepository employeeRepository;
+
+    @Autowired
+    private MappingJackson2HttpMessageConverter jacksonMessageConverter;
+
+    @Autowired
+    private PageableHandlerMethodArgumentResolver pageableArgumentResolver;
+
+    @Autowired
+    private ExceptionTranslator exceptionTranslator;
+
+    @Autowired
+    private EntityManager em;
+
+    private MockMvc restEmployeeMockMvc;
+
+    private Employee employee;
+
+    @Before
+    public void setup() {
+        MockitoAnnotations.initMocks(this);
+        final EmployeeResource employeeResource = new EmployeeResource(employeeRepository);
+        this.restEmployeeMockMvc = MockMvcBuilders.standaloneSetup(employeeResource)
+            .setCustomArgumentResolvers(pageableArgumentResolver)
+            .setControllerAdvice(exceptionTranslator)
+            .setConversionService(createFormattingConversionService())
+            .setMessageConverters(jacksonMessageConverter).build();
+    }
+
+    /**
+     * Create an entity for this test.
+     *
+     * This is a static method, as tests for other entities might also need it,
+     * if they test an entity which requires the current entity.
+     */
+    public static Employee createEntity(EntityManager em) {
+        Employee employee = new Employee()
+            .trigram(DEFAULT_TRIGRAM);
+        return employee;
+    }
+
+    @Before
+    public void initTest() {
+        employee = createEntity(em);
+    }
+
+    @Test
+    @Transactional
+    public void createEmployee() throws Exception {
+        int databaseSizeBeforeCreate = employeeRepository.findAll().size();
+
+        // Create the Employee
+        restEmployeeMockMvc.perform(post("/api/employees")
+            .contentType(TestUtil.APPLICATION_JSON_UTF8)
+            .content(TestUtil.convertObjectToJsonBytes(employee)))
+            .andExpect(status().isCreated());
+
+        // Validate the Employee in the database
+        List<Employee> employeeList = employeeRepository.findAll();
+        assertThat(employeeList).hasSize(databaseSizeBeforeCreate + 1);
+        Employee testEmployee = employeeList.get(employeeList.size() - 1);
+        assertThat(testEmployee.getTrigram()).isEqualTo(DEFAULT_TRIGRAM);
+    }
+
+    @Test
+    @Transactional
+    public void createEmployeeWithExistingId() throws Exception {
+        int databaseSizeBeforeCreate = employeeRepository.findAll().size();
+
+        // Create the Employee with an existing ID
+        employee.setId(1L);
+
+        // An entity with an existing ID cannot be created, so this API call must fail
+        restEmployeeMockMvc.perform(post("/api/employees")
+            .contentType(TestUtil.APPLICATION_JSON_UTF8)
+            .content(TestUtil.convertObjectToJsonBytes(employee)))
+            .andExpect(status().isBadRequest());
+
+        // Validate the Employee in the database
+        List<Employee> employeeList = employeeRepository.findAll();
+        assertThat(employeeList).hasSize(databaseSizeBeforeCreate);
+    }
+
+    @Test
+    @Transactional
+    public void checkTrigramIsRequired() throws Exception {
+        int databaseSizeBeforeTest = employeeRepository.findAll().size();
+        // set the field null
+        employee.setTrigram(null);
+
+        // Create the Employee, which fails.
+
+        restEmployeeMockMvc.perform(post("/api/employees")
+            .contentType(TestUtil.APPLICATION_JSON_UTF8)
+            .content(TestUtil.convertObjectToJsonBytes(employee)))
+            .andExpect(status().isBadRequest());
+
+        List<Employee> employeeList = employeeRepository.findAll();
+        assertThat(employeeList).hasSize(databaseSizeBeforeTest);
+    }
+
+    @Test
+    @Transactional
+    public void getAllEmployees() throws Exception {
+        // Initialize the database
+        employeeRepository.saveAndFlush(employee);
+
+        // Get all the employeeList
+        restEmployeeMockMvc.perform(get("/api/employees?sort=id,desc"))
+            .andExpect(status().isOk())
+            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
+            .andExpect(jsonPath("$.[*].id").value(hasItem(employee.getId().intValue())))
+            .andExpect(jsonPath("$.[*].trigram").value(hasItem(DEFAULT_TRIGRAM.toString())));
+    }
+
+    @Test
+    @Transactional
+    public void getEmployee() throws Exception {
+        // Initialize the database
+        employeeRepository.saveAndFlush(employee);
+
+        // Get the employee
+        restEmployeeMockMvc.perform(get("/api/employees/{id}", employee.getId()))
+            .andExpect(status().isOk())
+            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
+            .andExpect(jsonPath("$.id").value(employee.getId().intValue()))
+            .andExpect(jsonPath("$.trigram").value(DEFAULT_TRIGRAM.toString()));
+    }
+
+    @Test
+    @Transactional
+    public void getNonExistingEmployee() throws Exception {
+        // Get the employee
+        restEmployeeMockMvc.perform(get("/api/employees/{id}", Long.MAX_VALUE))
+            .andExpect(status().isNotFound());
+    }
+
+    @Test
+    @Transactional
+    public void updateEmployee() throws Exception {
+        // Initialize the database
+        employeeRepository.saveAndFlush(employee);
+        int databaseSizeBeforeUpdate = employeeRepository.findAll().size();
+
+        // Update the employee
+        Employee updatedEmployee = employeeRepository.findOne(employee.getId());
+        // Disconnect from session so that the updates on updatedEmployee are not directly saved in db
+        em.detach(updatedEmployee);
+        updatedEmployee
+            .trigram(UPDATED_TRIGRAM);
+
+        restEmployeeMockMvc.perform(put("/api/employees")
+            .contentType(TestUtil.APPLICATION_JSON_UTF8)
+            .content(TestUtil.convertObjectToJsonBytes(updatedEmployee)))
+            .andExpect(status().isOk());
+
+        // Validate the Employee in the database
+        List<Employee> employeeList = employeeRepository.findAll();
+        assertThat(employeeList).hasSize(databaseSizeBeforeUpdate);
+        Employee testEmployee = employeeList.get(employeeList.size() - 1);
+        assertThat(testEmployee.getTrigram()).isEqualTo(UPDATED_TRIGRAM);
+    }
+
+    @Test
+    @Transactional
+    public void updateNonExistingEmployee() throws Exception {
+        int databaseSizeBeforeUpdate = employeeRepository.findAll().size();
+
+        // Create the Employee
+
+        // If the entity doesn't have an ID, it will be created instead of just being updated
+        restEmployeeMockMvc.perform(put("/api/employees")
+            .contentType(TestUtil.APPLICATION_JSON_UTF8)
+            .content(TestUtil.convertObjectToJsonBytes(employee)))
+            .andExpect(status().isCreated());
+
+        // Validate the Employee in the database
+        List<Employee> employeeList = employeeRepository.findAll();
+        assertThat(employeeList).hasSize(databaseSizeBeforeUpdate + 1);
+    }
+
+    @Test
+    @Transactional
+    public void deleteEmployee() throws Exception {
+        // Initialize the database
+        employeeRepository.saveAndFlush(employee);
+        int databaseSizeBeforeDelete = employeeRepository.findAll().size();
+
+        // Get the employee
+        restEmployeeMockMvc.perform(delete("/api/employees/{id}", employee.getId())
+            .accept(TestUtil.APPLICATION_JSON_UTF8))
+            .andExpect(status().isOk());
+
+        // Validate the database is empty
+        List<Employee> employeeList = employeeRepository.findAll();
+        assertThat(employeeList).hasSize(databaseSizeBeforeDelete - 1);
+    }
+
+    @Test
+    @Transactional
+    public void equalsVerifier() throws Exception {
+        TestUtil.equalsVerifier(Employee.class);
+        Employee employee1 = new Employee();
+        employee1.setId(1L);
+        Employee employee2 = new Employee();
+        employee2.setId(employee1.getId());
+        assertThat(employee1).isEqualTo(employee2);
+        employee2.setId(2L);
+        assertThat(employee1).isNotEqualTo(employee2);
+        employee1.setId(null);
+        assertThat(employee1).isNotEqualTo(employee2);
+    }
+}
diff --git a/src/test/java/be/oniryx/web/rest/ExpenseNoteResourceIntTest.java b/src/test/java/be/oniryx/web/rest/ExpenseNoteResourceIntTest.java
new file mode 100644
index 0000000..07bac77
--- /dev/null
+++ b/src/test/java/be/oniryx/web/rest/ExpenseNoteResourceIntTest.java
@@ -0,0 +1,396 @@
+package be.oniryx.web.rest;
+
+import be.oniryx.OniryxHackathonApp;
+
+import be.oniryx.domain.ExpenseNote;
+import be.oniryx.repository.ExpenseNoteRepository;
+import be.oniryx.web.rest.errors.ExceptionTranslator;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.MockitoAnnotations;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.data.web.PageableHandlerMethodArgumentResolver;
+import org.springframework.http.MediaType;
+import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
+import org.springframework.test.context.junit4.SpringRunner;
+import org.springframework.test.web.servlet.MockMvc;
+import org.springframework.test.web.servlet.setup.MockMvcBuilders;
+import org.springframework.transaction.annotation.Transactional;
+
+import javax.persistence.EntityManager;
+import java.math.BigDecimal;
+import java.time.LocalDate;
+import java.time.ZoneId;
+import java.util.List;
+
+import static be.oniryx.web.rest.TestUtil.createFormattingConversionService;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.hamcrest.Matchers.hasItem;
+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
+
+import be.oniryx.domain.enumeration.Status;
+/**
+ * Test class for the ExpenseNoteResource REST controller.
+ *
+ * @see ExpenseNoteResource
+ */
+@RunWith(SpringRunner.class)
+@SpringBootTest(classes = OniryxHackathonApp.class)
+public class ExpenseNoteResourceIntTest {
+
+    private static final BigDecimal DEFAULT_MONTANT = new BigDecimal(1);
+    private static final BigDecimal UPDATED_MONTANT = new BigDecimal(2);
+
+    private static final String DEFAULT_LABEL = "AAAAAAAAAA";
+    private static final String UPDATED_LABEL = "BBBBBBBBBB";
+
+    private static final String DEFAULT_JUSTIFICATION = "AAAAAAAAAA";
+    private static final String UPDATED_JUSTIFICATION = "BBBBBBBBBB";
+
+    private static final String DEFAULT_COMMENT = "AAAAAAAAAA";
+    private static final String UPDATED_COMMENT = "BBBBBBBBBB";
+
+    private static final String DEFAULT_PROVIDER = "AAAAAAAAAA";
+    private static final String UPDATED_PROVIDER = "BBBBBBBBBB";
+
+    private static final LocalDate DEFAULT_SUBMIT_DATE = LocalDate.ofEpochDay(0L);
+    private static final LocalDate UPDATED_SUBMIT_DATE = LocalDate.now(ZoneId.systemDefault());
+
+    private static final LocalDate DEFAULT_PAYMENT_DATE = LocalDate.ofEpochDay(0L);
+    private static final LocalDate UPDATED_PAYMENT_DATE = LocalDate.now(ZoneId.systemDefault());
+
+    private static final Status DEFAULT_STATUS = Status.ENCODED;
+    private static final Status UPDATED_STATUS = Status.SUSPENDED;
+
+    @Autowired
+    private ExpenseNoteRepository expenseNoteRepository;
+
+    @Autowired
+    private MappingJackson2HttpMessageConverter jacksonMessageConverter;
+
+    @Autowired
+    private PageableHandlerMethodArgumentResolver pageableArgumentResolver;
+
+    @Autowired
+    private ExceptionTranslator exceptionTranslator;
+
+    @Autowired
+    private EntityManager em;
+
+    private MockMvc restExpenseNoteMockMvc;
+
+    private ExpenseNote expenseNote;
+
+    @Before
+    public void setup() {
+        MockitoAnnotations.initMocks(this);
+        final ExpenseNoteResource expenseNoteResource = new ExpenseNoteResource(expenseNoteRepository);
+        this.restExpenseNoteMockMvc = MockMvcBuilders.standaloneSetup(expenseNoteResource)
+            .setCustomArgumentResolvers(pageableArgumentResolver)
+            .setControllerAdvice(exceptionTranslator)
+            .setConversionService(createFormattingConversionService())
+            .setMessageConverters(jacksonMessageConverter).build();
+    }
+
+    /**
+     * Create an entity for this test.
+     *
+     * This is a static method, as tests for other entities might also need it,
+     * if they test an entity which requires the current entity.
+     */
+    public static ExpenseNote createEntity(EntityManager em) {
+        ExpenseNote expenseNote = new ExpenseNote()
+            .montant(DEFAULT_MONTANT)
+            .label(DEFAULT_LABEL)
+            .justification(DEFAULT_JUSTIFICATION)
+            .comment(DEFAULT_COMMENT)
+            .provider(DEFAULT_PROVIDER)
+            .submitDate(DEFAULT_SUBMIT_DATE)
+            .paymentDate(DEFAULT_PAYMENT_DATE)
+            .status(DEFAULT_STATUS);
+        return expenseNote;
+    }
+
+    @Before
+    public void initTest() {
+        expenseNote = createEntity(em);
+    }
+
+    @Test
+    @Transactional
+    public void createExpenseNote() throws Exception {
+        int databaseSizeBeforeCreate = expenseNoteRepository.findAll().size();
+
+        // Create the ExpenseNote
+        restExpenseNoteMockMvc.perform(post("/api/expense-notes")
+            .contentType(TestUtil.APPLICATION_JSON_UTF8)
+            .content(TestUtil.convertObjectToJsonBytes(expenseNote)))
+            .andExpect(status().isCreated());
+
+        // Validate the ExpenseNote in the database
+        List<ExpenseNote> expenseNoteList = expenseNoteRepository.findAll();
+        assertThat(expenseNoteList).hasSize(databaseSizeBeforeCreate + 1);
+        ExpenseNote testExpenseNote = expenseNoteList.get(expenseNoteList.size() - 1);
+        assertThat(testExpenseNote.getMontant()).isEqualTo(DEFAULT_MONTANT);
+        assertThat(testExpenseNote.getLabel()).isEqualTo(DEFAULT_LABEL);
+        assertThat(testExpenseNote.getJustification()).isEqualTo(DEFAULT_JUSTIFICATION);
+        assertThat(testExpenseNote.getComment()).isEqualTo(DEFAULT_COMMENT);
+        assertThat(testExpenseNote.getProvider()).isEqualTo(DEFAULT_PROVIDER);
+        assertThat(testExpenseNote.getSubmitDate()).isEqualTo(DEFAULT_SUBMIT_DATE);
+        assertThat(testExpenseNote.getPaymentDate()).isEqualTo(DEFAULT_PAYMENT_DATE);
+        assertThat(testExpenseNote.getStatus()).isEqualTo(DEFAULT_STATUS);
+    }
+
+    @Test
+    @Transactional
+    public void createExpenseNoteWithExistingId() throws Exception {
+        int databaseSizeBeforeCreate = expenseNoteRepository.findAll().size();
+
+        // Create the ExpenseNote with an existing ID
+        expenseNote.setId(1L);
+
+        // An entity with an existing ID cannot be created, so this API call must fail
+        restExpenseNoteMockMvc.perform(post("/api/expense-notes")
+            .contentType(TestUtil.APPLICATION_JSON_UTF8)
+            .content(TestUtil.convertObjectToJsonBytes(expenseNote)))
+            .andExpect(status().isBadRequest());
+
+        // Validate the ExpenseNote in the database
+        List<ExpenseNote> expenseNoteList = expenseNoteRepository.findAll();
+        assertThat(expenseNoteList).hasSize(databaseSizeBeforeCreate);
+    }
+
+    @Test
+    @Transactional
+    public void checkMontantIsRequired() throws Exception {
+        int databaseSizeBeforeTest = expenseNoteRepository.findAll().size();
+        // set the field null
+        expenseNote.setMontant(null);
+
+        // Create the ExpenseNote, which fails.
+
+        restExpenseNoteMockMvc.perform(post("/api/expense-notes")
+            .contentType(TestUtil.APPLICATION_JSON_UTF8)
+            .content(TestUtil.convertObjectToJsonBytes(expenseNote)))
+            .andExpect(status().isBadRequest());
+
+        List<ExpenseNote> expenseNoteList = expenseNoteRepository.findAll();
+        assertThat(expenseNoteList).hasSize(databaseSizeBeforeTest);
+    }
+
+    @Test
+    @Transactional
+    public void checkLabelIsRequired() throws Exception {
+        int databaseSizeBeforeTest = expenseNoteRepository.findAll().size();
+        // set the field null
+        expenseNote.setLabel(null);
+
+        // Create the ExpenseNote, which fails.
+
+        restExpenseNoteMockMvc.perform(post("/api/expense-notes")
+            .contentType(TestUtil.APPLICATION_JSON_UTF8)
+            .content(TestUtil.convertObjectToJsonBytes(expenseNote)))
+            .andExpect(status().isBadRequest());
+
+        List<ExpenseNote> expenseNoteList = expenseNoteRepository.findAll();
+        assertThat(expenseNoteList).hasSize(databaseSizeBeforeTest);
+    }
+
+    @Test
+    @Transactional
+    public void checkJustificationIsRequired() throws Exception {
+        int databaseSizeBeforeTest = expenseNoteRepository.findAll().size();
+        // set the field null
+        expenseNote.setJustification(null);
+
+        // Create the ExpenseNote, which fails.
+
+        restExpenseNoteMockMvc.perform(post("/api/expense-notes")
+            .contentType(TestUtil.APPLICATION_JSON_UTF8)
+            .content(TestUtil.convertObjectToJsonBytes(expenseNote)))
+            .andExpect(status().isBadRequest());
+
+        List<ExpenseNote> expenseNoteList = expenseNoteRepository.findAll();
+        assertThat(expenseNoteList).hasSize(databaseSizeBeforeTest);
+    }
+
+    @Test
+    @Transactional
+    public void checkProviderIsRequired() throws Exception {
+        int databaseSizeBeforeTest = expenseNoteRepository.findAll().size();
+        // set the field null
+        expenseNote.setProvider(null);
+
+        // Create the ExpenseNote, which fails.
+
+        restExpenseNoteMockMvc.perform(post("/api/expense-notes")
+            .contentType(TestUtil.APPLICATION_JSON_UTF8)
+            .content(TestUtil.convertObjectToJsonBytes(expenseNote)))
+            .andExpect(status().isBadRequest());
+
+        List<ExpenseNote> expenseNoteList = expenseNoteRepository.findAll();
+        assertThat(expenseNoteList).hasSize(databaseSizeBeforeTest);
+    }
+
+    @Test
+    @Transactional
+    public void checkSubmitDateIsRequired() throws Exception {
+        int databaseSizeBeforeTest = expenseNoteRepository.findAll().size();
+        // set the field null
+        expenseNote.setSubmitDate(null);
+
+        // Create the ExpenseNote, which fails.
+
+        restExpenseNoteMockMvc.perform(post("/api/expense-notes")
+            .contentType(TestUtil.APPLICATION_JSON_UTF8)
+            .content(TestUtil.convertObjectToJsonBytes(expenseNote)))
+            .andExpect(status().isBadRequest());
+
+        List<ExpenseNote> expenseNoteList = expenseNoteRepository.findAll();
+        assertThat(expenseNoteList).hasSize(databaseSizeBeforeTest);
+    }
+
+    @Test
+    @Transactional
+    public void getAllExpenseNotes() throws Exception {
+        // Initialize the database
+        expenseNoteRepository.saveAndFlush(expenseNote);
+
+        // Get all the expenseNoteList
+        restExpenseNoteMockMvc.perform(get("/api/expense-notes?sort=id,desc"))
+            .andExpect(status().isOk())
+            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
+            .andExpect(jsonPath("$.[*].id").value(hasItem(expenseNote.getId().intValue())))
+            .andExpect(jsonPath("$.[*].montant").value(hasItem(DEFAULT_MONTANT.intValue())))
+            .andExpect(jsonPath("$.[*].label").value(hasItem(DEFAULT_LABEL.toString())))
+            .andExpect(jsonPath("$.[*].justification").value(hasItem(DEFAULT_JUSTIFICATION.toString())))
+            .andExpect(jsonPath("$.[*].comment").value(hasItem(DEFAULT_COMMENT.toString())))
+            .andExpect(jsonPath("$.[*].provider").value(hasItem(DEFAULT_PROVIDER.toString())))
+            .andExpect(jsonPath("$.[*].submitDate").value(hasItem(DEFAULT_SUBMIT_DATE.toString())))
+            .andExpect(jsonPath("$.[*].paymentDate").value(hasItem(DEFAULT_PAYMENT_DATE.toString())))
+            .andExpect(jsonPath("$.[*].status").value(hasItem(DEFAULT_STATUS.toString())));
+    }
+
+    @Test
+    @Transactional
+    public void getExpenseNote() throws Exception {
+        // Initialize the database
+        expenseNoteRepository.saveAndFlush(expenseNote);
+
+        // Get the expenseNote
+        restExpenseNoteMockMvc.perform(get("/api/expense-notes/{id}", expenseNote.getId()))
+            .andExpect(status().isOk())
+            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
+            .andExpect(jsonPath("$.id").value(expenseNote.getId().intValue()))
+            .andExpect(jsonPath("$.montant").value(DEFAULT_MONTANT.intValue()))
+            .andExpect(jsonPath("$.label").value(DEFAULT_LABEL.toString()))
+            .andExpect(jsonPath("$.justification").value(DEFAULT_JUSTIFICATION.toString()))
+            .andExpect(jsonPath("$.comment").value(DEFAULT_COMMENT.toString()))
+            .andExpect(jsonPath("$.provider").value(DEFAULT_PROVIDER.toString()))
+            .andExpect(jsonPath("$.submitDate").value(DEFAULT_SUBMIT_DATE.toString()))
+            .andExpect(jsonPath("$.paymentDate").value(DEFAULT_PAYMENT_DATE.toString()))
+            .andExpect(jsonPath("$.status").value(DEFAULT_STATUS.toString()));
+    }
+
+    @Test
+    @Transactional
+    public void getNonExistingExpenseNote() throws Exception {
+        // Get the expenseNote
+        restExpenseNoteMockMvc.perform(get("/api/expense-notes/{id}", Long.MAX_VALUE))
+            .andExpect(status().isNotFound());
+    }
+
+    @Test
+    @Transactional
+    public void updateExpenseNote() throws Exception {
+        // Initialize the database
+        expenseNoteRepository.saveAndFlush(expenseNote);
+        int databaseSizeBeforeUpdate = expenseNoteRepository.findAll().size();
+
+        // Update the expenseNote
+        ExpenseNote updatedExpenseNote = expenseNoteRepository.findOne(expenseNote.getId());
+        // Disconnect from session so that the updates on updatedExpenseNote are not directly saved in db
+        em.detach(updatedExpenseNote);
+        updatedExpenseNote
+            .montant(UPDATED_MONTANT)
+            .label(UPDATED_LABEL)
+            .justification(UPDATED_JUSTIFICATION)
+            .comment(UPDATED_COMMENT)
+            .provider(UPDATED_PROVIDER)
+            .submitDate(UPDATED_SUBMIT_DATE)
+            .paymentDate(UPDATED_PAYMENT_DATE)
+            .status(UPDATED_STATUS);
+
+        restExpenseNoteMockMvc.perform(put("/api/expense-notes")
+            .contentType(TestUtil.APPLICATION_JSON_UTF8)
+            .content(TestUtil.convertObjectToJsonBytes(updatedExpenseNote)))
+            .andExpect(status().isOk());
+
+        // Validate the ExpenseNote in the database
+        List<ExpenseNote> expenseNoteList = expenseNoteRepository.findAll();
+        assertThat(expenseNoteList).hasSize(databaseSizeBeforeUpdate);
+        ExpenseNote testExpenseNote = expenseNoteList.get(expenseNoteList.size() - 1);
+        assertThat(testExpenseNote.getMontant()).isEqualTo(UPDATED_MONTANT);
+        assertThat(testExpenseNote.getLabel()).isEqualTo(UPDATED_LABEL);
+        assertThat(testExpenseNote.getJustification()).isEqualTo(UPDATED_JUSTIFICATION);
+        assertThat(testExpenseNote.getComment()).isEqualTo(UPDATED_COMMENT);
+        assertThat(testExpenseNote.getProvider()).isEqualTo(UPDATED_PROVIDER);
+        assertThat(testExpenseNote.getSubmitDate()).isEqualTo(UPDATED_SUBMIT_DATE);
+        assertThat(testExpenseNote.getPaymentDate()).isEqualTo(UPDATED_PAYMENT_DATE);
+        assertThat(testExpenseNote.getStatus()).isEqualTo(UPDATED_STATUS);
+    }
+
+    @Test
+    @Transactional
+    public void updateNonExistingExpenseNote() throws Exception {
+        int databaseSizeBeforeUpdate = expenseNoteRepository.findAll().size();
+
+        // Create the ExpenseNote
+
+        // If the entity doesn't have an ID, it will be created instead of just being updated
+        restExpenseNoteMockMvc.perform(put("/api/expense-notes")
+            .contentType(TestUtil.APPLICATION_JSON_UTF8)
+            .content(TestUtil.convertObjectToJsonBytes(expenseNote)))
+            .andExpect(status().isCreated());
+
+        // Validate the ExpenseNote in the database
+        List<ExpenseNote> expenseNoteList = expenseNoteRepository.findAll();
+        assertThat(expenseNoteList).hasSize(databaseSizeBeforeUpdate + 1);
+    }
+
+    @Test
+    @Transactional
+    public void deleteExpenseNote() throws Exception {
+        // Initialize the database
+        expenseNoteRepository.saveAndFlush(expenseNote);
+        int databaseSizeBeforeDelete = expenseNoteRepository.findAll().size();
+
+        // Get the expenseNote
+        restExpenseNoteMockMvc.perform(delete("/api/expense-notes/{id}", expenseNote.getId())
+            .accept(TestUtil.APPLICATION_JSON_UTF8))
+            .andExpect(status().isOk());
+
+        // Validate the database is empty
+        List<ExpenseNote> expenseNoteList = expenseNoteRepository.findAll();
+        assertThat(expenseNoteList).hasSize(databaseSizeBeforeDelete - 1);
+    }
+
+    @Test
+    @Transactional
+    public void equalsVerifier() throws Exception {
+        TestUtil.equalsVerifier(ExpenseNote.class);
+        ExpenseNote expenseNote1 = new ExpenseNote();
+        expenseNote1.setId(1L);
+        ExpenseNote expenseNote2 = new ExpenseNote();
+        expenseNote2.setId(expenseNote1.getId());
+        assertThat(expenseNote1).isEqualTo(expenseNote2);
+        expenseNote2.setId(2L);
+        assertThat(expenseNote1).isNotEqualTo(expenseNote2);
+        expenseNote1.setId(null);
+        assertThat(expenseNote1).isNotEqualTo(expenseNote2);
+    }
+}
diff --git a/src/test/java/be/oniryx/web/rest/TemplateResourceIntTest.java b/src/test/java/be/oniryx/web/rest/TemplateResourceIntTest.java
new file mode 100644
index 0000000..adfee92
--- /dev/null
+++ b/src/test/java/be/oniryx/web/rest/TemplateResourceIntTest.java
@@ -0,0 +1,348 @@
+package be.oniryx.web.rest;
+
+import be.oniryx.OniryxHackathonApp;
+
+import be.oniryx.domain.Template;
+import be.oniryx.repository.TemplateRepository;
+import be.oniryx.web.rest.errors.ExceptionTranslator;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.MockitoAnnotations;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.data.web.PageableHandlerMethodArgumentResolver;
+import org.springframework.http.MediaType;
+import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
+import org.springframework.test.context.junit4.SpringRunner;
+import org.springframework.test.web.servlet.MockMvc;
+import org.springframework.test.web.servlet.setup.MockMvcBuilders;
+import org.springframework.transaction.annotation.Transactional;
+
+import javax.persistence.EntityManager;
+import java.math.BigDecimal;
+import java.util.List;
+
+import static be.oniryx.web.rest.TestUtil.createFormattingConversionService;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.hamcrest.Matchers.hasItem;
+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
+
+/**
+ * Test class for the TemplateResource REST controller.
+ *
+ * @see TemplateResource
+ */
+@RunWith(SpringRunner.class)
+@SpringBootTest(classes = OniryxHackathonApp.class)
+public class TemplateResourceIntTest {
+
+    private static final BigDecimal DEFAULT_MONTANT = new BigDecimal(1);
+    private static final BigDecimal UPDATED_MONTANT = new BigDecimal(2);
+
+    private static final String DEFAULT_LABEL = "AAAAAAAAAA";
+    private static final String UPDATED_LABEL = "BBBBBBBBBB";
+
+    private static final String DEFAULT_JUSTIFICATION = "AAAAAAAAAA";
+    private static final String UPDATED_JUSTIFICATION = "BBBBBBBBBB";
+
+    private static final String DEFAULT_COMMENT = "AAAAAAAAAA";
+    private static final String UPDATED_COMMENT = "BBBBBBBBBB";
+
+    private static final String DEFAULT_PROVIDER = "AAAAAAAAAA";
+    private static final String UPDATED_PROVIDER = "BBBBBBBBBB";
+
+    @Autowired
+    private TemplateRepository templateRepository;
+
+    @Autowired
+    private MappingJackson2HttpMessageConverter jacksonMessageConverter;
+
+    @Autowired
+    private PageableHandlerMethodArgumentResolver pageableArgumentResolver;
+
+    @Autowired
+    private ExceptionTranslator exceptionTranslator;
+
+    @Autowired
+    private EntityManager em;
+
+    private MockMvc restTemplateMockMvc;
+
+    private Template template;
+
+    @Before
+    public void setup() {
+        MockitoAnnotations.initMocks(this);
+        final TemplateResource templateResource = new TemplateResource(templateRepository);
+        this.restTemplateMockMvc = MockMvcBuilders.standaloneSetup(templateResource)
+            .setCustomArgumentResolvers(pageableArgumentResolver)
+            .setControllerAdvice(exceptionTranslator)
+            .setConversionService(createFormattingConversionService())
+            .setMessageConverters(jacksonMessageConverter).build();
+    }
+
+    /**
+     * Create an entity for this test.
+     *
+     * This is a static method, as tests for other entities might also need it,
+     * if they test an entity which requires the current entity.
+     */
+    public static Template createEntity(EntityManager em) {
+        Template template = new Template()
+            .montant(DEFAULT_MONTANT)
+            .label(DEFAULT_LABEL)
+            .justification(DEFAULT_JUSTIFICATION)
+            .comment(DEFAULT_COMMENT)
+            .provider(DEFAULT_PROVIDER);
+        return template;
+    }
+
+    @Before
+    public void initTest() {
+        template = createEntity(em);
+    }
+
+    @Test
+    @Transactional
+    public void createTemplate() throws Exception {
+        int databaseSizeBeforeCreate = templateRepository.findAll().size();
+
+        // Create the Template
+        restTemplateMockMvc.perform(post("/api/templates")
+            .contentType(TestUtil.APPLICATION_JSON_UTF8)
+            .content(TestUtil.convertObjectToJsonBytes(template)))
+            .andExpect(status().isCreated());
+
+        // Validate the Template in the database
+        List<Template> templateList = templateRepository.findAll();
+        assertThat(templateList).hasSize(databaseSizeBeforeCreate + 1);
+        Template testTemplate = templateList.get(templateList.size() - 1);
+        assertThat(testTemplate.getMontant()).isEqualTo(DEFAULT_MONTANT);
+        assertThat(testTemplate.getLabel()).isEqualTo(DEFAULT_LABEL);
+        assertThat(testTemplate.getJustification()).isEqualTo(DEFAULT_JUSTIFICATION);
+        assertThat(testTemplate.getComment()).isEqualTo(DEFAULT_COMMENT);
+        assertThat(testTemplate.getProvider()).isEqualTo(DEFAULT_PROVIDER);
+    }
+
+    @Test
+    @Transactional
+    public void createTemplateWithExistingId() throws Exception {
+        int databaseSizeBeforeCreate = templateRepository.findAll().size();
+
+        // Create the Template with an existing ID
+        template.setId(1L);
+
+        // An entity with an existing ID cannot be created, so this API call must fail
+        restTemplateMockMvc.perform(post("/api/templates")
+            .contentType(TestUtil.APPLICATION_JSON_UTF8)
+            .content(TestUtil.convertObjectToJsonBytes(template)))
+            .andExpect(status().isBadRequest());
+
+        // Validate the Template in the database
+        List<Template> templateList = templateRepository.findAll();
+        assertThat(templateList).hasSize(databaseSizeBeforeCreate);
+    }
+
+    @Test
+    @Transactional
+    public void checkMontantIsRequired() throws Exception {
+        int databaseSizeBeforeTest = templateRepository.findAll().size();
+        // set the field null
+        template.setMontant(null);
+
+        // Create the Template, which fails.
+
+        restTemplateMockMvc.perform(post("/api/templates")
+            .contentType(TestUtil.APPLICATION_JSON_UTF8)
+            .content(TestUtil.convertObjectToJsonBytes(template)))
+            .andExpect(status().isBadRequest());
+
+        List<Template> templateList = templateRepository.findAll();
+        assertThat(templateList).hasSize(databaseSizeBeforeTest);
+    }
+
+    @Test
+    @Transactional
+    public void checkLabelIsRequired() throws Exception {
+        int databaseSizeBeforeTest = templateRepository.findAll().size();
+        // set the field null
+        template.setLabel(null);
+
+        // Create the Template, which fails.
+
+        restTemplateMockMvc.perform(post("/api/templates")
+            .contentType(TestUtil.APPLICATION_JSON_UTF8)
+            .content(TestUtil.convertObjectToJsonBytes(template)))
+            .andExpect(status().isBadRequest());
+
+        List<Template> templateList = templateRepository.findAll();
+        assertThat(templateList).hasSize(databaseSizeBeforeTest);
+    }
+
+    @Test
+    @Transactional
+    public void checkJustificationIsRequired() throws Exception {
+        int databaseSizeBeforeTest = templateRepository.findAll().size();
+        // set the field null
+        template.setJustification(null);
+
+        // Create the Template, which fails.
+
+        restTemplateMockMvc.perform(post("/api/templates")
+            .contentType(TestUtil.APPLICATION_JSON_UTF8)
+            .content(TestUtil.convertObjectToJsonBytes(template)))
+            .andExpect(status().isBadRequest());
+
+        List<Template> templateList = templateRepository.findAll();
+        assertThat(templateList).hasSize(databaseSizeBeforeTest);
+    }
+
+    @Test
+    @Transactional
+    public void checkProviderIsRequired() throws Exception {
+        int databaseSizeBeforeTest = templateRepository.findAll().size();
+        // set the field null
+        template.setProvider(null);
+
+        // Create the Template, which fails.
+
+        restTemplateMockMvc.perform(post("/api/templates")
+            .contentType(TestUtil.APPLICATION_JSON_UTF8)
+            .content(TestUtil.convertObjectToJsonBytes(template)))
+            .andExpect(status().isBadRequest());
+
+        List<Template> templateList = templateRepository.findAll();
+        assertThat(templateList).hasSize(databaseSizeBeforeTest);
+    }
+
+    @Test
+    @Transactional
+    public void getAllTemplates() throws Exception {
+        // Initialize the database
+        templateRepository.saveAndFlush(template);
+
+        // Get all the templateList
+        restTemplateMockMvc.perform(get("/api/templates?sort=id,desc"))
+            .andExpect(status().isOk())
+            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
+            .andExpect(jsonPath("$.[*].id").value(hasItem(template.getId().intValue())))
+            .andExpect(jsonPath("$.[*].montant").value(hasItem(DEFAULT_MONTANT.intValue())))
+            .andExpect(jsonPath("$.[*].label").value(hasItem(DEFAULT_LABEL.toString())))
+            .andExpect(jsonPath("$.[*].justification").value(hasItem(DEFAULT_JUSTIFICATION.toString())))
+            .andExpect(jsonPath("$.[*].comment").value(hasItem(DEFAULT_COMMENT.toString())))
+            .andExpect(jsonPath("$.[*].provider").value(hasItem(DEFAULT_PROVIDER.toString())));
+    }
+
+    @Test
+    @Transactional
+    public void getTemplate() throws Exception {
+        // Initialize the database
+        templateRepository.saveAndFlush(template);
+
+        // Get the template
+        restTemplateMockMvc.perform(get("/api/templates/{id}", template.getId()))
+            .andExpect(status().isOk())
+            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
+            .andExpect(jsonPath("$.id").value(template.getId().intValue()))
+            .andExpect(jsonPath("$.montant").value(DEFAULT_MONTANT.intValue()))
+            .andExpect(jsonPath("$.label").value(DEFAULT_LABEL.toString()))
+            .andExpect(jsonPath("$.justification").value(DEFAULT_JUSTIFICATION.toString()))
+            .andExpect(jsonPath("$.comment").value(DEFAULT_COMMENT.toString()))
+            .andExpect(jsonPath("$.provider").value(DEFAULT_PROVIDER.toString()));
+    }
+
+    @Test
+    @Transactional
+    public void getNonExistingTemplate() throws Exception {
+        // Get the template
+        restTemplateMockMvc.perform(get("/api/templates/{id}", Long.MAX_VALUE))
+            .andExpect(status().isNotFound());
+    }
+
+    @Test
+    @Transactional
+    public void updateTemplate() throws Exception {
+        // Initialize the database
+        templateRepository.saveAndFlush(template);
+        int databaseSizeBeforeUpdate = templateRepository.findAll().size();
+
+        // Update the template
+        Template updatedTemplate = templateRepository.findOne(template.getId());
+        // Disconnect from session so that the updates on updatedTemplate are not directly saved in db
+        em.detach(updatedTemplate);
+        updatedTemplate
+            .montant(UPDATED_MONTANT)
+            .label(UPDATED_LABEL)
+            .justification(UPDATED_JUSTIFICATION)
+            .comment(UPDATED_COMMENT)
+            .provider(UPDATED_PROVIDER);
+
+        restTemplateMockMvc.perform(put("/api/templates")
+            .contentType(TestUtil.APPLICATION_JSON_UTF8)
+            .content(TestUtil.convertObjectToJsonBytes(updatedTemplate)))
+            .andExpect(status().isOk());
+
+        // Validate the Template in the database
+        List<Template> templateList = templateRepository.findAll();
+        assertThat(templateList).hasSize(databaseSizeBeforeUpdate);
+        Template testTemplate = templateList.get(templateList.size() - 1);
+        assertThat(testTemplate.getMontant()).isEqualTo(UPDATED_MONTANT);
+        assertThat(testTemplate.getLabel()).isEqualTo(UPDATED_LABEL);
+        assertThat(testTemplate.getJustification()).isEqualTo(UPDATED_JUSTIFICATION);
+        assertThat(testTemplate.getComment()).isEqualTo(UPDATED_COMMENT);
+        assertThat(testTemplate.getProvider()).isEqualTo(UPDATED_PROVIDER);
+    }
+
+    @Test
+    @Transactional
+    public void updateNonExistingTemplate() throws Exception {
+        int databaseSizeBeforeUpdate = templateRepository.findAll().size();
+
+        // Create the Template
+
+        // If the entity doesn't have an ID, it will be created instead of just being updated
+        restTemplateMockMvc.perform(put("/api/templates")
+            .contentType(TestUtil.APPLICATION_JSON_UTF8)
+            .content(TestUtil.convertObjectToJsonBytes(template)))
+            .andExpect(status().isCreated());
+
+        // Validate the Template in the database
+        List<Template> templateList = templateRepository.findAll();
+        assertThat(templateList).hasSize(databaseSizeBeforeUpdate + 1);
+    }
+
+    @Test
+    @Transactional
+    public void deleteTemplate() throws Exception {
+        // Initialize the database
+        templateRepository.saveAndFlush(template);
+        int databaseSizeBeforeDelete = templateRepository.findAll().size();
+
+        // Get the template
+        restTemplateMockMvc.perform(delete("/api/templates/{id}", template.getId())
+            .accept(TestUtil.APPLICATION_JSON_UTF8))
+            .andExpect(status().isOk());
+
+        // Validate the database is empty
+        List<Template> templateList = templateRepository.findAll();
+        assertThat(templateList).hasSize(databaseSizeBeforeDelete - 1);
+    }
+
+    @Test
+    @Transactional
+    public void equalsVerifier() throws Exception {
+        TestUtil.equalsVerifier(Template.class);
+        Template template1 = new Template();
+        template1.setId(1L);
+        Template template2 = new Template();
+        template2.setId(template1.getId());
+        assertThat(template1).isEqualTo(template2);
+        template2.setId(2L);
+        assertThat(template1).isNotEqualTo(template2);
+        template1.setId(null);
+        assertThat(template1).isNotEqualTo(template2);
+    }
+}
diff --git a/src/test/javascript/spec/app/entities/category/category-delete-dialog.component.spec.ts b/src/test/javascript/spec/app/entities/category/category-delete-dialog.component.spec.ts
new file mode 100644
index 0000000..9b198e2
--- /dev/null
+++ b/src/test/javascript/spec/app/entities/category/category-delete-dialog.component.spec.ts
@@ -0,0 +1,61 @@
+/* tslint:disable max-line-length */
+import { ComponentFixture, TestBed, async, inject, fakeAsync, tick } from '@angular/core/testing';
+import { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';
+import { Observable } from 'rxjs/Observable';
+import { JhiEventManager } from 'ng-jhipster';
+
+import { OniryxHackathonTestModule } from '../../../test.module';
+import { CategoryDeleteDialogComponent } from '../../../../../../main/webapp/app/entities/category/category-delete-dialog.component';
+import { CategoryService } from '../../../../../../main/webapp/app/entities/category/category.service';
+
+describe('Component Tests', () => {
+
+    describe('Category Management Delete Component', () => {
+        let comp: CategoryDeleteDialogComponent;
+        let fixture: ComponentFixture<CategoryDeleteDialogComponent>;
+        let service: CategoryService;
+        let mockEventManager: any;
+        let mockActiveModal: any;
+
+        beforeEach(async(() => {
+            TestBed.configureTestingModule({
+                imports: [OniryxHackathonTestModule],
+                declarations: [CategoryDeleteDialogComponent],
+                providers: [
+                    CategoryService
+                ]
+            })
+            .overrideTemplate(CategoryDeleteDialogComponent, '')
+            .compileComponents();
+        }));
+
+        beforeEach(() => {
+            fixture = TestBed.createComponent(CategoryDeleteDialogComponent);
+            comp = fixture.componentInstance;
+            service = fixture.debugElement.injector.get(CategoryService);
+            mockEventManager = fixture.debugElement.injector.get(JhiEventManager);
+            mockActiveModal = fixture.debugElement.injector.get(NgbActiveModal);
+        });
+
+        describe('confirmDelete', () => {
+            it('Should call delete service on confirmDelete',
+                inject([],
+                    fakeAsync(() => {
+                        // GIVEN
+                        spyOn(service, 'delete').and.returnValue(Observable.of({}));
+
+                        // WHEN
+                        comp.confirmDelete(123);
+                        tick();
+
+                        // THEN
+                        expect(service.delete).toHaveBeenCalledWith(123);
+                        expect(mockActiveModal.dismissSpy).toHaveBeenCalled();
+                        expect(mockEventManager.broadcastSpy).toHaveBeenCalled();
+                    })
+                )
+            );
+        });
+    });
+
+});
diff --git a/src/test/javascript/spec/app/entities/category/category-detail.component.spec.ts b/src/test/javascript/spec/app/entities/category/category-detail.component.spec.ts
new file mode 100644
index 0000000..a63df9d
--- /dev/null
+++ b/src/test/javascript/spec/app/entities/category/category-detail.component.spec.ts
@@ -0,0 +1,54 @@
+/* tslint:disable max-line-length */
+import { ComponentFixture, TestBed, async } from '@angular/core/testing';
+import { HttpResponse } from '@angular/common/http';
+import { Observable } from 'rxjs/Observable';
+
+import { OniryxHackathonTestModule } from '../../../test.module';
+import { CategoryDetailComponent } from '../../../../../../main/webapp/app/entities/category/category-detail.component';
+import { CategoryService } from '../../../../../../main/webapp/app/entities/category/category.service';
+import { Category } from '../../../../../../main/webapp/app/entities/category/category.model';
+
+describe('Component Tests', () => {
+
+    describe('Category Management Detail Component', () => {
+        let comp: CategoryDetailComponent;
+        let fixture: ComponentFixture<CategoryDetailComponent>;
+        let service: CategoryService;
+
+        beforeEach(async(() => {
+            TestBed.configureTestingModule({
+                imports: [OniryxHackathonTestModule],
+                declarations: [CategoryDetailComponent],
+                providers: [
+                    CategoryService
+                ]
+            })
+            .overrideTemplate(CategoryDetailComponent, '')
+            .compileComponents();
+        }));
+
+        beforeEach(() => {
+            fixture = TestBed.createComponent(CategoryDetailComponent);
+            comp = fixture.componentInstance;
+            service = fixture.debugElement.injector.get(CategoryService);
+        });
+
+        describe('OnInit', () => {
+            it('Should call load all on init', () => {
+                // GIVEN
+
+                spyOn(service, 'find').and.returnValue(Observable.of(new HttpResponse({
+                    body: new Category(123)
+                })));
+
+                // WHEN
+                comp.ngOnInit();
+
+                // THEN
+                expect(service.find).toHaveBeenCalledWith(123);
+                expect(comp.category).toEqual(jasmine.objectContaining({id: 123}));
+            });
+        });
+    });
+
+});
diff --git a/src/test/javascript/spec/app/entities/category/category-dialog.component.spec.ts b/src/test/javascript/spec/app/entities/category/category-dialog.component.spec.ts
new file mode 100644
index 0000000..4351153
--- /dev/null
+++ b/src/test/javascript/spec/app/entities/category/category-dialog.component.spec.ts
@@ -0,0 +1,89 @@
+/* tslint:disable max-line-length */
+import { ComponentFixture, TestBed, async, inject, fakeAsync, tick } from '@angular/core/testing';
+import { HttpResponse } from '@angular/common/http';
+import { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';
+import { Observable } from 'rxjs/Observable';
+import { JhiEventManager } from 'ng-jhipster';
+
+import { OniryxHackathonTestModule } from '../../../test.module';
+import { CategoryDialogComponent } from '../../../../../../main/webapp/app/entities/category/category-dialog.component';
+import { CategoryService } from '../../../../../../main/webapp/app/entities/category/category.service';
+import { Category } from '../../../../../../main/webapp/app/entities/category/category.model';
+import { TemplateService } from '../../../../../../main/webapp/app/entities/template';
+import { ExpenseNoteService } from '../../../../../../main/webapp/app/entities/expense-note';
+
+describe('Component Tests', () => {
+
+    describe('Category Management Dialog Component', () => {
+        let comp: CategoryDialogComponent;
+        let fixture: ComponentFixture<CategoryDialogComponent>;
+        let service: CategoryService;
+        let mockEventManager: any;
+        let mockActiveModal: any;
+
+        beforeEach(async(() => {
+            TestBed.configureTestingModule({
+                imports: [OniryxHackathonTestModule],
+                declarations: [CategoryDialogComponent],
+                providers: [
+                    TemplateService,
+                    ExpenseNoteService,
+                    CategoryService
+                ]
+            })
+            .overrideTemplate(CategoryDialogComponent, '')
+            .compileComponents();
+        }));
+
+        beforeEach(() => {
+            fixture = TestBed.createComponent(CategoryDialogComponent);
+            comp = fixture.componentInstance;
+            service = fixture.debugElement.injector.get(CategoryService);
+            mockEventManager = fixture.debugElement.injector.get(JhiEventManager);
+            mockActiveModal = fixture.debugElement.injector.get(NgbActiveModal);
+        });
+
+        describe('save', () => {
+            it('Should call update service on save for existing entity',
+                inject([],
+                    fakeAsync(() => {
+                        // GIVEN
+                        const entity = new Category(123);
+                        spyOn(service, 'update').and.returnValue(Observable.of(new HttpResponse({body: entity})));
+                        comp.category = entity;
+                        // WHEN
+                        comp.save();
+                        tick(); // simulate async
+
+                        // THEN
+                        expect(service.update).toHaveBeenCalledWith(entity);
+                        expect(comp.isSaving).toEqual(false);
+                        expect(mockEventManager.broadcastSpy).toHaveBeenCalledWith({ name: 'categoryListModification', content: 'OK'});
+                        expect(mockActiveModal.dismissSpy).toHaveBeenCalled();
+                    })
+                )
+            );
+
+            it('Should call create service on save for new entity',
+                inject([],
+                    fakeAsync(() => {
+                        // GIVEN
+                        const entity = new Category();
+                        spyOn(service, 'create').and.returnValue(Observable.of(new HttpResponse({body: entity})));
+                        comp.category = entity;
+                        // WHEN
+                        comp.save();
+                        tick(); // simulate async
+
+                        // THEN
+                        expect(service.create).toHaveBeenCalledWith(entity);
+                        expect(comp.isSaving).toEqual(false);
+                        expect(mockEventManager.broadcastSpy).toHaveBeenCalledWith({ name: 'categoryListModification', content: 'OK'});
+                        expect(mockActiveModal.dismissSpy).toHaveBeenCalled();
+                    })
+                )
+            );
+        });
+    });
+
+});
diff --git a/src/test/javascript/spec/app/entities/category/category.component.spec.ts b/src/test/javascript/spec/app/entities/category/category.component.spec.ts
new file mode 100644
index 0000000..3511372
--- /dev/null
+++ b/src/test/javascript/spec/app/entities/category/category.component.spec.ts
@@ -0,0 +1,55 @@
+/* tslint:disable max-line-length */
+import { ComponentFixture, TestBed, async } from '@angular/core/testing';
+import { Observable } from 'rxjs/Observable';
+import { HttpHeaders, HttpResponse } from '@angular/common/http';
+
+import { OniryxHackathonTestModule } from '../../../test.module';
+import { CategoryComponent } from '../../../../../../main/webapp/app/entities/category/category.component';
+import { CategoryService } from '../../../../../../main/webapp/app/entities/category/category.service';
+import { Category } from '../../../../../../main/webapp/app/entities/category/category.model';
+
+describe('Component Tests', () => {
+
+    describe('Category Management Component', () => {
+        let comp: CategoryComponent;
+        let fixture: ComponentFixture<CategoryComponent>;
+        let service: CategoryService;
+
+        beforeEach(async(() => {
+            TestBed.configureTestingModule({
+                imports: [OniryxHackathonTestModule],
+                declarations: [CategoryComponent],
+                providers: [
+                    CategoryService
+                ]
+            })
+            .overrideTemplate(CategoryComponent, '')
+            .compileComponents();
+        }));
+
+        beforeEach(() => {
+            fixture = TestBed.createComponent(CategoryComponent);
+            comp = fixture.componentInstance;
+            service = fixture.debugElement.injector.get(CategoryService);
+        });
+
+        describe('OnInit', () => {
+            it('Should call load all on init', () => {
+                // GIVEN
+                const headers = new HttpHeaders().append('link', 'link;link');
+                spyOn(service, 'query').and.returnValue(Observable.of(new HttpResponse({
+                    body: [new Category(123)],
+                    headers
+                })));
+
+                // WHEN
+                comp.ngOnInit();
+
+                // THEN
+                expect(service.query).toHaveBeenCalled();
+                expect(comp.categories[0]).toEqual(jasmine.objectContaining({id: 123}));
+            });
+        });
+    });
+
+});
diff --git a/src/test/javascript/spec/app/entities/category/category.service.spec.ts b/src/test/javascript/spec/app/entities/category/category.service.spec.ts
new file mode 100644
index 0000000..d7f2d59
--- /dev/null
+++ b/src/test/javascript/spec/app/entities/category/category.service.spec.ts
@@ -0,0 +1,70 @@
+/* tslint:disable max-line-length */
+import { TestBed, getTestBed } from '@angular/core/testing';
+import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';
+import { JhiDateUtils } from 'ng-jhipster';
+
+import { CategoryService } from '../../../../../../main/webapp/app/entities/category/category.service';
+import { SERVER_API_URL } from '../../../../../../main/webapp/app/app.constants';
+
+describe('Service Tests', () => {
+
+    describe('Category Service', () => {
+        let injector: TestBed;
+        let service: CategoryService;
+        let httpMock: HttpTestingController;
+
+        beforeEach(() => {
+            TestBed.configureTestingModule({
+                imports: [
+                    HttpClientTestingModule
+                ],
+                providers: [
+                    JhiDateUtils,
+                    CategoryService
+                ]
+            });
+            injector = getTestBed();
+            service = injector.get(CategoryService);
+            httpMock = injector.get(HttpTestingController);
+        });
+
+        describe('Service methods', () => {
+            it('should call correct URL', () => {
+                service.find(123).subscribe(() => {});
+
+                const req  = httpMock.expectOne({ method: 'GET' });
+
+                const resourceUrl = SERVER_API_URL + 'api/categories';
+                expect(req.request.url).toEqual(resourceUrl + '/' + 123);
+            });
+            it('should return Category', () => {
+
+                service.find(123).subscribe((received) => {
+                    expect(received.body.id).toEqual(123);
+                });
+
+                const req = httpMock.expectOne({ method: 'GET' });
+                req.flush({id: 123});
+            });
+
+            it('should propagate not found response', () => {
+
+                service.find(123).subscribe(null, (_error: any) => {
+                    expect(_error.status).toEqual(404);
+                });
+
+                const req  = httpMock.expectOne({ method: 'GET' });
+                req.flush('Invalid request parameters', {
+                    status: 404, statusText: 'Bad Request'
+                });
+
+            });
+        });
+
+        afterEach(() => {
+            httpMock.verify();
+        });
+
+    });
+
+});
diff --git a/src/test/javascript/spec/app/entities/employee/employee-delete-dialog.component.spec.ts b/src/test/javascript/spec/app/entities/employee/employee-delete-dialog.component.spec.ts
new file mode 100644
index 0000000..94047bc
--- /dev/null
+++ b/src/test/javascript/spec/app/entities/employee/employee-delete-dialog.component.spec.ts
@@ -0,0 +1,61 @@
+/* tslint:disable max-line-length */
+import { ComponentFixture, TestBed, async, inject, fakeAsync, tick } from '@angular/core/testing';
+import { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';
+import { Observable } from 'rxjs/Observable';
+import { JhiEventManager } from 'ng-jhipster';
+
+import { OniryxHackathonTestModule } from '../../../test.module';
+import { EmployeeDeleteDialogComponent } from '../../../../../../main/webapp/app/entities/employee/employee-delete-dialog.component';
+import { EmployeeService } from '../../../../../../main/webapp/app/entities/employee/employee.service';
+
+describe('Component Tests', () => {
+
+    describe('Employee Management Delete Component', () => {
+        let comp: EmployeeDeleteDialogComponent;
+        let fixture: ComponentFixture<EmployeeDeleteDialogComponent>;
+        let service: EmployeeService;
+        let mockEventManager: any;
+        let mockActiveModal: any;
+
+        beforeEach(async(() => {
+            TestBed.configureTestingModule({
+                imports: [OniryxHackathonTestModule],
+                declarations: [EmployeeDeleteDialogComponent],
+                providers: [
+                    EmployeeService
+                ]
+            })
+            .overrideTemplate(EmployeeDeleteDialogComponent, '')
+            .compileComponents();
+        }));
+
+        beforeEach(() => {
+            fixture = TestBed.createComponent(EmployeeDeleteDialogComponent);
+            comp = fixture.componentInstance;
+            service = fixture.debugElement.injector.get(EmployeeService);
+            mockEventManager = fixture.debugElement.injector.get(JhiEventManager);
+            mockActiveModal = fixture.debugElement.injector.get(NgbActiveModal);
+        });
+
+        describe('confirmDelete', () => {
+            it('Should call delete service on confirmDelete',
+                inject([],
+                    fakeAsync(() => {
+                        // GIVEN
+                        spyOn(service, 'delete').and.returnValue(Observable.of({}));
+
+                        // WHEN
+                        comp.confirmDelete(123);
+                        tick();
+
+                        // THEN
+                        expect(service.delete).toHaveBeenCalledWith(123);
+                        expect(mockActiveModal.dismissSpy).toHaveBeenCalled();
+                        expect(mockEventManager.broadcastSpy).toHaveBeenCalled();
+                    })
+                )
+            );
+        });
+    });
+
+});
diff --git a/src/test/javascript/spec/app/entities/employee/employee-detail.component.spec.ts b/src/test/javascript/spec/app/entities/employee/employee-detail.component.spec.ts
new file mode 100644
index 0000000..04caa06
--- /dev/null
+++ b/src/test/javascript/spec/app/entities/employee/employee-detail.component.spec.ts
@@ -0,0 +1,54 @@
+/* tslint:disable max-line-length */
+import { ComponentFixture, TestBed, async } from '@angular/core/testing';
+import { HttpResponse } from '@angular/common/http';
+import { Observable } from 'rxjs/Observable';
+
+import { OniryxHackathonTestModule } from '../../../test.module';
+import { EmployeeDetailComponent } from '../../../../../../main/webapp/app/entities/employee/employee-detail.component';
+import { EmployeeService } from '../../../../../../main/webapp/app/entities/employee/employee.service';
+import { Employee } from '../../../../../../main/webapp/app/entities/employee/employee.model';
+
+describe('Component Tests', () => {
+
+    describe('Employee Management Detail Component', () => {
+        let comp: EmployeeDetailComponent;
+        let fixture: ComponentFixture<EmployeeDetailComponent>;
+        let service: EmployeeService;
+
+        beforeEach(async(() => {
+            TestBed.configureTestingModule({
+                imports: [OniryxHackathonTestModule],
+                declarations: [EmployeeDetailComponent],
+                providers: [
+                    EmployeeService
+                ]
+            })
+            .overrideTemplate(EmployeeDetailComponent, '')
+            .compileComponents();
+        }));
+
+        beforeEach(() => {
+            fixture = TestBed.createComponent(EmployeeDetailComponent);
+            comp = fixture.componentInstance;
+            service = fixture.debugElement.injector.get(EmployeeService);
+        });
+
+        describe('OnInit', () => {
+            it('Should call load all on init', () => {
+                // GIVEN
+
+                spyOn(service, 'find').and.returnValue(Observable.of(new HttpResponse({
+                    body: new Employee(123)
+                })));
+
+                // WHEN
+                comp.ngOnInit();
+
+                // THEN
+                expect(service.find).toHaveBeenCalledWith(123);
+                expect(comp.employee).toEqual(jasmine.objectContaining({id: 123}));
+            });
+        });
+    });
+
+});
diff --git a/src/test/javascript/spec/app/entities/employee/employee-dialog.component.spec.ts b/src/test/javascript/spec/app/entities/employee/employee-dialog.component.spec.ts
new file mode 100644
index 0000000..882e1b7
--- /dev/null
+++ b/src/test/javascript/spec/app/entities/employee/employee-dialog.component.spec.ts
@@ -0,0 +1,89 @@
+/* tslint:disable max-line-length */
+import { ComponentFixture, TestBed, async, inject, fakeAsync, tick } from '@angular/core/testing';
+import { HttpResponse } from '@angular/common/http';
+import { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';
+import { Observable } from 'rxjs/Observable';
+import { JhiEventManager } from 'ng-jhipster';
+
+import { OniryxHackathonTestModule } from '../../../test.module';
+import { EmployeeDialogComponent } from '../../../../../../main/webapp/app/entities/employee/employee-dialog.component';
+import { EmployeeService } from '../../../../../../main/webapp/app/entities/employee/employee.service';
+import { Employee } from '../../../../../../main/webapp/app/entities/employee/employee.model';
+import { TemplateService } from '../../../../../../main/webapp/app/entities/template';
+import { ExpenseNoteService } from '../../../../../../main/webapp/app/entities/expense-note';
+
+describe('Component Tests', () => {
+
+    describe('Employee Management Dialog Component', () => {
+        let comp: EmployeeDialogComponent;
+        let fixture: ComponentFixture<EmployeeDialogComponent>;
+        let service: EmployeeService;
+        let mockEventManager: any;
+        let mockActiveModal: any;
+
+        beforeEach(async(() => {
+            TestBed.configureTestingModule({
+                imports: [OniryxHackathonTestModule],
+                declarations: [EmployeeDialogComponent],
+                providers: [
+                    TemplateService,
+                    ExpenseNoteService,
+                    EmployeeService
+                ]
+            })
+            .overrideTemplate(EmployeeDialogComponent, '')
+            .compileComponents();
+        }));
+
+        beforeEach(() => {
+            fixture = TestBed.createComponent(EmployeeDialogComponent);
+            comp = fixture.componentInstance;
+            service = fixture.debugElement.injector.get(EmployeeService);
+            mockEventManager = fixture.debugElement.injector.get(JhiEventManager);
+            mockActiveModal = fixture.debugElement.injector.get(NgbActiveModal);
+        });
+
+        describe('save', () => {
+            it('Should call update service on save for existing entity',
+                inject([],
+                    fakeAsync(() => {
+                        // GIVEN
+                        const entity = new Employee(123);
+                        spyOn(service, 'update').and.returnValue(Observable.of(new HttpResponse({body: entity})));
+                        comp.employee = entity;
+                        // WHEN
+                        comp.save();
+                        tick(); // simulate async
+
+                        // THEN
+                        expect(service.update).toHaveBeenCalledWith(entity);
+                        expect(comp.isSaving).toEqual(false);
+                        expect(mockEventManager.broadcastSpy).toHaveBeenCalledWith({ name: 'employeeListModification', content: 'OK'});
+                        expect(mockActiveModal.dismissSpy).toHaveBeenCalled();
+                    })
+                )
+            );
+
+            it('Should call create service on save for new entity',
+                inject([],
+                    fakeAsync(() => {
+                        // GIVEN
+                        const entity = new Employee();
+                        spyOn(service, 'create').and.returnValue(Observable.of(new HttpResponse({body: entity})));
+                        comp.employee = entity;
+                        // WHEN
+                        comp.save();
+                        tick(); // simulate async
+
+                        // THEN
+                        expect(service.create).toHaveBeenCalledWith(entity);
+                        expect(comp.isSaving).toEqual(false);
+                        expect(mockEventManager.broadcastSpy).toHaveBeenCalledWith({ name: 'employeeListModification', content: 'OK'});
+                        expect(mockActiveModal.dismissSpy).toHaveBeenCalled();
+                    })
+                )
+            );
+        });
+    });
+
+});
diff --git a/src/test/javascript/spec/app/entities/employee/employee.component.spec.ts b/src/test/javascript/spec/app/entities/employee/employee.component.spec.ts
new file mode 100644
index 0000000..731b65c
--- /dev/null
+++ b/src/test/javascript/spec/app/entities/employee/employee.component.spec.ts
@@ -0,0 +1,55 @@
+/* tslint:disable max-line-length */
+import { ComponentFixture, TestBed, async } from '@angular/core/testing';
+import { Observable } from 'rxjs/Observable';
+import { HttpHeaders, HttpResponse } from '@angular/common/http';
+
+import { OniryxHackathonTestModule } from '../../../test.module';
+import { EmployeeComponent } from '../../../../../../main/webapp/app/entities/employee/employee.component';
+import { EmployeeService } from '../../../../../../main/webapp/app/entities/employee/employee.service';
+import { Employee } from '../../../../../../main/webapp/app/entities/employee/employee.model';
+
+describe('Component Tests', () => {
+
+    describe('Employee Management Component', () => {
+        let comp: EmployeeComponent;
+        let fixture: ComponentFixture<EmployeeComponent>;
+        let service: EmployeeService;
+
+        beforeEach(async(() => {
+            TestBed.configureTestingModule({
+                imports: [OniryxHackathonTestModule],
+                declarations: [EmployeeComponent],
+                providers: [
+                    EmployeeService
+                ]
+            })
+            .overrideTemplate(EmployeeComponent, '')
+            .compileComponents();
+        }));
+
+        beforeEach(() => {
+            fixture = TestBed.createComponent(EmployeeComponent);
+            comp = fixture.componentInstance;
+            service = fixture.debugElement.injector.get(EmployeeService);
+        });
+
+        describe('OnInit', () => {
+            it('Should call load all on init', () => {
+                // GIVEN
+                const headers = new HttpHeaders().append('link', 'link;link');
+                spyOn(service, 'query').and.returnValue(Observable.of(new HttpResponse({
+                    body: [new Employee(123)],
+                    headers
+                })));
+
+                // WHEN
+                comp.ngOnInit();
+
+                // THEN
+                expect(service.query).toHaveBeenCalled();
+                expect(comp.employees[0]).toEqual(jasmine.objectContaining({id: 123}));
+            });
+        });
+    });
+
+});
diff --git a/src/test/javascript/spec/app/entities/employee/employee.service.spec.ts b/src/test/javascript/spec/app/entities/employee/employee.service.spec.ts
new file mode 100644
index 0000000..4132e06
--- /dev/null
+++ b/src/test/javascript/spec/app/entities/employee/employee.service.spec.ts
@@ -0,0 +1,70 @@
+/* tslint:disable max-line-length */
+import { TestBed, getTestBed } from '@angular/core/testing';
+import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';
+import { JhiDateUtils } from 'ng-jhipster';
+
+import { EmployeeService } from '../../../../../../main/webapp/app/entities/employee/employee.service';
+import { SERVER_API_URL } from '../../../../../../main/webapp/app/app.constants';
+
+describe('Service Tests', () => {
+
+    describe('Employee Service', () => {
+        let injector: TestBed;
+        let service: EmployeeService;
+        let httpMock: HttpTestingController;
+
+        beforeEach(() => {
+            TestBed.configureTestingModule({
+                imports: [
+                    HttpClientTestingModule
+                ],
+                providers: [
+                    JhiDateUtils,
+                    EmployeeService
+                ]
+            });
+            injector = getTestBed();
+            service = injector.get(EmployeeService);
+            httpMock = injector.get(HttpTestingController);
+        });
+
+        describe('Service methods', () => {
+            it('should call correct URL', () => {
+                service.find(123).subscribe(() => {});
+
+                const req  = httpMock.expectOne({ method: 'GET' });
+
+                const resourceUrl = SERVER_API_URL + 'api/employees';
+                expect(req.request.url).toEqual(resourceUrl + '/' + 123);
+            });
+            it('should return Employee', () => {
+
+                service.find(123).subscribe((received) => {
+                    expect(received.body.id).toEqual(123);
+                });
+
+                const req = httpMock.expectOne({ method: 'GET' });
+                req.flush({id: 123});
+            });
+
+            it('should propagate not found response', () => {
+
+                service.find(123).subscribe(null, (_error: any) => {
+                    expect(_error.status).toEqual(404);
+                });
+
+                const req  = httpMock.expectOne({ method: 'GET' });
+                req.flush('Invalid request parameters', {
+                    status: 404, statusText: 'Bad Request'
+                });
+
+            });
+        });
+
+        afterEach(() => {
+            httpMock.verify();
+        });
+
+    });
+
+});
diff --git a/src/test/javascript/spec/app/entities/expense-note/expense-note-delete-dialog.component.spec.ts b/src/test/javascript/spec/app/entities/expense-note/expense-note-delete-dialog.component.spec.ts
new file mode 100644
index 0000000..d44f7aa
--- /dev/null
+++ b/src/test/javascript/spec/app/entities/expense-note/expense-note-delete-dialog.component.spec.ts
@@ -0,0 +1,61 @@
+/* tslint:disable max-line-length */
+import { ComponentFixture, TestBed, async, inject, fakeAsync, tick } from '@angular/core/testing';
+import { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';
+import { Observable } from 'rxjs/Observable';
+import { JhiEventManager } from 'ng-jhipster';
+
+import { OniryxHackathonTestModule } from '../../../test.module';
+import { ExpenseNoteDeleteDialogComponent } from '../../../../../../main/webapp/app/entities/expense-note/expense-note-delete-dialog.component';
+import { ExpenseNoteService } from '../../../../../../main/webapp/app/entities/expense-note/expense-note.service';
+
+describe('Component Tests', () => {
+
+    describe('ExpenseNote Management Delete Component', () => {
+        let comp: ExpenseNoteDeleteDialogComponent;
+        let fixture: ComponentFixture<ExpenseNoteDeleteDialogComponent>;
+        let service: ExpenseNoteService;
+        let mockEventManager: any;
+        let mockActiveModal: any;
+
+        beforeEach(async(() => {
+            TestBed.configureTestingModule({
+                imports: [OniryxHackathonTestModule],
+                declarations: [ExpenseNoteDeleteDialogComponent],
+                providers: [
+                    ExpenseNoteService
+                ]
+            })
+            .overrideTemplate(ExpenseNoteDeleteDialogComponent, '')
+            .compileComponents();
+        }));
+
+        beforeEach(() => {
+            fixture = TestBed.createComponent(ExpenseNoteDeleteDialogComponent);
+            comp = fixture.componentInstance;
+            service = fixture.debugElement.injector.get(ExpenseNoteService);
+            mockEventManager = fixture.debugElement.injector.get(JhiEventManager);
+            mockActiveModal = fixture.debugElement.injector.get(NgbActiveModal);
+        });
+
+        describe('confirmDelete', () => {
+            it('Should call delete service on confirmDelete',
+                inject([],
+                    fakeAsync(() => {
+                        // GIVEN
+                        spyOn(service, 'delete').and.returnValue(Observable.of({}));
+
+                        // WHEN
+                        comp.confirmDelete(123);
+                        tick();
+
+                        // THEN
+                        expect(service.delete).toHaveBeenCalledWith(123);
+                        expect(mockActiveModal.dismissSpy).toHaveBeenCalled();
+                        expect(mockEventManager.broadcastSpy).toHaveBeenCalled();
+                    })
+                )
+            );
+        });
+    });
+
+});
diff --git a/src/test/javascript/spec/app/entities/expense-note/expense-note-detail.component.spec.ts b/src/test/javascript/spec/app/entities/expense-note/expense-note-detail.component.spec.ts
new file mode 100644
index 0000000..dc1abdb
--- /dev/null
+++ b/src/test/javascript/spec/app/entities/expense-note/expense-note-detail.component.spec.ts
@@ -0,0 +1,54 @@
+/* tslint:disable max-line-length */
+import { ComponentFixture, TestBed, async } from '@angular/core/testing';
+import { HttpResponse } from '@angular/common/http';
+import { Observable } from 'rxjs/Observable';
+
+import { OniryxHackathonTestModule } from '../../../test.module';
+import { ExpenseNoteDetailComponent } from '../../../../../../main/webapp/app/entities/expense-note/expense-note-detail.component';
+import { ExpenseNoteService } from '../../../../../../main/webapp/app/entities/expense-note/expense-note.service';
+import { ExpenseNote } from '../../../../../../main/webapp/app/entities/expense-note/expense-note.model';
+
+describe('Component Tests', () => {
+
+    describe('ExpenseNote Management Detail Component', () => {
+        let comp: ExpenseNoteDetailComponent;
+        let fixture: ComponentFixture<ExpenseNoteDetailComponent>;
+        let service: ExpenseNoteService;
+
+        beforeEach(async(() => {
+            TestBed.configureTestingModule({
+                imports: [OniryxHackathonTestModule],
+                declarations: [ExpenseNoteDetailComponent],
+                providers: [
+                    ExpenseNoteService
+                ]
+            })
+            .overrideTemplate(ExpenseNoteDetailComponent, '')
+            .compileComponents();
+        }));
+
+        beforeEach(() => {
+            fixture = TestBed.createComponent(ExpenseNoteDetailComponent);
+            comp = fixture.componentInstance;
+            service = fixture.debugElement.injector.get(ExpenseNoteService);
+        });
+
+        describe('OnInit', () => {
+            it('Should call load all on init', () => {
+                // GIVEN
+
+                spyOn(service, 'find').and.returnValue(Observable.of(new HttpResponse({
+                    body: new ExpenseNote(123)
+                })));
+
+                // WHEN
+                comp.ngOnInit();
+
+                // THEN
+                expect(service.find).toHaveBeenCalledWith(123);
+                expect(comp.expenseNote).toEqual(jasmine.objectContaining({id: 123}));
+            });
+        });
+    });
+
+});
diff --git a/src/test/javascript/spec/app/entities/expense-note/expense-note-dialog.component.spec.ts b/src/test/javascript/spec/app/entities/expense-note/expense-note-dialog.component.spec.ts
new file mode 100644
index 0000000..e9c7772
--- /dev/null
+++ b/src/test/javascript/spec/app/entities/expense-note/expense-note-dialog.component.spec.ts
@@ -0,0 +1,87 @@
+/* tslint:disable max-line-length */
+import { ComponentFixture, TestBed, async, inject, fakeAsync, tick } from '@angular/core/testing';
+import { HttpResponse } from '@angular/common/http';
+import { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';
+import { Observable } from 'rxjs/Observable';
+import { JhiEventManager } from 'ng-jhipster';
+
+import { OniryxHackathonTestModule } from '../../../test.module';
+import { ExpenseNoteDialogComponent } from '../../../../../../main/webapp/app/entities/expense-note/expense-note-dialog.component';
+import { ExpenseNoteService } from '../../../../../../main/webapp/app/entities/expense-note/expense-note.service';
+import { ExpenseNote } from '../../../../../../main/webapp/app/entities/expense-note/expense-note.model';
+import { EmployeeService } from '../../../../../../main/webapp/app/entities/employee';
+
+describe('Component Tests', () => {
+
+    describe('ExpenseNote Management Dialog Component', () => {
+        let comp: ExpenseNoteDialogComponent;
+        let fixture: ComponentFixture<ExpenseNoteDialogComponent>;
+        let service: ExpenseNoteService;
+        let mockEventManager: any;
+        let mockActiveModal: any;
+
+        beforeEach(async(() => {
+            TestBed.configureTestingModule({
+                imports: [OniryxHackathonTestModule],
+                declarations: [ExpenseNoteDialogComponent],
+                providers: [
+                    EmployeeService,
+                    ExpenseNoteService
+                ]
+            })
+            .overrideTemplate(ExpenseNoteDialogComponent, '')
+            .compileComponents();
+        }));
+
+        beforeEach(() => {
+            fixture = TestBed.createComponent(ExpenseNoteDialogComponent);
+            comp = fixture.componentInstance;
+            service = fixture.debugElement.injector.get(ExpenseNoteService);
+            mockEventManager = fixture.debugElement.injector.get(JhiEventManager);
+            mockActiveModal = fixture.debugElement.injector.get(NgbActiveModal);
+        });
+
+        describe('save', () => {
+            it('Should call update service on save for existing entity',
+                inject([],
+                    fakeAsync(() => {
+                        // GIVEN
+                        const entity = new ExpenseNote(123);
+                        spyOn(service, 'update').and.returnValue(Observable.of(new HttpResponse({body: entity})));
+                        comp.expenseNote = entity;
+                        // WHEN
+                        comp.save();
+                        tick(); // simulate async
+
+                        // THEN
+                        expect(service.update).toHaveBeenCalledWith(entity);
+                        expect(comp.isSaving).toEqual(false);
+                        expect(mockEventManager.broadcastSpy).toHaveBeenCalledWith({ name: 'expenseNoteListModification', content: 'OK'});
+                        expect(mockActiveModal.dismissSpy).toHaveBeenCalled();
+                    })
+                )
+            );
+
+            it('Should call create service on save for new entity',
+                inject([],
+                    fakeAsync(() => {
+                        // GIVEN
+                        const entity = new ExpenseNote();
+                        spyOn(service, 'create').and.returnValue(Observable.of(new HttpResponse({body: entity})));
+                        comp.expenseNote = entity;
+                        // WHEN
+                        comp.save();
+                        tick(); // simulate async
+
+                        // THEN
+                        expect(service.create).toHaveBeenCalledWith(entity);
+                        expect(comp.isSaving).toEqual(false);
+                        expect(mockEventManager.broadcastSpy).toHaveBeenCalledWith({ name: 'expenseNoteListModification', content: 'OK'});
+                        expect(mockActiveModal.dismissSpy).toHaveBeenCalled();
+                    })
+                )
+            );
+        });
+    });
+
+});
diff --git a/src/test/javascript/spec/app/entities/expense-note/expense-note.component.spec.ts b/src/test/javascript/spec/app/entities/expense-note/expense-note.component.spec.ts
new file mode 100644
index 0000000..ec5cd5b
--- /dev/null
+++ b/src/test/javascript/spec/app/entities/expense-note/expense-note.component.spec.ts
@@ -0,0 +1,55 @@
+/* tslint:disable max-line-length */
+import { ComponentFixture, TestBed, async } from '@angular/core/testing';
+import { Observable } from 'rxjs/Observable';
+import { HttpHeaders, HttpResponse } from '@angular/common/http';
+
+import { OniryxHackathonTestModule } from '../../../test.module';
+import { ExpenseNoteComponent } from '../../../../../../main/webapp/app/entities/expense-note/expense-note.component';
+import { ExpenseNoteService } from '../../../../../../main/webapp/app/entities/expense-note/expense-note.service';
+import { ExpenseNote } from '../../../../../../main/webapp/app/entities/expense-note/expense-note.model';
+
+describe('Component Tests', () => {
+
+    describe('ExpenseNote Management Component', () => {
+        let comp: ExpenseNoteComponent;
+        let fixture: ComponentFixture<ExpenseNoteComponent>;
+        let service: ExpenseNoteService;
+
+        beforeEach(async(() => {
+            TestBed.configureTestingModule({
+                imports: [OniryxHackathonTestModule],
+                declarations: [ExpenseNoteComponent],
+                providers: [
+                    ExpenseNoteService
+                ]
+            })
+            .overrideTemplate(ExpenseNoteComponent, '')
+            .compileComponents();
+        }));
+
+        beforeEach(() => {
+            fixture = TestBed.createComponent(ExpenseNoteComponent);
+            comp = fixture.componentInstance;
+            service = fixture.debugElement.injector.get(ExpenseNoteService);
+        });
+
+        describe('OnInit', () => {
+            it('Should call load all on init', () => {
+                // GIVEN
+                const headers = new HttpHeaders().append('link', 'link;link');
+                spyOn(service, 'query').and.returnValue(Observable.of(new HttpResponse({
+                    body: [new ExpenseNote(123)],
+                    headers
+                })));
+
+                // WHEN
+                comp.ngOnInit();
+
+                // THEN
+                expect(service.query).toHaveBeenCalled();
+                expect(comp.expenseNotes[0]).toEqual(jasmine.objectContaining({id: 123}));
+            });
+        });
+    });
+
+});
diff --git a/src/test/javascript/spec/app/entities/expense-note/expense-note.service.spec.ts b/src/test/javascript/spec/app/entities/expense-note/expense-note.service.spec.ts
new file mode 100644
index 0000000..edefc9d
--- /dev/null
+++ b/src/test/javascript/spec/app/entities/expense-note/expense-note.service.spec.ts
@@ -0,0 +1,70 @@
+/* tslint:disable max-line-length */
+import { TestBed, getTestBed } from '@angular/core/testing';
+import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';
+import { JhiDateUtils } from 'ng-jhipster';
+
+import { ExpenseNoteService } from '../../../../../../main/webapp/app/entities/expense-note/expense-note.service';
+import { SERVER_API_URL } from '../../../../../../main/webapp/app/app.constants';
+
+describe('Service Tests', () => {
+
+    describe('ExpenseNote Service', () => {
+        let injector: TestBed;
+        let service: ExpenseNoteService;
+        let httpMock: HttpTestingController;
+
+        beforeEach(() => {
+            TestBed.configureTestingModule({
+                imports: [
+                    HttpClientTestingModule
+                ],
+                providers: [
+                    JhiDateUtils,
+                    ExpenseNoteService
+                ]
+            });
+            injector = getTestBed();
+            service = injector.get(ExpenseNoteService);
+            httpMock = injector.get(HttpTestingController);
+        });
+
+        describe('Service methods', () => {
+            it('should call correct URL', () => {
+                service.find(123).subscribe(() => {});
+
+                const req  = httpMock.expectOne({ method: 'GET' });
+
+                const resourceUrl = SERVER_API_URL + 'api/expense-notes';
+                expect(req.request.url).toEqual(resourceUrl + '/' + 123);
+            });
+            it('should return ExpenseNote', () => {
+
+                service.find(123).subscribe((received) => {
+                    expect(received.body.id).toEqual(123);
+                });
+
+                const req = httpMock.expectOne({ method: 'GET' });
+                req.flush({id: 123});
+            });
+
+            it('should propagate not found response', () => {
+
+                service.find(123).subscribe(null, (_error: any) => {
+                    expect(_error.status).toEqual(404);
+                });
+
+                const req  = httpMock.expectOne({ method: 'GET' });
+                req.flush('Invalid request parameters', {
+                    status: 404, statusText: 'Bad Request'
+                });
+
+            });
+        });
+
+        afterEach(() => {
+            httpMock.verify();
+        });
+
+    });
+
+});
diff --git a/src/test/javascript/spec/app/entities/template/template-delete-dialog.component.spec.ts b/src/test/javascript/spec/app/entities/template/template-delete-dialog.component.spec.ts
new file mode 100644
index 0000000..71daae6
--- /dev/null
+++ b/src/test/javascript/spec/app/entities/template/template-delete-dialog.component.spec.ts
@@ -0,0 +1,61 @@
+/* tslint:disable max-line-length */
+import { ComponentFixture, TestBed, async, inject, fakeAsync, tick } from '@angular/core/testing';
+import { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';
+import { Observable } from 'rxjs/Observable';
+import { JhiEventManager } from 'ng-jhipster';
+
+import { OniryxHackathonTestModule } from '../../../test.module';
+import { TemplateDeleteDialogComponent } from '../../../../../../main/webapp/app/entities/template/template-delete-dialog.component';
+import { TemplateService } from '../../../../../../main/webapp/app/entities/template/template.service';
+
+describe('Component Tests', () => {
+
+    describe('Template Management Delete Component', () => {
+        let comp: TemplateDeleteDialogComponent;
+        let fixture: ComponentFixture<TemplateDeleteDialogComponent>;
+        let service: TemplateService;
+        let mockEventManager: any;
+        let mockActiveModal: any;
+
+        beforeEach(async(() => {
+            TestBed.configureTestingModule({
+                imports: [OniryxHackathonTestModule],
+                declarations: [TemplateDeleteDialogComponent],
+                providers: [
+                    TemplateService
+                ]
+            })
+            .overrideTemplate(TemplateDeleteDialogComponent, '')
+            .compileComponents();
+        }));
+
+        beforeEach(() => {
+            fixture = TestBed.createComponent(TemplateDeleteDialogComponent);
+            comp = fixture.componentInstance;
+            service = fixture.debugElement.injector.get(TemplateService);
+            mockEventManager = fixture.debugElement.injector.get(JhiEventManager);
+            mockActiveModal = fixture.debugElement.injector.get(NgbActiveModal);
+        });
+
+        describe('confirmDelete', () => {
+            it('Should call delete service on confirmDelete',
+                inject([],
+                    fakeAsync(() => {
+                        // GIVEN
+                        spyOn(service, 'delete').and.returnValue(Observable.of({}));
+
+                        // WHEN
+                        comp.confirmDelete(123);
+                        tick();
+
+                        // THEN
+                        expect(service.delete).toHaveBeenCalledWith(123);
+                        expect(mockActiveModal.dismissSpy).toHaveBeenCalled();
+                        expect(mockEventManager.broadcastSpy).toHaveBeenCalled();
+                    })
+                )
+            );
+        });
+    });
+
+});
diff --git a/src/test/javascript/spec/app/entities/template/template-detail.component.spec.ts b/src/test/javascript/spec/app/entities/template/template-detail.component.spec.ts
new file mode 100644
index 0000000..2940ea8
--- /dev/null
+++ b/src/test/javascript/spec/app/entities/template/template-detail.component.spec.ts
@@ -0,0 +1,54 @@
+/* tslint:disable max-line-length */
+import { ComponentFixture, TestBed, async } from '@angular/core/testing';
+import { HttpResponse } from '@angular/common/http';
+import { Observable } from 'rxjs/Observable';
+
+import { OniryxHackathonTestModule } from '../../../test.module';
+import { TemplateDetailComponent } from '../../../../../../main/webapp/app/entities/template/template-detail.component';
+import { TemplateService } from '../../../../../../main/webapp/app/entities/template/template.service';
+import { Template } from '../../../../../../main/webapp/app/entities/template/template.model';
+
+describe('Component Tests', () => {
+
+    describe('Template Management Detail Component', () => {
+        let comp: TemplateDetailComponent;
+        let fixture: ComponentFixture<TemplateDetailComponent>;
+        let service: TemplateService;
+
+        beforeEach(async(() => {
+            TestBed.configureTestingModule({
+                imports: [OniryxHackathonTestModule],
+                declarations: [TemplateDetailComponent],
+                providers: [
+                    TemplateService
+                ]
+            })
+            .overrideTemplate(TemplateDetailComponent, '')
+            .compileComponents();
+        }));
+
+        beforeEach(() => {
+            fixture = TestBed.createComponent(TemplateDetailComponent);
+            comp = fixture.componentInstance;
+            service = fixture.debugElement.injector.get(TemplateService);
+        });
+
+        describe('OnInit', () => {
+            it('Should call load all on init', () => {
+                // GIVEN
+
+                spyOn(service, 'find').and.returnValue(Observable.of(new HttpResponse({
+                    body: new Template(123)
+                })));
+
+                // WHEN
+                comp.ngOnInit();
+
+                // THEN
+                expect(service.find).toHaveBeenCalledWith(123);
+                expect(comp.template).toEqual(jasmine.objectContaining({id: 123}));
+            });
+        });
+    });
+
+});
diff --git a/src/test/javascript/spec/app/entities/template/template-dialog.component.spec.ts b/src/test/javascript/spec/app/entities/template/template-dialog.component.spec.ts
new file mode 100644
index 0000000..cbc9a27
--- /dev/null
+++ b/src/test/javascript/spec/app/entities/template/template-dialog.component.spec.ts
@@ -0,0 +1,87 @@
+/* tslint:disable max-line-length */
+import { ComponentFixture, TestBed, async, inject, fakeAsync, tick } from '@angular/core/testing';
+import { HttpResponse } from '@angular/common/http';
+import { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';
+import { Observable } from 'rxjs/Observable';
+import { JhiEventManager } from 'ng-jhipster';
+
+import { OniryxHackathonTestModule } from '../../../test.module';
+import { TemplateDialogComponent } from '../../../../../../main/webapp/app/entities/template/template-dialog.component';
+import { TemplateService } from '../../../../../../main/webapp/app/entities/template/template.service';
+import { Template } from '../../../../../../main/webapp/app/entities/template/template.model';
+import { EmployeeService } from '../../../../../../main/webapp/app/entities/employee';
+
+describe('Component Tests', () => {
+
+    describe('Template Management Dialog Component', () => {
+        let comp: TemplateDialogComponent;
+        let fixture: ComponentFixture<TemplateDialogComponent>;
+        let service: TemplateService;
+        let mockEventManager: any;
+        let mockActiveModal: any;
+
+        beforeEach(async(() => {
+            TestBed.configureTestingModule({
+                imports: [OniryxHackathonTestModule],
+                declarations: [TemplateDialogComponent],
+                providers: [
+                    EmployeeService,
+                    TemplateService
+                ]
+            })
+            .overrideTemplate(TemplateDialogComponent, '')
+            .compileComponents();
+        }));
+
+        beforeEach(() => {
+            fixture = TestBed.createComponent(TemplateDialogComponent);
+            comp = fixture.componentInstance;
+            service = fixture.debugElement.injector.get(TemplateService);
+            mockEventManager = fixture.debugElement.injector.get(JhiEventManager);
+            mockActiveModal = fixture.debugElement.injector.get(NgbActiveModal);
+        });
+
+        describe('save', () => {
+            it('Should call update service on save for existing entity',
+                inject([],
+                    fakeAsync(() => {
+                        // GIVEN
+                        const entity = new Template(123);
+                        spyOn(service, 'update').and.returnValue(Observable.of(new HttpResponse({body: entity})));
+                        comp.template = entity;
+                        // WHEN
+                        comp.save();
+                        tick(); // simulate async
+
+                        // THEN
+                        expect(service.update).toHaveBeenCalledWith(entity);
+                        expect(comp.isSaving).toEqual(false);
+                        expect(mockEventManager.broadcastSpy).toHaveBeenCalledWith({ name: 'templateListModification', content: 'OK'});
+                        expect(mockActiveModal.dismissSpy).toHaveBeenCalled();
+                    })
+                )
+            );
+
+            it('Should call create service on save for new entity',
+                inject([],
+                    fakeAsync(() => {
+                        // GIVEN
+                        const entity = new Template();
+                        spyOn(service, 'create').and.returnValue(Observable.of(new HttpResponse({body: entity})));
+                        comp.template = entity;
+                        // WHEN
+                        comp.save();
+                        tick(); // simulate async
+
+                        // THEN
+                        expect(service.create).toHaveBeenCalledWith(entity);
+                        expect(comp.isSaving).toEqual(false);
+                        expect(mockEventManager.broadcastSpy).toHaveBeenCalledWith({ name: 'templateListModification', content: 'OK'});
+                        expect(mockActiveModal.dismissSpy).toHaveBeenCalled();
+                    })
+                )
+            );
+        });
+    });
+
+});
diff --git a/src/test/javascript/spec/app/entities/template/template.component.spec.ts b/src/test/javascript/spec/app/entities/template/template.component.spec.ts
new file mode 100644
index 0000000..d33b5ba
--- /dev/null
+++ b/src/test/javascript/spec/app/entities/template/template.component.spec.ts
@@ -0,0 +1,55 @@
+/* tslint:disable max-line-length */
+import { ComponentFixture, TestBed, async } from '@angular/core/testing';
+import { Observable } from 'rxjs/Observable';
+import { HttpHeaders, HttpResponse } from '@angular/common/http';
+
+import { OniryxHackathonTestModule } from '../../../test.module';
+import { TemplateComponent } from '../../../../../../main/webapp/app/entities/template/template.component';
+import { TemplateService } from '../../../../../../main/webapp/app/entities/template/template.service';
+import { Template } from '../../../../../../main/webapp/app/entities/template/template.model';
+
+describe('Component Tests', () => {
+
+    describe('Template Management Component', () => {
+        let comp: TemplateComponent;
+        let fixture: ComponentFixture<TemplateComponent>;
+        let service: TemplateService;
+
+        beforeEach(async(() => {
+            TestBed.configureTestingModule({
+                imports: [OniryxHackathonTestModule],
+                declarations: [TemplateComponent],
+                providers: [
+                    TemplateService
+                ]
+            })
+            .overrideTemplate(TemplateComponent, '')
+            .compileComponents();
+        }));
+
+        beforeEach(() => {
+            fixture = TestBed.createComponent(TemplateComponent);
+            comp = fixture.componentInstance;
+            service = fixture.debugElement.injector.get(TemplateService);
+        });
+
+        describe('OnInit', () => {
+            it('Should call load all on init', () => {
+                // GIVEN
+                const headers = new HttpHeaders().append('link', 'link;link');
+                spyOn(service, 'query').and.returnValue(Observable.of(new HttpResponse({
+                    body: [new Template(123)],
+                    headers
+                })));
+
+                // WHEN
+                comp.ngOnInit();
+
+                // THEN
+                expect(service.query).toHaveBeenCalled();
+                expect(comp.templates[0]).toEqual(jasmine.objectContaining({id: 123}));
+            });
+        });
+    });
+
+});
diff --git a/src/test/javascript/spec/app/entities/template/template.service.spec.ts b/src/test/javascript/spec/app/entities/template/template.service.spec.ts
new file mode 100644
index 0000000..706035b
--- /dev/null
+++ b/src/test/javascript/spec/app/entities/template/template.service.spec.ts
@@ -0,0 +1,70 @@
+/* tslint:disable max-line-length */
+import { TestBed, getTestBed } from '@angular/core/testing';
+import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';
+import { JhiDateUtils } from 'ng-jhipster';
+
+import { TemplateService } from '../../../../../../main/webapp/app/entities/template/template.service';
+import { SERVER_API_URL } from '../../../../../../main/webapp/app/app.constants';
+
+describe('Service Tests', () => {
+
+    describe('Template Service', () => {
+        let injector: TestBed;
+        let service: TemplateService;
+        let httpMock: HttpTestingController;
+
+        beforeEach(() => {
+            TestBed.configureTestingModule({
+                imports: [
+                    HttpClientTestingModule
+                ],
+                providers: [
+                    JhiDateUtils,
+                    TemplateService
+                ]
+            });
+            injector = getTestBed();
+            service = injector.get(TemplateService);
+            httpMock = injector.get(HttpTestingController);
+        });
+
+        describe('Service methods', () => {
+            it('should call correct URL', () => {
+                service.find(123).subscribe(() => {});
+
+                const req  = httpMock.expectOne({ method: 'GET' });
+
+                const resourceUrl = SERVER_API_URL + 'api/templates';
+                expect(req.request.url).toEqual(resourceUrl + '/' + 123);
+            });
+            it('should return Template', () => {
+
+                service.find(123).subscribe((received) => {
+                    expect(received.body.id).toEqual(123);
+                });
+
+                const req = httpMock.expectOne({ method: 'GET' });
+                req.flush({id: 123});
+            });
+
+            it('should propagate not found response', () => {
+
+                service.find(123).subscribe(null, (_error: any) => {
+                    expect(_error.status).toEqual(404);
+                });
+
+                const req  = httpMock.expectOne({ method: 'GET' });
+                req.flush('Invalid request parameters', {
+                    status: 404, statusText: 'Bad Request'
+                });
+
+            });
+        });
+
+        afterEach(() => {
+            httpMock.verify();
+        });
+
+    });
+
+});
-- 
2.13.3.windows.1

